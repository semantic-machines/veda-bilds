@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-fc: <http://semantic-machines.com/veda/veda-function-create/> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-function-search/> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix vdi: <http://semantic-machines.com/veda/veda-index/> .

<http://semantic-machines.com/veda/veda-function-script>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология  скриптов системы Veda"@ru ;
  rdfs:label "Veda system scripts ontology"@en ;
#  owl:versionInfo "1.3" ;
  v-s:loadPriority 7 ;
.
# ------------------------------------------------------------ СТРОКИ --
v-s:RunBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Запустить"@ru ;
  rdfs:label "Run"@en ;
.
v-s:StartBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Запустить"@ru ;
  rdfs:label "Start"@en ;
.
v-s:RestartBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Перезапустить"@ru ;
  rdfs:label "Restart"@en ;
.
v-s:ClearBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Очистить"@ru ;
  rdfs:label "Clear"@en ;
.
v-s:StopBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Остановить"@ru ;
  rdfs:label "Stop"@en ;
.


# ------------------------------------------------------------ КЛАССЫ --

# -------------------------------------------------------- v-s:UserScript --

v-s:UserScript
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:UserThing ;
  rdfs:label "Пользовательский скрипт"@ru ;
  rdfs:label "User script"@en ;
.
v-s:executeAt
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Исполнять в"@ru ;
  rdfs:label "Execute at"@en ;
  rdfs:domain v-s:UserScript ;
  rdfs:range xsd:string ;
.
  v-s:PsExecuteAtUserScript
    rdf:type v-ui:DatatypePropertySpecification ;
    rdfs:label "Спецификация свойства v-s:executeAt для класса v-s:UserScript"@ru ;
    rdfs:label "v-s:executeAt property specification for v-s:UserScript class"@en ;
    v-ui:forClass v-s:UserScript ;
    v-ui:forProperty v-s:executeAt ;
    v-ui:minCardinality 1 ;
    v-ui:maxCardinality 1 ;
    v-ui:defaultValue "Browser" ;
    v-ui:optionValue "Browser" ;
    v-ui:optionValue "Server" ;
  .
v-s:output
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Вывод"@ru ;
  rdfs:label "Output"@en ;
  rdfs:domain v-s:UserScript ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:string ;
.
v-s:toBeRun
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Выполнить"@ru ;
  rdfs:label "To be run"@en ;
  rdfs:domain v-s:UserScript ;
  rdfs:range xsd:boolean ;
.
v-s:lastRun
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Последний запуск"@ru ;
  rdfs:label "Last run"@en ;
  rdfs:domain v-s:UserScript ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:dateTime ;
.

# ------------------------------------------------------------ v-s:Operation --
v-s:Operation
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:SystemThing ;
  rdfs:subClassOf v-s:Temporal ;
  rdfs:label "Операция"@ru ;
  rdfs:label "Operation"@en ;
.


# ---------------------------------------------------------- v-s:GenericOperation --
v-s:GenericOperation
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:Operation ;
  rdfs:label "Общая операция"@ru ;
  rdfs:label "Generic operation"@en ;
.

# v-s:dateFrom
# v-s:dateTo
# v-s:duration
# v-s:hasStatus
# v-s:output

v-s:dataQuery
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Запрос"@ru ;
  rdfs:label "Query"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:string ;
.

v-s:data
  rdf:type rdf:Property ;
  rdfs:label "Данные"@ru ;
  rdfs:label "Data"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range rdfs:Resource ;
.

v-s:processed
  rdf:type rdf:Property ;
  rdfs:label "Обработано"@ru ;
  rdfs:label "Processed"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:integer ;
.

v-s:progress
  rdf:type rdf:Property ;
  rdfs:label "Прогресс"@ru ;
  rdfs:label "Progress"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:integer ;
.

# ---------------------------------------------------------- v-s:OperationDelete --
v-s:OperationDelete
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:GenericOperation ;
  rdfs:label "Удалить"@ru ;
  rdfs:label "Delete"@en ;
  v-ui:hasModel v-s:OperationDeleteModel ;
.
v-s:OperationDeleteModel
  rdf:type v-ui:ClassModel ;
  rdfs:label "Модель операции удаления"@ru ;
  rdfs:label "Delete operation model"@en ;
  v-s:script """
this.fn = function (individual_uri) {
  set_in_individual(veda.ticket, {
    "@": individual_uri,
    "v-s:deleted": veda.Util.newBool(true)
  });
};
  """ ;
.

# ---------------------------------------------------------- v-s:OperationRemove --
v-s:OperationRemove
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:GenericOperation ;
  rdfs:label "Уничтожить"@ru ;
  rdfs:label "Remove"@en ;
  v-ui:hasModel v-s:OperationRemoveModel ;
.

v-s:OperationRemoveModel
  rdf:type v-ui:ClassModel ;
  rdfs:label "Модель операции уничтожения"@ru ;
  rdfs:label "Remove operation model"@en ;
  v-s:script """
this.fn = function (individual_uri) {
  remove_individual(veda.ticket, individual_uri);
};
  """ ;
.

# ---------------------------------------------------------- v-s:OperationRestore --
v-s:OperationRestore
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:GenericOperation ;
  rdfs:label "Восстановить"@ru ;
  rdfs:label "Restore"@en ;
  v-ui:hasModel v-s:OperationRestoreModel ;
.
v-s:OperationRestoreModel
  rdf:type v-ui:ClassModel ;
  rdfs:label "Модель операции восстановления"@ru ;
  rdfs:label "Restore operation model"@en ;
  v-s:script """
this.fn = function (individual_uri) {
  remove_from_individual(veda.ticket, {
    "@": individual_uri,
    "v-s:deleted": veda.Util.newBool(true)
  });
};
  """ ;
.

# ---------------------------------------------------------- v-s:OperationUpdate --
v-s:OperationUpdate
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:GenericOperation ;
  rdfs:label "Обновить"@ru ;
  rdfs:label "Update"@en ;
  v-ui:hasModel v-s:OperationUpdateModel ;
  v-ui:hasTemplate v-s:OperationTemplate ;
.
v-s:OperationUpdateModel
  rdf:type v-ui:ClassModel ;
  rdfs:label "Модель операции обновления"@ru ;
  rdfs:label "Update operation model"@en ;
  v-s:script """
this.fn = function (individual_uri) {
  var individual = get_individual(veda.ticket, individual_uri);
  put_individual(veda.ticket, individual);
};
  """ ;
.

# ------------------------------------------------------------ СОБЫТИЯ --
v-s:UserScriptEvent
  rdf:type v-s:Event ;
  v-s:triggerByType v-s:UserScript ;
  v-s:runAt "V8.LowPriority" ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */
document = get_individual(veda.ticket, document['@']);
var toBeRun = document["v-s:toBeRun"] && document["v-s:toBeRun"][0] && document["v-s:toBeRun"][0].data ;
var executeAt = document["v-s:executeAt"] && document["v-s:executeAt"][0] && document["v-s:executeAt"][0].data ;
var script = document["v-s:script"] && document["v-s:script"][0] && document["v-s:script"][0].data;

if (!script || !toBeRun || executeAt !== "Server") { return; }

// preserve global print & console
var nativePrint = this.print;
var nativeConsole = this.console;

// override global print & console
var output = "";
var _print = function () {
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i] ;
    var argString = typeof arg !== "undefined" ? arg.toString() : "undefined" ;
    if (i === 0) {
      output += argString;
    } else {
      output += " " + argString;
    }
  }
  output += String.fromCharCode(13, 10);
}
this.print = _print;

var _console = {
  log: _print,
  error: _print,
  info: _print,
  time: function (timer) {
    this[timer] = new Date();
  },
  timeEnd: function (timer) {
    var delta = new Date() - this[timer];
    this.log(timer, delta, "msec");
  }
};
this.console = _console;

script = new Function (script);
try {
  script();
} catch (err) {
  print(err, err.stack);
}
document["v-s:output"] = veda.Util.newStr(output);
document["v-s:lastRun"] = veda.Util.newDate(new Date());
delete document["v-s:toBeRun"];
put_individual(ticket, document, _event_id);

// restore global print & console
this.print = nativePrint;
this.console = nativeConsole;
"""
.


# ------------------------------------------------------------ ШАБЛОНЫ --

# -------------------------------------------------------- v-s:UserScript --
v-s:TS_UserScript
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:UserScriptTemplate;
  v-ui:forClass v-s:UserScript
.
v-s:CS_UserScript
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:UserScript "@ru, "Class specification v-s:UserScript "@en;
  v-ui:forClass v-s:UserScript ;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:UserScriptTemplate;
  v-s:loadPriority 15 ;
.
v-s:UserScriptTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:UserScript ;
  rdfs:label "Шаблон для класса v-s:UserScript"@ru ;
  rdfs:label "Template for v-s:UserScript class"@en ;
  v-ui:template "v-s_UserScriptTemplate.js"
.

# -------------------------------------------------------- v-s:Operation --
v-s:TS_Operation
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-ui:forClass v-s:Operation
.
v-s:CS_Operation
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:Operation "@ru, "Class specification v-s:Operation "@en;
  v-ui:forClass v-s:Operation ;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-s:loadPriority 15 ;
.
v-s:OperationTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:Operation ;
  rdfs:label "Шаблон для класса v-s:Operation"@ru ;
  rdfs:label "Template for v-s:Operation class"@en ;
  v-ui:template "v-s_OperationTemplate.js" ;
.

# ------------------------------------------------------ v-s:GenericOperation --
v-s:TS_GenericOperation
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-ui:forClass v-s:GenericOperation
.
v-s:CS_GenericOperation
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:GenericOperation "@ru, "Class specification v-s:GenericOperation "@en;
  v-ui:forClass v-s:GenericOperation;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-s:loadPriority 15 ;
.

# ------------------------------------------------------ v-s:OperationDelete --
v-s:TS_OperationDelete
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-ui:forClass v-s:OperationDelete
.
v-s:CS_OperationDelete
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:OperationDelete "@ru, "Class specification v-s:OperationDelete "@en;
  v-ui:forClass v-s:OperationDelete;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-s:loadPriority 15 ;
.

# ------------------------------------------------------ v-s:OperationRemove --
v-s:TS_OperationRemove
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-ui:forClass v-s:OperationRemove
.
v-s:CS_OperationRemove
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:OperationRemove "@ru, "Class specification v-s:OperationRemove "@en;
  v-ui:forClass v-s:OperationRemove;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-s:loadPriority 15 ;
.

# ------------------------------------------------------ v-s:OperationRestore --
v-s:TS_OperationRestore
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-ui:forClass v-s:OperationRestore
.
v-s:CS_OperationRestore
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:OperationRestore "@ru, "Class specification v-s:OperationRestore "@en;
  v-ui:forClass v-s:OperationRestore;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-s:loadPriority 15 ;
.

# ------------------------------------------------------ v-s:OperationUpdate --
v-s:TS_OperationUpdate
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "10"^^xsd:integer;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-ui:forClass v-s:OperationUpdate
.
v-s:CS_OperationUpdate
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:OperationUpdate"@ru, "Class specification v-s:OperationUpdate "@en;
  v-ui:forClass v-s:OperationUpdate;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:OperationTemplate;
  v-s:loadPriority 15 ;
.
v-s:OperationHeaderTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон для класса v-s:Operation"@ru ;
  rdfs:label "Template for v-s:Operation class"@en ;
  v-ui:template "v-s_OperationHeaderTemplate.js" ;
.
v-s:OperationFooterTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:Operation ;
  rdfs:label "Шаблон для класса v-s:Operation"@ru ;
  rdfs:label "Template for v-s:Operation class"@en ;
  v-ui:template "v-s_OperationFooterTemplate.js" ;
.
v-s:OperationStatusTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:Operation ;
  rdfs:label "Шаблон для класса v-s:Operation"@ru ;
  rdfs:label "Template for v-s:Operation class"@en ;
  v-ui:template "v-s_OperationStatusTemplate.js" ;
.
v-s:OperationProgressTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:Operation ;
  rdfs:label "Шаблон для класса v-s:Operation"@ru ;
  rdfs:label "Template for v-s:Operation class"@en ;
  v-ui:template "v-s_OperationProgressTemplate.js" ;
.

v-s:OperationEvent
  rdf:type v-s:Event ;
  v-s:triggerByType v-s:Operation ;
  v-s:runAt "V8.LowPriority" ;
  v-s:unsafe true ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

var operation_uri = document["@"],
    operation = get_individual(veda.ticket, operation_uri),
    dataQuery = operation["v-s:dataQuery"] && operation["v-s:dataQuery"][0].data || "",
    data = operation["v-s:data"],
    processed = operation["v-s:processed"] && operation["v-s:processed"][0].data || 0,
    progress = operation["v-s:progress"] && operation["v-s:progress"][0].data || 0,
    status = operation["v-s:hasStatus"] && operation["v-s:hasStatus"][0].data || "",
    now = new Date(),
    dateFrom = operation["v-s:dateFrom"] && new Date(operation["v-s:dateFrom"][0].data),
    operation_type_uri = operation["rdf:type"][0].data,
    operation_type = get_individual(veda.ticket, operation_type_uri),
    operation_model_uri = operation_type["v-ui:hasModel"][0].data,
    operation_model = get_individual(veda.ticket, operation_model_uri),
    operation_model_src = operation_model["v-s:script"][0].data,
    max_queued = 100,
    to_process = 30,
    stop_signal_received = prev_state && prev_state["v-s:hasStatus"] && prev_state["v-s:hasStatus"][0].data === "v-s:StatusStopped" && status === "v-s:StatusExecution" ;

// Stop execution
if ( !status || status === "v-s:StatusStopped" || status === "v-s:StatusExecuted" ) {
  return ;
}

// First run with query specified
if ( status === "v-s:StatusStarted" && dataQuery && !data ) {
  var dataUris = query(veda.ticket, dataQuery).result;
  var dataValues = dataUris.map(function (valueUri) {
    return {
      type: "Uri",
      data: valueUri
    };
  });
  set_in_individual(veda.ticket, {
    "@": operation["@"],
    "v-s:data": dataValues,
    "v-s:processed": veda.Util.newInt(0),
    "v-s:dateFrom": veda.Util.newDate(now),
    "v-s:hasStatus": dataValues.length ? veda.Util.newUri("v-s:StatusExecution") : veda.Util.newUri("v-s:StatusExecuted")
  });
  return;
}

/*// Restart with query specified
if ( status === "v-s:StatusRestarted" && dataQuery ) {
  var dataUris = query(veda.ticket, dataQuery).result;
  var dataValues = dataUris.map(function (valueUri) {
    return {
      type: "Uri",
      data: valueUri
    };
  });
  set_in_individual(veda.ticket, {
    "@": operation["@"],
    "v-s:data": dataValues,
    "v-s:processed": veda.Util.newInt(0),
    "v-s:dateFrom": veda.Util.newDate(now),
    "v-s:hasStatus": dataValues.length ? veda.Util.newUri("v-s:StatusExecution") : veda.Util.newUri("v-s:StatusExecuted"),
    "v-s:output": veda.Util.newStr("")
  });
  return;
}*/

// Restart with data specified
if ( status === "v-s:StatusRestarted" && data ) {
  set_in_individual(veda.ticket, {
    "@": operation["@"],
    "v-s:processed": veda.Util.newInt(0),
    "v-s:dateFrom": veda.Util.newDate(now),
    "v-s:hasStatus": veda.Util.newUri("v-s:StatusExecution"),
    "v-s:output": veda.Util.newStr("")
  });
  return;
}

// Postpone execution at high load
if ( queue_elements_count - queue_elements_processed > max_queued ) {
  console.log("Queue busy", queue_elements_count - queue_elements_processed);
  set_in_individual(veda.ticket, {
    "@": operation["@"],
    "v-s:hasStatus": stop_signal_received ? veda.Util.newUri("v-s:StatusStopped") : veda.Util.newUri("v-s:StatusExecution"),
    "v-s:duration": veda.Util.newInt(Math.round( (now - dateFrom) / 1000 )),
    "v-s:dateFrom": veda.Util.newDate(dateFrom || now)
  });
  return;
}

// preserve global print & console
var nativePrint = this.print;
var nativeConsole = this.console;

// override global print & console
var output = "";
var _print = function () {
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i] ;
    var argString = typeof arg !== "undefined" ? arg.toString() : "undefined" ;
    if (i === 0) {
      output += argString;
    } else {
      output += " " + argString;
    }
  }
  output += String.fromCharCode(13, 10);
}
this.print = _print;

var _console = {
  log: _print,
  error: _print,
  info: _print,
  time: function (timer) {
    this[timer] = new Date();
  },
  timeEnd: function (timer) {
    var delta = new Date() - this[timer];
    this.log(timer, delta, "msec");
  }
};
this.console = _console;

// Process data portion
var operation_model_fn = new Function(operation_model_src);
operation_model_fn.call(operation);

for (var i = processed, max = processed + to_process, valueUri; (i < max) && data[i] && (valueUri = data[i].data); i++) {
  try {
    operation.fn(valueUri);
  } catch (error) {
    console.error(i, "Error processing individual", valueUri);
    continue;
  }
}
processed = i;

if (processed > 0 && data.length > 0) {
  progress = Math.floor( (processed / data.length) * 100 ) ;
} else if (processed === 0 && data.length > 0) {
  progress = 0 ;
} else if (processed === 0 && data.length === 0) {
  progress = 100 ;
}

var _output = operation["v-s:output"] ? operation["v-s:output"][0].data : "";

var to_set = {
  "@": operation["@"],
  "v-s:hasStatus": stop_signal_received ? veda.Util.newUri("v-s:StatusStopped") : veda.Util.newUri("v-s:StatusExecution"),
  "v-s:progress": veda.Util.newInt(progress),
  "v-s:processed": veda.Util.newInt(processed),
  "v-s:output": veda.Util.newStr(_output + output),
  "v-s:dateFrom": veda.Util.newDate(dateFrom || now),
  "v-s:duration": veda.Util.newInt(Math.round( (now - dateFrom) / 1000 ))
};
if (progress === 100) {
  to_set["v-s:hasStatus"] = veda.Util.newUri("v-s:StatusExecuted");
}
set_in_individual(veda.ticket, to_set);

// restore global print & console
this.print = nativePrint;
this.console = nativeConsole;
"""
.

# --------------------------Cron scripts-----------------------------

v-s:CronScriptsInfo
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:SystemThing ;
  rdfs:label "Информация о периодических скриптах"@ru ;
  rdfs:label "Cron scripts info"@en ;
.

v-s:lastDateOfExecuting
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Дата последнего выполнения"@ru ;
  rdfs:label "Date of last executing"@en ;
  rdfs:domain v-s:CronScriptsInfo ;
  rdfs:range xsd:dateTime ;
.
