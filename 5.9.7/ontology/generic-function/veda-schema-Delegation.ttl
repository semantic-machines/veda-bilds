@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-fc: <http://semantic-machines.com/veda/veda-function-create/> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-search/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix d: <http://semantic-machines.com/veda/veda-data/> .

<http://semantic-machines.com/veda/veda-schema-Delegation>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология системы Veda"@ru ;
  rdfs:label "Veda system ontology"@en ;
#  owl:versionInfo "1.3" ;
  v-s:loadPriority 6 ;
.

# ------------------------------------------------------------ КЛАССЫ --

# ----------------------------------------------------- v-s:RequestDelegation --
v-s:RequestDelegation
  rdf:type owl:Class ;
  rdfs:label "Заявка на делегирование"@ru ;
  rdfs:label "Request delegation"@en ;
  rdfs:subClassOf v-s:HRRecord ;
  rdfs:subClassOf v-s:OrganizationUnit ;
  rdfs:subClassOf v-s:Temporal ;
.

v-s:delegator
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Доверитель"@ru ;
  rdfs:label "Delegator"@en ;
  rdfs:range v-s:Appointment ;
.
  v-s:PsDelegatorForRequestDelegation
    rdf:type v-ui:PropertySpecification ;
    v-ui:forClass v-s:RequestDelegation ;
    v-ui:forProperty v-s:delegator ;
    v-ui:minCardinality 0 ;
    v-ui:maxCardinality 1 ;
    v-ui:queryPrefix "'rdf:type'=='v-s:Appointment' && 'v-s:official'=='true' && 'v-s:employee.v-s:hasAccount.isExists'=='true'" ;
    #v-ui:queryPrefix "('rdf:type' === 'v-s:Appointment' || 'rdf:type' === 'v-s:Person') && 'v-s:hasAccount.isExists'=='true'" ;
  .
v-s:delegate
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Заместитель"@ru ;
  rdfs:label "Delegate"@en ;
  rdfs:range v-s:Appointment ;
.
  v-s:PsDelegateForRequestDelegation
    rdf:type v-ui:PropertySpecification ;
    v-ui:forClass v-s:RequestDelegation ;
    v-ui:forProperty v-s:delegate ;
    v-ui:minCardinality 1 ;
    v-ui:maxCardinality 1 ;
    v-ui:queryPrefix "'rdf:type'=='v-s:Appointment' && 'v-s:official'=='true' && 'v-s:employee.v-s:hasAccount.isExists'=='true'" ;
    #v-ui:queryPrefix "('rdf:type' === 'v-s:Appointment' || 'rdf:type' === 'v-s:Person') && 'v-s:hasAccount.isExists'=='true'" ;
  .
v-s:delegatedPosition
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Делегируемая должность"@ru ;
  rdfs:label "Delegated position"@en ;
  rdfs:range v-s:Position ;
.
  v-s:PsDelegatedPositionForRequestDelegation
    rdf:type v-ui:PropertySpecification ;
    v-ui:forClass v-s:RequestDelegation ;
    v-ui:forProperty v-s:delegatedPosition ;
    v-ui:minCardinality 1 ;
    v-ui:maxCardinality 10 ;
    v-ui:queryPrefix "'rdf:type' === 'v-s:Position'" ;
  .
v-s:createdAppointment
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Созданное назначение"@ru ;
  rdfs:label "Created appointment"@en ;
  rdfs:range v-s:Appointment ;
.
v-s:hasDelegationPurpose
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Цель делегирования"@ru ;
  rdfs:label "Delegation purpose"@en ;
  rdfs:range v-s:DelegationPurpose ;
.
#v-s:dateFrom
#v-s:dateTo
  v-s:PsDatesRequestDelegation
    rdf:type v-ui:PropertySpecification ;
    v-ui:forClass v-s:RequestDelegation ;
    v-ui:forProperty v-s:dateFrom, v-s:dateTo ;
    v-ui:minCardinality 1 ;
    v-ui:maxCardinality 1 ;
  .

# --------------------------------------------------- v-s:RequestDelegationUser --
v-s:RequestDelegationUser
  rdf:type owl:Class ;
  rdfs:label "Заявка на делегирование для пользователя"@ru ;
  rdfs:label "Request delegation for user"@en ;
  rdfs:subClassOf v-s:RequestDelegation ;
.
#v-s:hasDelegationPurpose
v-s:PsDelegationPurposeForRequestDelegationUser
  rdf:type v-ui:ObjectPropertySpecification ;
  v-ui:forClass v-s:RequestDelegationUser ;
  v-ui:forProperty v-s:hasDelegationPurpose ;
  v-ui:minCardinality 1 ;
  v-ui:maxCardinality 1 ;
  v-ui:queryPrefix "'rdf:type'=='v-s:DelegationPurpose' && '@'=='d:delegate_Acting'" ;
  v-ui:defaultValue d:delegate_Acting;
.

# -------------------------------------------------- v-s:RequestDelegationAdmin --
v-s:RequestDelegationAdmin
  rdf:type owl:Class ;
  rdfs:label "Заявка на делегирование для администратора"@ru ;
  rdfs:label "Request delegation for admin"@en ;
  rdfs:subClassOf v-s:RequestDelegation ;
.
#v-s:hasDelegationPurpose
v-s:PsDelegationPurposeForRequestDelegationAdmin
  rdf:type v-ui:ObjectPropertySpecification ;
  v-ui:forClass v-s:RequestDelegationAdmin ;
  v-ui:forProperty v-s:hasDelegationPurpose ;
  v-ui:minCardinality 1 ;
  v-ui:maxCardinality 1 ;
  v-ui:queryPrefix "'rdf:type'=='v-s:DelegationPurpose'" ;
.


# ------------------------------------------------------------ ШАБЛОНЫ --
v-s:TS_RequestDelegation
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:RequestDelegationTemplate;
  v-ui:forClass v-s:RequestDelegation
.
v-s:CS_RequestDelegation
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:RequestDelegation "@ru, "Class specification v-s:RequestDelegation "@en;
  v-ui:forClass v-s:RequestDelegation ;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:RequestDelegationTemplate;
  v-s:loadPriority 15 ;
.
v-s:TS_RequestDelegationUser
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:RequestDelegationTemplate;
  v-ui:forClass v-s:RequestDelegationUser
.
v-s:CS_RequestDelegationUser
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:RequestDelegationUser "@ru, "Class specification v-s:RequestDelegationUser "@en;
  v-ui:forClass v-s:RequestDelegationUser ;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:RequestDelegationTemplate;
  v-s:loadPriority 15 ;
.
v-s:TS_RequestDelegationAdmin
  rdf:type v-ui:TemplateSpecification;
  v-s:loadPriority "15"^^xsd:integer;
  v-ui:defaultTemplate v-s:RequestDelegationTemplate;
  v-ui:forClass v-s:RequestDelegationAdmin
.
v-s:CS_RequestDelegationAdmin
  rdf:type v-s:ClassSpecification ;
  rdfs:label "Спецификация класса v-s:RequestDelegationAdmin "@ru, "Class specification v-s:RequestDelegationAdmin "@en;
  v-ui:forClass v-s:RequestDelegationAdmin ;
  v-s:shelfLife 9999;
  v-ui:defaultTemplate v-s:RequestDelegationTemplate;
  v-s:loadPriority 15 ;
.
v-s:RequestDelegationTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:RequestDelegation ;
  v-ui:forClass v-s:RequestDelegationUser ;
  v-ui:forClass v-s:RequestDelegationAdmin ;
  rdfs:label "Шаблон для класса v-s:RequestDelegationUser"@ru ;
  rdfs:label "Template for v-s:RequestDelegationUser class"@en ;
  v-ui:template "v-s_RequestDelegationTemplate.js" ;
.

# ------------------------------------------------------------ РЕЕСТРЫ --
v-s:RequestDelegationRegistryResultTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон результатов реестра заявки на делегирование"@ru ;
  rdfs:label "Request delegation registry result template"@en ;
  v-ui:template "v-s_RequestDelegationRegistryResultTemplate.js" ;
.

# ------------- Individuals ---------------

v-s:RequestDelegationUserBlank
  a v-fc:Blank ;
  rdfs:label "Заявка на делегирование"@ru ;
  rdfs:label "Delegation request"@en ;
  v-fc:targetType v-s:RequestDelegationUser ;
.

v-s:RequestDelegationAdminBlank
  a v-fc:Blank ;
  rdfs:label "Заявка на делегирование для администратора"@ru ;
  rdfs:label "Delegation request for admin"@en ;
  v-fc:targetType v-s:RequestDelegationAdmin ;
.

v-s:RequestDelegationRegistry
  a v-fs:AttributiveSearch;
  rdfs:label "Заявки на делегирование"@ru;
  rdfs:label "Delegation requests"@en;
  v-fs:searchBlank v-s:RequestDelegationRegistryBlank ;
  v-fs:searchBlankTemplate v-s:RequestDelegationTemplate ;
  v-fs:searchResultTemplate v-s:RequestDelegationRegistryResultTemplate ;
.

v-s:RequestDelegationRegistryBlank
  rdf:type v-fc:Blank ;
  rdfs:label "Заявка на делегирование"@ru ;
  rdfs:label "Delegation request"@en ;
  v-fc:targetType v-s:RequestDelegation ;
.

# ------------------------------------------------------------ УПРАВЛЕНИЕ ПРАВАМИ --

#C
v-s:Perm_DelegationUser_AllUsersGroup_C
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegationUser ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:canCreate "true"^^xsd:boolean ;
  rdfs:label "Все пользователи имеют право создавать Заявку на делегирование" ;
.
#R
v-s:Perm_DelegationUser_AllUsersGroup_R
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegation_group ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Все пользователи имеют право просматривать все Заявки на делегирование" ;
.
#RUD
v-s:Perm_DelegationUser_AllUsersGroup_RUD
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegation_group ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:canUpdate "true"^^xsd:boolean ;
  v-s:canDelete "true"^^xsd:boolean ;
  rdfs:label "Все пользователи имеют право создавать Заявку на делегирование" ;
  v-s:deleted "true"^^xsd:boolean;
.


#------Старая нотификация - УДАЛЕННОЕ ----------

v-s:RequestDelegation_BaseUser
  rdf:type v-s:Group ;
  rdfs:label "Основные пользователи RequestDelegation"@ru ;
  rdfs:label "Users RequestDelegation"@en ;
  v-s:deleted "true"^^xsd:boolean;
.
v-s:RequestDelegation_Admin
  rdf:type v-s:Group ;
  rdfs:label "Администраторы RequestDelegation"@ru ;
  rdfs:label "Administrators RequestDelegation"@en ;
  v-s:deleted "true"^^xsd:boolean;
.
v-s:RequestDelegation_permission1
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegation ;
  v-s:permissionObject v-s:RequestDelegation_group ;
  v-s:permissionObject v-s:RequestDelegationUserBlank ;
  v-s:permissionObject v-s:RequestDelegationRegistry ;
  v-s:permissionObject v-s:RequestDelegationRegistryBlank ;
  v-s:permissionSubject v-s:RequestDelegation_BaseUser ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "R. Все пользователи. Индивиды v-s:RequestDelegation" ;
  v-s:deleted "true"^^xsd:boolean;
.
v-s:RequestDelegation_permission2
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegationUser ;
  v-s:permissionSubject v-s:RequestDelegation_BaseUser ;
  v-s:canCreate "true"^^xsd:boolean ;
  rdfs:label "C. Админы. Класс RequestDelegation" ;
  v-s:deleted "true"^^xsd:boolean;
.
v-s:RequestDelegation_permission3
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegation ;
  v-s:permissionObject v-s:RequestDelegation_group ;
  v-s:permissionObject v-s:RequestDelegationUserBlank ;
  v-s:permissionObject v-s:RequestDelegationRegistry ;
  v-s:permissionObject v-s:RequestDelegationRegistryBlank ;
  v-s:permissionObject v-s:RequestDelegationAdminBlank ;
  v-s:permissionObject v-s:RequestDelegationAdmin ;
  v-s:permissionObject v-s:RequestDelegationAdmin_group ;
  v-s:permissionSubject v-s:RequestDelegation_Admin ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:canUpdate "true"^^xsd:boolean ;
  v-s:canDelete "true"^^xsd:boolean ;
  rdfs:label "CRUD. Админы. Индивиды v-s:RequestDelegation" ;
  v-s:deleted "true"^^xsd:boolean;
.
v-s:AllUsersGroup_RequestDelegation_BaseUser_membership
  rdf:type v-s:Membership ;
  v-s:memberOf v-s:RequestDelegation_BaseUser ;
  v-s:resource cfg:AllUsersGroup ;
  v-s:resource v-s:RequestDelegation_Admin ;
  rdfs:label "Все пользователи входят в группу Основные пользователи RequestDelegation" ;
  v-s:deleted "true"^^xsd:boolean;
.

# ------------------------------------------------------------ СЕРВЕРНЫЕ СКРИПТЫ --

cfg:Event_Delegation
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт обработки запросов на делегирование" ;
  v-s:triggerByType v-s:RequestDelegation ;
  v-s:script """
// First class event
if (parent_script_id) {
  // print("Not first class event. Exit.");
  return;
}

var request_uri = document["@"],
    request_type = veda.Util.getUri(document["rdf:type"]),
    requestDateFrom = new Date(document["v-s:dateFrom"][0].data),
    requestDateTo = new Date(document["v-s:dateTo"][0].data),
    request_origin = request_type === "v-s:RequestDelegationUser" ? "user" : "admin",
    now = new Date(),
    delegator_uri = veda.Util.getUri(document["v-s:delegator"]) || "",
    delegate_uri = veda.Util.getUri(document["v-s:delegate"]),
    delegate = get_individual(ticket, delegate_uri),
    position_uris = veda.Util.getUris(document["v-s:delegatedPosition"]),
    request_deleted = veda.Util.hasValue(document, "v-s:deleted", {data: true, type: "Boolean"}),
    delegate,
    custom_label = document["rdfs:label"],
    delegation_purpose = veda.Util.getUri(document["v-s:hasDelegationPurpose"]);

requestDateFrom.setHours(0, 0, 0, 0);
requestDateTo.setHours(23, 59, 59, 999);

var isActual = requestDateFrom <= now && now <= requestDateTo,
    dateFrom = veda.Util.newDate(requestDateFrom),
    dateTo = veda.Util.newDate(requestDateTo);

//print("[cfg:Event_Delegation] ************************** START **************************");
//print("[cfg:Event_Delegation]", "delegator =", delegator_uri, "| delegate =", delegate_uri, "| from =", dateFrom[0].data.toISOString(), "| to =", dateTo[0].data.toISOString(), "| positions =", JSON.stringify(position_uris), "| isActual =", isActual);

if (request_type === "v-s:RequestDelegationUser" && !request_deleted) {
  if (user_uri !== "cfg:Administrator" && delegator_uri !== user_uri) {
    //print("[cfg:Event_Delegation] ACCESS VIOLATION: delegator_uri !== user_uri");
    //print("[cfg:Event_Delegation] ************************** END **************************");
    return;
  }
}

var allDelegated = get_individual(ticket, "cfg:AllDelegatedAppointments");
if (!allDelegated) {
  allDelegated = {
    "@": "cfg:AllDelegatedAppointments",
    "rdf:type": veda.Util.newUri("rdfs:Resource"),
    "rdfs:label": veda.Util.newStr("All delegated appointments (cfg:Event_Delegation)")
  };
}
allDelegated["rdf:value"] = allDelegated["rdf:value"] || [];

position_uris.map(function (position_uri) {
  var uri = "d:" + veda.Util.Sha256.hash( ["delegated", delegator_uri, delegate_uri, position_uri, request_uri].join("_").split(":").join("_") ).substring(40);
  var oldTypeUri = "d:" + veda.Util.Sha256.hash( ["delegated", delegator_uri, delegate_uri, position_uri].join("_").split(":").join("_") ).substring(40);
  var appointment = get_individual(ticket, uri);

  if ( !appointment ) {
    appointment = {
      "@": uri,
      "rdf:type": veda.Util.newUri("v-s:Appointment"),
      "v-s:employee": veda.Util.newUri(delegate_uri),
      "v-s:occupation": veda.Util.newUri(position_uri),
      "v-s:dateFrom": dateFrom,
      "v-s:dateTo": dateTo,
      "v-s:origin": veda.Util.newStr(request_type === "v-s:RequestDelegationUser" ? "user" : "admin"),
      "v-s:deleted": veda.Util.newBool(!isActual),
      "rdfs:comment": veda.Util.newStr("создано cfg:Event_Delegation")
    };
    var position = get_individual(ticket, position_uri);
    if (position) {
      appointment["v-s:parentOrganization"] = position["v-s:parentOrganization"];
    }
    print("[cfg:Event_Delegation] new appointment created", uri);
  }

  var appointment_origin = veda.Util.getFirstValue(appointment["v-s:origin"]);
  var appointment_deleted = veda.Util.getFirstValue(appointment["v-s:deleted"]);
  var updateAllowed = request_origin === "admin" || request_origin === appointment_origin || appointment_deleted;

  if ( updateAllowed ) {
    // Update dates
    appointment["v-s:origin"] = veda.Util.newStr(request_type === "v-s:RequestDelegationUser" ? "user" : "admin");
    appointment["v-s:dateFrom"] = dateFrom;
    appointment["v-s:dateTo"] = dateTo;
    appointment["v-s:deleted"] = veda.Util.newBool(!isActual);
    appointment["v-s:hasDelegationPurpose"] = document["v-s:hasDelegationPurpose"];
    appointment["v-s:official"] = document["v-s:official"];
    appointment["v-s:ignoreExclusive"] = document["v-s:ignoreExclusive"];

    print("[cfg:Event_Delegation] set appointment dates", uri, "| isActual =", isActual);
  } else {
    print("[cfg:Event_Delegation] dates update is not allowed!");
  }

  allDelegated["rdf:value"] = allDelegated["rdf:value"].filter(function (item) {
    return item.data !== uri;
  });

  if ( request_deleted && updateAllowed ) {
    appointment["v-s:deleted"] = veda.Util.newBool(true);
    delegate = get_individual(ticket, delegate_uri);
    delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"] || [];
    delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"].filter( function (item) {
      return item.data !== uri;
    });
    delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"] || [];
    delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"].filter( function (item) {
      return item.data !== uri;
    });
    print("[cfg:Event_Delegation] request delegation deleted => delete appointment, update delegate");
    put_individual(ticket, delegate, _event_id);
  } else {
    allDelegated["rdf:value"].push({ data: uri, type: "Uri" });
  }

  if ( updateAllowed ) {
    if (veda.Util.hasValue(appointment, 'v-s:deleted')) {
      const deletedValue = appointment['v-s:deleted'];
      delete appointment['v-s:deleted'];
      put_individual(ticket, appointment, _event_id);
      appointment['v-s:deleted'] = deletedValue;
      put_individual(ticket, appointment, _event_id);
    } else {
      put_individual(ticket, appointment, _event_id);
    }
    print("[cfg:Event_Delegation] appointment saved =", JSON.stringify(appointment));
  }

  document["v-s:createdAppointment"] = document["v-s:createdAppointment"] || [];
    document["v-s:createdAppointment"] = document["v-s:createdAppointment"].filter( function (item) {
    return item.data !== uri;
  });
  document["v-s:createdAppointment"].push( veda.Util.newUri(uri) );
});

// Update request
put_individual(ticket, document, _event_id);

// Update AllDelegatedAppointments for further processing
put_individual(ticket, allDelegated, _event_id);
//print("[cfg:Event_Delegation] ************************** END **************************");
  """ ;
.

cfg:Event_ProcessAllDelegated
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт обработки запросов на делегирование" ;
  v-s:triggerByUid cfg:daily ;
  v-s:script """
// Process allDelegated list
var now = new Date(), allDelegated = get_individual(ticket, "cfg:AllDelegatedAppointments");
if (!allDelegated) {
  allDelegated = {
    "@": "cfg:AllDelegatedAppointments",
    "rdf:type": veda.Util.newUri("rdfs:Resource"),
    "rdfs:label": veda.Util.newStr("All delegated appointments (cfg:Event_Delegation)")
  };
}
allDelegated["rdf:value"] = allDelegated["rdf:value"] || [];

allDelegated["rdf:value"] = allDelegated["rdf:value"].filter(function (item) {
  try {
    var appointment_uri = item.data;
    var appointment = get_individual(ticket, appointment_uri);

    if (!appointment) {
      return false;
    }

    var isPremature = now < new Date(appointment["v-s:dateFrom"][0].data);
    var isActual = new Date(appointment["v-s:dateFrom"][0].data) <= now && now <= new Date(appointment["v-s:dateTo"][0].data);
    var isOverdue = now > new Date(appointment["v-s:dateTo"][0].data);
    var isDeleted = veda.Util.hasValue(appointment, "v-s:deleted", {data: true, type: "Boolean"});

    print("[cfg:Event_Delegation]", "appointment =", appointment_uri, "| isPremature =", isPremature, "| isActual =", isActual, "| isOverdue =", isOverdue, "| isDeleted =", isDeleted );

    if ( isActual ) {

      if ( isDeleted ) {
        appointment["v-s:deleted"] = [];
        put_individual(ticket, appointment, _event_id);
        //print("[cfg:Event_Delegation] appointment became actual & restored", appointment_uri);
        delegate_uri = veda.Util.getUri( appointment["v-s:employee"] );
        delegate = get_individual(ticket, delegate_uri);
        delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"] || [];
        delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"].filter( function (item) {
          return item.data !== appointment_uri;
        }).concat({data: appointment_uri, type: "Uri"});
        put_individual(ticket, delegate, _event_id);
        print("[cfg:Event_Delegation] delegate updated - actual appointment added", delegate_uri);
      }
      // Keep actual appointment in list
      return true;

    } else if ( isOverdue ) {

      if ( !isDeleted ) {
        delegate_uri = veda.Util.getUri( appointment["v-s:employee"] );
        delegate = get_individual(ticket, delegate_uri);
        delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"] || [];
        delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"].filter( function (item) {
          return item.data !== appointment_uri;
        });
        delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"] || [];
        delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"].filter( function (item) {
          return item.data !== appointment_uri;
        });
        appointment["v-s:deleted"] = veda.Util.newBool(true);
        put_individual(ticket, appointment, _event_id);
        //print("[cfg:Event_Delegation] overdue appointment deleted", appointment_uri);
        put_individual(ticket, delegate, _event_id);
        print("[cfg:Event_Delegation] delegate updated - overdue appointment removed", delegate_uri);
      }
      // Remove overdue appointment from list
      return false;

    } else if (isPremature) {
      if ( !isDeleted ) {
        // Mark premature appointment as deleted
        appointment["v-s:deleted"] = veda.Util.newBool(true);
        put_individual(ticket, appointment, _event_id);
        print("[cfg:Event_Delegation] premature appointment deleted", appointment_uri);
      }
      // Keep premature appointment in list
      return true;
    }
  } catch (exp) {
    print(veda.Util.toJson(exp));
    return true;
  };
});

put_individual(ticket, allDelegated, _event_id);

var allDelegated_list = allDelegated["rdf:value"].map(function (item) { return item.data; });
//print("[cfg:Event_Delegation] Update cfg:AllDelegatedAppointments =", JSON.stringify(allDelegated_list));

//print("cfg:Event_Delegation ************************** END **************************");
  """ ;
.
