"use strict";

System.register([], function (_export, _context) {
  "use strict";

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  // DOM Helpers

  /**
   * Delegate event listener to ancestor element
   * @param {Element} el - Ancestor element
   * @param {string} event - Event ID
   * @param {string} delegateSelector - Delegate selector
   * @param {function} handler - Event handler
   * @param {boolean} useCapture - Whether to use capture phase or not
   * @return {function} - Function to remove the event listener
   */
  function delegateHandler(el, event, delegateSelector, handler, useCapture) {
    el.addEventListener(event, ancestorHandler, useCapture);
    return function () {
      return el.removeEventListener(event, ancestorHandler, useCapture);
    };

    /**
     * Event listener for ancestor element
     * @param {Event} e - Event
     * @return {void}
     * @this Element
     */
    function ancestorHandler(e) {
      for (var target = e.target; target && target !== this; target = target.parentNode) {
        if (target.matches(delegateSelector)) {
          handler.call(target, e);
          break;
        }
      }
    }
  }

  /**
   * Clear container
   * @param {HTMLElement} container - Container element to be cleared
   * @return {HTMLElement} - The cleared container element
   */
  function clear(container) {
    var childrenTemplates = container.querySelectorAll('.template');
    var childrenControls = container.querySelectorAll('veda-control');
    var event = new Event('remove');
    childrenTemplates.forEach(function (template) {
      template.dispatchEvent(event);
    });
    childrenControls.forEach(function (control) {
      control.dispatchEvent(event);
    });
    container.innerHTML = '';
    return container;
  }

  /**
   * Sanitize a string by replacing special characters with their corresponding HTML entities
   * @param {string} string - The string to be sanitized
   * @return {string} - The sanitized string
   */
  function sanitize(string) {
    var map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    };
    var reg = /[&<>"'/]/gi;
    return String(string).replace(reg, function (match) {
      return map[match];
    });
  }

  /**
   * Create a debounced function that executes after a certain time has passed without additional function calls
   * @param {function} f - The function to be debounced
   * @param {number} ms - The debounce delay in milliseconds
   * @return {function} - The debounced function
   */
  function debounce(f, ms) {
    var skip = false;
    return function () {
      if (skip) return;
      skip = true;
      setTimeout(function () {
        return skip = false;
      }, ms);
      return f.apply(void 0, arguments);
    };
  }

  /**
   * Create a delayed function that executes after a certain time has passed without additional function calls
   * @param {function} f - The function to be delayed
   * @param {number} ms - The delay time in milliseconds
   * @return {function} - The delayed function
   */
  function delay(f, ms) {
    var wait;
    return function () {
      clearTimeout(wait);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      wait = setTimeout.apply(void 0, [f, ms].concat(args));
    };
  }

  /**
   * Create a decorator function that adds pre and post execution functions to a given function
   * @param {function} fn - The function to be decorated
   * @param {function} pre - Pre execution function
   * @param {function} post - Post execution function
   * @param {function} err - Error handling function
   * @return {function} - The decorated function
   */
  function decorator(fn, pre, post, err) {
    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var _len2,
        args,
        _key2,
        result,
        _args = arguments;
      return _regeneratorRuntime().wrap(function _callee$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            for (_len2 = _args.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = _args[_key2];
            }
            _context2.prev = 1;
            if (!(pre && typeof pre === 'function')) {
              _context2.next = 5;
              break;
            }
            _context2.next = 5;
            return pre.call.apply(pre, [this].concat(args));
          case 5:
            _context2.next = 7;
            return fn.call.apply(fn, [this].concat(args));
          case 7:
            result = _context2.sent;
            if (!(post && typeof post === 'function')) {
              _context2.next = 11;
              break;
            }
            _context2.next = 11;
            return post.call.apply(post, [this].concat(args));
          case 11:
            return _context2.abrupt("return", result);
          case 14:
            _context2.prev = 14;
            _context2.t0 = _context2["catch"](1);
            if (!(err && typeof err === 'function')) {
              _context2.next = 19;
              break;
            }
            _context2.next = 19;
            return err.call.apply(err, [this].concat(args));
          case 19:
            throw _context2.t0;
          case 20:
          case "end":
            return _context2.stop();
        }
      }, _callee, this, [[1, 14]]);
    }));
  }

  /**
   * Show the loading spinner
   * @return {void}
   */
  function showSpinner() {
    document.getElementById('load-indicator').style.display = '';
  }

  /**
   * Hide the loading spinner
   * @return {void}
   */
  function hideSpinner() {
    document.getElementById('load-indicator').style.display = 'none';
  }

  /**
   * Create a decorator function that shows and hides a loading spinner before and after the decorated function execution
   * @param {function} fn - The function to be decorated
   * @return {function} - The decorated function
   */
  function spinnerDecorator(fn) {
    return decorator(fn, showSpinner, hideSpinner, hideSpinner);
  }

  /**
   * Show the cursor spinner
   * @return {void}
   */
  function showCursorSpinner() {
    document.body.style.cursor = 'wait';
  }

  /**
   * Hide the cursor spinner
   * @return {void}
   */
  function hideCursorSpinner() {
    document.body.style.cursor = 'default';
  }

  /**
   * Create a decorator function that sets and resets the cursor to a spinner during the decorated function execution
   * @param {function} fn - The function to be decorated
   * @return {function} - The decorated function
   */
  function cursorDecorator(fn) {
    return decorator(fn, showCursorSpinner, hideCursorSpinner, hideCursorSpinner);
  }

  /**
   * Delay execution for a specified amount of time
   * @param {number} ms - The delay time in milliseconds
   * @return {Promise<void>} - A promise that resolves after the delay
   */
  function timeout(_x) {
    return _timeout.apply(this, arguments);
  }
  function _timeout() {
    _timeout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ms) {
      return _regeneratorRuntime().wrap(function _callee2$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", new Promise(function (resolve) {
              return setTimeout(resolve, ms);
            }));
          case 1:
          case "end":
            return _context3.stop();
        }
      }, _callee2);
    }));
    return _timeout.apply(this, arguments);
  }
  _export({
    delegateHandler: delegateHandler,
    clear: clear,
    sanitize: sanitize,
    debounce: debounce,
    delay: delay,
    decorator: decorator,
    spinnerDecorator: spinnerDecorator,
    cursorDecorator: cursorDecorator,
    timeout: timeout
  });
  return {
    setters: [],
    execute: function () {}
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,