"use strict";

System.register(["jquery", "../../common/individual_model.js", "../../common/util.js", "./veda_control_util.js"], function (_export, _context) {
  "use strict";

  var $, IndividualModel, Util, interpolate, ftQuery, defaults;
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  return {
    setters: [function (_jquery) {
      $ = _jquery.default;
    }, function (_commonIndividual_modelJs) {
      IndividualModel = _commonIndividual_modelJs.default;
    }, function (_commonUtilJs) {
      Util = _commonUtilJs.default;
    }, function (_veda_control_utilJs) {
      interpolate = _veda_control_utilJs.interpolate;
      ftQuery = _veda_control_utilJs.ftQuery;
    }],
    execute: function () {
      $.fn.veda_actor = function (options) {
        var _this$attr;
        var opts = _objectSpread(_objectSpread({}, defaults), options);
        var control = $(opts.template);
        var individual = opts.individual;
        var rel_uri = opts.property_uri;
        var spec = opts.spec;
        var placeholder = this.attr('data-placeholder') || (spec && spec.hasValue('v-ui:placeholder') ? spec['v-ui:placeholder'].map(Util.formatValue).join(' ') : new IndividualModel('v-s:StartTypingBundle'));
        var queryPattern = (_this$attr = this.attr('data-query-pattern')) !== null && _this$attr !== void 0 ? _this$attr : spec && spec.hasValue('v-ui:queryPattern') ? spec['v-ui:queryPattern'][0].toString() : undefined;
        var specQueryPrefix = this.attr('data-query-prefix') || (spec && spec.hasValue('v-ui:queryPrefix') ? spec['v-ui:queryPrefix'][0].toString() : undefined);
        var queryPrefix;
        var sort = this.attr('data-sort') || spec && spec.hasValue('v-ui:sort') && spec['v-ui:sort'][0].toString();
        var actorType = this.attr('data-actor-type') || 'v-s:Appointment v-s:Person v-s:Position v-s:Department';
        var complex = this.attr('data-complex') || false;
        var isSingle = this.attr('data-single') || (spec && spec.hasValue('v-ui:maxCardinality') ? spec['v-ui:maxCardinality'][0] === 1 : true);
        var withDeleted = this.attr('data-deleted') || false;
        var withDelegation = this.attr('data-delegated') || false;
        var chosenActorType;
        var fullName;
        var onlyDeleted;
        var tabindex = this.attr('tabindex');
        if (tabindex) {
          this.removeAttr('tabindex');
          control.find('textarea').attr('tabindex', tabindex);
        }

        // Fulltext search feature
        var fulltext = $('.fulltext', control);
        var fulltextMenu = $('.fulltext-menu', control);

        // Disable closing actor type dropdown on click
        $('.dropdown-menu', control).click(function (e) {
          e.stopPropagation();
        });

        // Close actor type dropdown on input click
        fulltext.click(function () {
          $('.dropdown-toggle', control).attr('aria-expanded', false).parent().removeClass('open');
        });

        // Filter allowed actor types, set label & handler
        $('[name=\'actor-type\']', control).filter(function (i, el) {
          if (actorType.indexOf(el.value) < 0) {
            $(el).closest('.radio').remove();
            return false;
          } else {
            $(el).parent().append(new IndividualModel(el.value).toString());
            return true;
          }
        }).change(function (e) {
          $('.tree', control).hide();
          if ($(e.target).is(':checked')) {
            chosenActorType = e.target.value;
            if (chosenActorType === 'v-s:Appointment' || chosenActorType === 'v-s:Person' || chosenActorType === 'v-s:Position') {
              $('[name=\'full-name\']', control).parent().parent().show();
              queryPrefix = '\'rdf:type\' === \'v-s:Appointment\'';
            } else if (chosenActorType === 'v-s:Department') {
              $('[name=\'full-name\']', control).parent().parent().hide();
              queryPrefix = '\'rdf:type\' === \'v-s:Appointment\' || \'rdf:type\' === \'v-s:Department\'';
              $('.tree', control).show();
            }
            queryPrefix = specQueryPrefix || queryPrefix;
            // test feature
            if (withDelegation && specQueryPrefix) {
              queryPrefix += " || ('rdf:type'=='v-s:Appointment' && 'v-s:hasDelegationPurpose'=='d:delegate_Role' && 'v-s:employee.v-s:hasAccount.isExists'=='true')";
            }
            var ftValue = $('.fulltext', control).val();
            if (ftValue) {
              performSearch(ftValue);
            }
          }
        }).first().prop('checked', 'checked').change();

        // Full name check label & handler
        $('[name=\'full-name\']', control).each(function (i, el) {
          var label = new IndividualModel(el.value);
          var self = el;
          label.load().then(function () {
            $(self).parent().append(new IndividualModel(self.value).toString());
          });
        }).change(function (e) {
          fullName = $(e.target).is(':checked') ? true : false;
          var ftValue = $('.fulltext', control).val();
          if (ftValue) {
            performSearch(ftValue);
          }
        });
        $('[name=\'only-deleted\']', control).each(function (i, el) {
          var label = new IndividualModel(el.value);
          var self = el;
          label.load().then(function () {
            $(self).parent().append(new IndividualModel(self.value).toString());
          });
        }).change(function (e) {
          onlyDeleted = $(e.target).is(':checked') ? true : false;
          var ftValue = $('.fulltext', control).val();
          if (ftValue) {
            performSearch(ftValue);
          }
        });
        $('.clear', control).on('click keydown', function (e) {
          if (isSingle) {
            if (e.type !== 'click' && e.which !== 13 && e.which !== 32) {
              return;
            }
            e.preventDefault();
            e.stopPropagation();
            individual.clearValue(rel_uri);
            if (complex) {
              individual.clearValue(rel_uri + '.v-s:employee');
              individual.clearValue(rel_uri + '.v-s:occupation');
            }
          }
          fulltextMenu.hide();
          $(document).off('click', clickOutsideMenuHandler);
          $(document).off('keydown', arrowHandler);
          fulltext.val('').focus();
        });

        // Tree feature
        $('.tree', control).on('click keydown', function (e) {
          var treeTmpl = new IndividualModel('v-ui:TreeTemplate');
          var modal = $('#individual-modal-template').html();
          if (e.type !== 'click' && e.which !== 13 && e.which !== 32) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          var $modal = $(modal);
          var cntr = $('.modal-body', $modal);
          $modal.on('hidden.bs.modal', function () {
            $modal.remove();
          });
          $modal.modal();
          $('body').append($modal);
          var extra = {
            target: individual,
            target_rel_uri: rel_uri,
            isSingle: isSingle,
            withDeleted: withDeleted,
            sort: sort
          };
          spec.present(cntr, treeTmpl, undefined, extra);
        });
        if (_instanceof(placeholder, IndividualModel)) {
          placeholder.load().then(function () {
            fulltext.attr({
              'placeholder': placeholder.toString(),
              'name': (individual.hasValue('rdf:type') ? individual['rdf:type'][0].id + '_' + rel_uri : rel_uri).toLowerCase().replace(/[-:]/g, '_')
            });
          });
        } else {
          fulltext.attr({
            'placeholder': placeholder,
            'name': (individual.hasValue('rdf:type') ? individual['rdf:type'][0].id + '_' + rel_uri : rel_uri).toLowerCase().replace(/[-:]/g, '_')
          });
        }
        fulltext.on('input change focus blur', function (e) {
          var value = fulltext.val();
          if (value) {
            var rows = value.split('\n').length;
            fulltext.prop('rows', rows);
          } else {
            fulltext.prop('rows', 1);
          }
        });
        var header = $('.header', control);
        Promise.all([new IndividualModel('v-s:SelectAll').load(), new IndividualModel('v-s:CancelSelection').load(), new IndividualModel('v-s:InvertSelection').load()]).then(function (actions) {
          header.find('.select-all').click(function () {
            suggestions.children(':not(.selected)').click();
          }).text(actions[0].toString());
          header.find('.cancel-selection').click(function () {
            suggestions.children('.selected').click();
          }).text(actions[1].toString());
          header.find('.invert-selection').click(function () {
            suggestions.children().click();
          }).text(actions[2].toString());
          header.find('.close-menu').click(function () {
            setValue(selected);
            fulltextMenu.hide();
            $(document).off('click', clickOutsideMenuHandler);
            $(document).off('keydown', arrowHandler);
          }).text('Ok');
        });
        if (isSingle) {
          header.hide();
        }
        this.on('view edit search', function (e) {
          e.stopPropagation();
          if (e.type === 'search') {
            isSingle = $(e.delegateTarget).data('single') || false;
            if (isSingle) {
              header.hide();
            } else {
              header.show();
            }
          }
        });
        var inputHandler = function () {
          var timeout;
          var minLength = 3;
          var nav_keys = [37, 38, 39, 40, 9, 16]; // Arrows, shift, tab
          return function (e) {
            if (timeout) {
              clearTimeout(timeout);
            }
            if (nav_keys.indexOf(e.which) >= 0) {
              return;
            }
            timeout = setTimeout(function () {
              var value = e.target.value;
              if (value.length >= minLength) {
                performSearch(value);
              } else if (!value.length) {
                if (isSingle) {
                  individual.clearValue(rel_uri);
                }
                suggestions.empty();
                fulltextMenu.hide();
                $(document).off('click', clickOutsideMenuHandler);
                $(document).off('keydown', arrowHandler);
              }
            }, 750);
          };
        }();
        fulltext.on('keydown', inputHandler);

        /**
         * Search actors
         * @param {string} value
         * @return {void}
         */
        function performSearch(value) {
          if (chosenActorType === 'v-s:Appointment' || chosenActorType === 'v-s:Person' || chosenActorType === 'v-s:Position') {
            if (fullName) {
              value = value.trim().split('\n').map(function (line) {
                var fullNameProps = ['v-s:employee.v-s:lastName', 'v-s:employee.v-s:firstName', 'v-s:employee.v-s:middleName'];
                var fullNameInput = line.trim().replace(/\s+/g, ' ').split(' ');
                return fullNameInput.map(function (token, i) {
                  if (i < 3 && token) {
                    return '\'' + fullNameProps[i] + '\'==\'' + token + '*\'';
                  }
                }).filter(Boolean).join(' && ');
              }).join('\n');
            }
          }
          var ftQueryPromise = interpolate(queryPrefix, individual).then(function (prefix) {
            if (onlyDeleted) {
              return ftQuery(prefix + ' && \'v-s:deleted\'==\'true\'', value, sort, withDeleted, queryPattern);
            } else {
              return ftQuery(prefix, value, sort, withDeleted, queryPattern);
            }
          });
          ftQueryPromise.then(renderResults).catch(function (error) {
            console.error('Fulltext query failed');
          });
        }
        var selected = [];

        /**
         * Render found search results
         * @param {Array} results
         * @return {void}
         */
        function renderResults(results) {
          selected = individual.get(rel_uri).concat(individual.get(rel_uri + '.v-s:employee'), individual.get(rel_uri + '.v-s:occupation'), individual.get(rel_uri + '.v-s:parentUnit'));
          if (results.length) {
            var renderedPromises = results.map(function (result) {
              var cont = $('<a href=\'#\' class=\'suggestion\'></a>').attr('resource', result.id);
              if (individual.hasValue(rel_uri, result) || individual.hasValue(rel_uri + '.v-s:employee', result) || individual.hasValue(rel_uri + '.v-s:occupation', result) || individual.hasValue(rel_uri + '.v-s:parentUnit', result)) {
                cont.addClass('selected');
              }
              var tmpl;
              if (chosenActorType === 'v-s:Department' && result.hasValue('rdf:type', 'v-s:Appointment')) {
                tmpl = '<span about=\'@\' rel=\'v-s:parentUnit\' data-template=\'v-ui:LabelTemplate\'></span>';
              } else {
                tmpl = '<span about=\'@\' property=\'rdfs:label\'></span>';
                if (result.hasValue('v-s:parentOrganization') && !result.hasValue('v-s:parentOrganization', 'd:org_RU1121003135')) {
                  tmpl = '<div><span about=\'@\' rel=\'v-s:parentOrganization\' data-template=\'v-ui:LabelTemplate\'></span> | ' + tmpl + '</div>';
                }
              }
              return result.present(cont, tmpl).then(function () {
                return cont;
              });
            });
            Promise.all(renderedPromises).then(function (rendered) {
              rendered = rendered.sort(function (a, b) {
                return a.text() < b.text() ? -1 : 1;
              });
              rendered = rendered.reduce(function (acc, curr) {
                if (!acc.length || acc[acc.length - 1].text() !== curr.text()) {
                  acc.push(curr);
                }
                return acc;
              }, []);
              suggestions.empty().append(rendered);
              $(document).off('click', clickOutsideMenuHandler);
              $(document).off('keydown', arrowHandler);
              fulltextMenu.show();
              $(document).on('click', clickOutsideMenuHandler);
              $(document).on('keydown', arrowHandler);
            }).catch(function (error) {
              console.error('Render results failed');
            });
          } else {
            suggestions.empty();
            fulltextMenu.hide();
            $(document).off('click', clickOutsideMenuHandler);
            $(document).off('keydown', arrowHandler);
          }
        }
        var suggestions = $('.suggestions', control);
        var dblTimeout;
        suggestions.on('click', '.suggestion', function (e) {
          e.preventDefault();
          e.stopPropagation();
          if (!e.originalEvent) {
            clickHandler(e);
          } else if (dblTimeout) {
            dblclickHandler(e);
          } else {
            clickHandler(e);
          }
        }).on('keydown', '.suggestion', function (e) {
          if (e.which === 32) {
            e.preventDefault();
            e.stopPropagation();
            clickHandler(e);
          } else if (e.which === 13) {
            e.preventDefault();
            e.stopPropagation();
            dblclickHandler(e);
          }
        }).on('dblclick', '.suggestion', function (e) {
          e.preventDefault();
        });

        /**
         * Click event handler
         * @param {Event} e
         * @return {void}
         */
        function clickHandler(e) {
          e.preventDefault();
          var tmpl = $(e.currentTarget);
          var suggestion_uri = tmpl.attr('resource');
          if (!suggestion_uri) {
            return;
          }
          var suggestion = new IndividualModel(suggestion_uri);
          tmpl.toggleClass('selected');
          if (isSingle) {
            tmpl.siblings().removeClass('selected');
          }
          if (selected.indexOf(suggestion) >= 0) {
            if (isSingle) {
              selected = [suggestion];
              setValue(selected);
              fulltextMenu.hide();
              $(document).off('click', clickOutsideMenuHandler);
              $(document).off('keydown', arrowHandler);
            } else {
              selected = selected.filter(function (value) {
                return value !== suggestion;
              });
            }
          } else {
            if (isSingle) {
              selected = [suggestion];
              setValue(selected);
              fulltextMenu.hide();
              $(document).off('click', clickOutsideMenuHandler);
              $(document).off('keydown', arrowHandler);
            } else {
              selected.push(suggestion);
            }
          }
          dblTimeout = setTimeout(function () {
            dblTimeout = undefined;
          }, 300);
          fulltext.focus();
        }

        /**
         * Double click event handler
         * @param {Event} e
         * @return {void}
         */
        function dblclickHandler(e) {
          e.preventDefault();
          if (!$(e.currentTarget).hasClass('selected')) {
            clickHandler(e);
          }
          dblTimeout = clearTimeout(dblTimeout);
          setValue(selected);
          fulltextMenu.hide();
          $(document).off('click', clickOutsideMenuHandler);
          $(document).off('keydown', arrowHandler);
          fulltext.focus();
        }

        /**
         * Click outside menu handler
         * @param {Event} e
         * @return {void}
         */
        function clickOutsideMenuHandler(e) {
          if (!$(e.target).closest(fulltextMenu).length && e.target !== fulltext[0]) {
            if (fulltextMenu.is(':visible')) {
              if (selected.length) {
                setValue(selected);
              }
              fulltextMenu.hide();
              $(document).off('click', clickOutsideMenuHandler);
              $(document).off('keydown', arrowHandler);
            }
          }
        }

        /**
         * Arrow press handler
         * @param {Event} e
         * @return {void}
         */
        function arrowHandler(e) {
          if (e.which === 40) {
            // Down
            e.preventDefault();
            e.stopPropagation();
            var active = suggestions.find('.active').removeClass('active');
            var next = active.next();
            if (next.length) {
              next.addClass('active').focus();
            } else {
              suggestions.children().first().addClass('active').focus();
            }
          } else if (e.which === 38) {
            // Up
            e.preventDefault();
            e.stopPropagation();
            var _active = suggestions.find('.active').removeClass('active');
            var prev = _active.prev();
            if (prev.length) {
              prev.addClass('active').focus();
            } else {
              suggestions.children().last().addClass('active').focus();
            }
          } else if (e.which === 32 && fulltextMenu.find(':focus').length) {
            // Space
            e.preventDefault(); // Prevent scrolling on space
          }
        }

        /**
         * Set property values to individual
         * @param {Array} values
         * @return {void}
         */
        function setValue(_x) {
          return _setValue.apply(this, arguments);
        }
        /**
         * Individual property modified event handler
         * @param {Array} values
         * @return {void}
         */
        function _setValue() {
          _setValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(values) {
            return _regeneratorRuntime().wrap(function _callee$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (!complex) {
                    _context2.next = 12;
                    break;
                  }
                  _context2.next = 3;
                  return individual.clearValue(rel_uri);
                case 3:
                  _context2.next = 5;
                  return individual.clearValue(rel_uri + '.v-s:employee');
                case 5:
                  _context2.next = 7;
                  return individual.clearValue(rel_uri + '.v-s:occupation');
                case 7:
                  _context2.next = 9;
                  return individual.clearValue(rel_uri + '.v-s:parentUnit');
                case 9:
                  if (chosenActorType === 'v-s:Appointment') {
                    individual.set(rel_uri, values);
                  } else if (chosenActorType === 'v-s:Person') {
                    Promise.all(values.map(function (value) {
                      if (value.hasValue('rdf:type', 'v-s:Appointment')) {
                        return value['v-s:employee'][0].load();
                      } else if (value.hasValue('rdf:type', 'v-s:Person')) {
                        return value;
                      }
                    })).then(function (persons) {
                      individual.set(rel_uri + '.v-s:employee', persons);
                    });
                  } else if (chosenActorType === 'v-s:Position') {
                    Promise.all(values.map(function (value) {
                      if (value.hasValue('rdf:type', 'v-s:Appointment')) {
                        return value['v-s:occupation'][0].load();
                      } else if (value.hasValue('rdf:type', 'v-s:Position')) {
                        return value;
                      }
                    })).then(function (positions) {
                      individual.set(rel_uri + '.v-s:occupation', positions);
                    });
                  } else if (chosenActorType === 'v-s:Department') {
                    Promise.all(values.map(function (value) {
                      if (value.hasValue('rdf:type', 'v-s:Appointment')) {
                        return value['v-s:parentUnit'][0].load();
                      } else if (value.hasValue('rdf:type', 'v-s:Department')) {
                        return value;
                      }
                    })).then(function (departments) {
                      individual.set(rel_uri + '.v-s:parentUnit', departments);
                    });
                  }
                  _context2.next = 15;
                  break;
                case 12:
                  _context2.next = 14;
                  return individual.clearValue(rel_uri);
                case 14:
                  if (chosenActorType === 'v-s:Appointment') {
                    individual.set(rel_uri, values);
                  } else if (chosenActorType === 'v-s:Person') {
                    Promise.all(values.map(function (value) {
                      if (value.hasValue('rdf:type', 'v-s:Appointment')) {
                        return value['v-s:employee'][0].load();
                      } else if (value.hasValue('rdf:type', 'v-s:Person')) {
                        return value;
                      }
                    })).then(function (persons) {
                      individual.set(rel_uri, persons);
                    });
                  } else if (chosenActorType === 'v-s:Position') {
                    Promise.all(values.map(function (value) {
                      if (value.hasValue('rdf:type', 'v-s:Appointment')) {
                        return value['v-s:occupation'][0].load();
                      } else if (value.hasValue('rdf:type', 'v-s:Position')) {
                        return value;
                      }
                    })).then(function (positions) {
                      individual.set(rel_uri, positions);
                    });
                  } else if (chosenActorType === 'v-s:Department') {
                    Promise.all(values.map(function (value) {
                      if (value.hasValue('rdf:type', 'v-s:Appointment')) {
                        return value['v-s:parentUnit'][0].load();
                      } else if (value.hasValue('rdf:type', 'v-s:Department')) {
                        return value;
                      }
                    })).then(function (departments) {
                      individual.set(rel_uri, departments);
                    });
                  }
                case 15:
                case "end":
                  return _context2.stop();
              }
            }, _callee);
          }));
          return _setValue.apply(this, arguments);
        }
        function propertyModifiedHandler(values) {
          if (isSingle && (individual.hasValue(rel_uri) || individual.hasValue(rel_uri + '.v-s:employee') || individual.hasValue(rel_uri + '.v-s:occupation') || individual.hasValue(rel_uri + '.v-s:parentUnit'))) {
            var value = individual.get(rel_uri).concat(individual.get(rel_uri + '.v-s:employee'), individual.get(rel_uri + '.v-s:occupation'), individual.get(rel_uri + '.v-s:parentUnit')).filter(Boolean)[0];
            value.load().then(function () {
              var newValueStr = value.toString();
              var oldValueStr = fulltext.val();
              if (newValueStr != oldValueStr) {
                fulltext.val(newValueStr);
              }
            });
          } else {
            fulltext.val('');
          }
        }
        individual.on([rel_uri, rel_uri + '.v-s:employee', rel_uri + '.v-s:occupation', rel_uri + '.v-s:parentUnit'].join(' '), propertyModifiedHandler);
        this.one('remove', function () {
          [rel_uri, rel_uri + '.v-s:employee', rel_uri + '.v-s:occupation', rel_uri + '.v-s:parentUnit'].forEach(function (prop) {
            return individual.off(prop, propertyModifiedHandler);
          });
        });
        propertyModifiedHandler();
        this.on('view edit search', function (e) {
          e.stopPropagation();
        });
        this.append(control);
        return this;
      };
      defaults = {
        template: "\n<div class=\"link-control\">\n  <div class=\"input-group\">\n    <div class=\"input-group-addon btn btn-default dropdown\" style=\"padding:0;\" tabindex=\"0\">\n      <span data-toggle=\"dropdown\" id=\"actor-type-menu\" aria-haspopup=\"true\" aria-expanded=\"true\" style=\"padding:10px;\">\n        <i class=\"glyphicon glyphicon-search\"></i><i class=\"caret\"></i>\n      </span>\n      <div class=\"dropdown-menu actor-type-menu padding-lg-h\" aria-labelledby=\"actor-type-menu\">\n        <div class=\"radio\">\n          <label>\n            <input type=\"radio\" name=\"actor-type\" value=\"v-s:Appointment\"/>\n          </label>\n        </div>\n        <div class=\"radio\">\n          <label>\n            <input type=\"radio\" name=\"actor-type\" value=\"v-s:Person\"/>\n          </label>\n        </div>\n        <div class=\"radio\">\n          <label>\n            <input type=\"radio\" name=\"actor-type\" value=\"v-s:Position\"/>\n          </label>\n        </div>\n        <div class=\"radio\">\n          <label>\n            <input type=\"radio\" name=\"actor-type\" value=\"v-s:Department\"/>\n          </label>\n        </div>\n        <hr class=\"margin-sm\">\n        <div class=\"checkbox\">\n          <label>\n            <input type=\"checkbox\" name=\"only-deleted\" value=\"v-s:OnlyDeleted\"/>\n          </label>\n        </div>\n        <div class=\"checkbox\">\n          <label>\n            <input type=\"checkbox\" name=\"full-name\" value=\"v-s:FullNameBundle\"/>\n          </label>\n        </div>\n      </div>\n    </div>\n    <div class=\"input-group-addon btn btn-default tree\" tabindex=\"0\">\n      <i class=\"fa fa-sitemap\"></i>\n    </div>\n    <textarea class=\"form-control fulltext\" autocomplete=\"off\" rows=\"1\"></textarea>\n    <div class=\"input-group-addon btn btn-default clear\" tabindex=\"0\">\n      <span>&#10005;</span>\n    </div>\n  </div>\n  <div class=\"fulltext-menu\">\n    <div class=\"header clearfix\">\n      <small class=\"link-actions pull-left\">\n        <span class=\"select-all\"></span>\n        <span class=\"cancel-selection\"></span>\n        <span class=\"invert-selection\"></span>\n      </small>\n      <small class=\"link-actions pull-right\">\n        <span class=\"close-menu\"></span>\n      </small>\n    </div>\n    <div class=\"suggestions\"></div>\n  </div>\n</div>\n  "
      };
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,