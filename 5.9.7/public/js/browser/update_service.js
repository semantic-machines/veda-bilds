"use strict";

System.register(["../common/veda.js", "../common/lib/riot.js", "../common/backend.js"], function (_export, _context) {
  "use strict";

  var veda, riot, Backend, UpdateService;
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function () {}; return { s: F, n: function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (e) { throw e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function () { it = it.call(o); }, n: function () { var step = it.next(); normalCompletion = step.done; return step; }, e: function (e) { didErr = true; err = e; }, f: function () { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  return {
    setters: [function (_commonVedaJs) {
      veda = _commonVedaJs.default;
    }, function (_commonLibRiotJs) {
      riot = _commonLibRiotJs.default;
    }, function (_commonBackendJs) {
      Backend = _commonBackendJs.default;
    }],
    execute: function () {
      /** Class representing the UpdateService. */
      _export("default", UpdateService = /*#__PURE__*/function () {
        /**
         * Creates a new instance of UpdateService.
         * @constructor
         * @param {string} address - WebSocket address.
         * @return {UpdateService} - Update service instance.
         */
        function UpdateService(address) {
          var _this = this;
          _classCallCheck(this, UpdateService);
          if (UpdateService.prototype._singletonInstance) {
            return UpdateService.prototype._singletonInstance;
          }
          riot.observable(this);
          this.subscriptions = new Map();
          this.registry = new FinalizationRegistry(function (id) {
            _this.unsubscribe(id);
          });
          this.onLine = false;
          UpdateService.prototype._singletonInstance = this;
        }

        /**
         * Starts the update service.
         * @async
         * @return {Promise<UpdateService>} - A promise that resolves to the update service instance.
         */
        _createClass(UpdateService, [{
          key: "start",
          value: function () {
            var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var self, reconnectDelayInitial, reconnectDelayFactor, reconnectDelayLimit, pingTimeout, buffer, socketDelay, socketTimeout, reconnectDelay, lastPing, pingInterval, addressCfg, socket, sendMessage, receiveMessage, openedHandler, messageHandler, errorHandler, closedHandler;
              return _regeneratorRuntime().wrap(function _callee$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    closedHandler = function _closedHandler(event) {
                      console.log('client: websocket closed', event.target.url);
                      self.socket = null;
                      self.onLine = false;
                      self.started = false;
                      self.trigger('offline');
                      clearInterval(pingInterval);
                      if (!self.stopped) {
                        reconnectDelay = reconnectDelay < reconnectDelayLimit ? reconnectDelay * reconnectDelayFactor : reconnectDelayLimit;
                        console.log('client: re-connect in', reconnectDelay / 1000, 'sec');
                        setTimeout(self.start.bind(self), reconnectDelay);
                      }
                    };
                    errorHandler = function _errorHandler(event) {
                      console.error('CCUS failed', event);
                      this.close();
                    };
                    messageHandler = function _messageHandler(event) {
                      var msg = event.data;
                      this.receiveMessage(msg);
                    };
                    openedHandler = function _openedHandler(event) {
                      var _this2 = this;
                      reconnectDelay = reconnectDelayInitial;
                      console.log('client: websocket opened', event.target.url);
                      this.sendMessage('ccus=' + veda.ticket);
                      self.restore();
                      self.onLine = true;
                      self.trigger('online');
                      pingInterval = setInterval(function () {
                        if (Date.now() - lastPing > 2 * pingTimeout) {
                          console.log('client: ping missed, close socket');
                          self.onLine = false;
                          self.trigger('offline');
                          clearInterval(pingInterval);
                          _this2.close();
                        }
                      }, pingTimeout);
                    };
                    receiveMessage = function _receiveMessage(msg) {
                      if (msg === '') {
                        lastPing = Date.now();
                        return;
                      }
                      var ids = msg.indexOf('=') === 0 ? msg.substr(1) : msg;
                      if (ids.length === 0) {
                        return;
                      }
                      ids = ids.split(',');
                      var _iterator = _createForOfIteratorHelper(ids),
                        _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done;) {
                          var pairStr = _step.value;
                          try {
                            var pair = pairStr.split('=');
                            var _pair = _slicedToArray(pair, 2),
                              id = _pair[0],
                              updateCounter = _pair[1];
                            if (!id) continue;
                            var subscription = self.subscriptions.get(id);
                            if (!subscription) {
                              self.unsubscribe(id);
                            } else {
                              var _subscription$slice = subscription.slice(-1),
                                _subscription$slice2 = _slicedToArray(_subscription$slice, 1),
                                callback = _subscription$slice2[0];
                              callback(id, Number(updateCounter));
                            }
                          } catch (error) {
                            console.error('Individual update service failed');
                          }
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                    };
                    sendMessage = function _sendMessage(msg) {
                      var socket = this;
                      if (msg === '=' || msg === '-*' || msg.indexOf('ccus') === 0) {
                        if (socket.readyState === 1) {
                          socket.send(msg);
                        }
                        return;
                      }
                      buffer.push(msg);
                      if (!socketTimeout) {
                        socketTimeout = setTimeout(function () {
                          if (socket.readyState === 1) {
                            while (buffer.length) {
                              var message = buffer.splice(0, 100).join(',');
                              socket.send(message);
                            }
                          }
                          socketTimeout = undefined;
                        }, socketDelay);
                      }
                    };
                    if (!this.started) {
                      _context2.next = 8;
                      break;
                    }
                    return _context2.abrupt("return", Promise.resolve(this));
                  case 8:
                    this.started = true;
                    this.stopped = false;
                    self = this;
                    reconnectDelayInitial = 10000 + Math.floor(Math.random() * 50000); // 10 - 60 sec
                    reconnectDelayFactor = 1.25;
                    reconnectDelayLimit = 5 * 60 * 1000; // 5 min
                    pingTimeout = 10000;
                    buffer = [];
                    socketDelay = 1000;
                    reconnectDelay = reconnectDelayInitial;
                    lastPing = Date.now();
                    _context2.prev = 19;
                    _context2.next = 22;
                    return Backend.get_individual('', 'cfg:ClientUpdateServiceAddress', false);
                  case 22:
                    addressCfg = _context2.sent;
                    this.address = addressCfg['rdf:value'] && addressCfg['rdf:value'][0].data;
                    this.url = new URL(this.address);
                    _context2.next = 31;
                    break;
                  case 27:
                    _context2.prev = 27;
                    _context2.t0 = _context2["catch"](19);
                    console.log("CCUS address error, address = ".concat(this.address, ", url = ").concat(this.url), _context2.t0);
                    this.url = new URL("".concat(location.protocol === 'https:' ? 'wss:' : 'ws:', "//").concat(location.host).concat(this.address));
                  case 31:
                    try {
                      socket = new WebSocket(this.url);
                      socket.onopen = openedHandler;
                      socket.onclose = closedHandler;
                      socket.onerror = errorHandler;
                      socket.onmessage = messageHandler;
                      socket.receiveMessage = receiveMessage;
                      socket.sendMessage = sendMessage;
                      this.socket = socket;
                    } catch (error) {
                      this.started = false;
                      reconnectDelay = reconnectDelay < reconnectDelayLimit ? reconnectDelay * reconnectDelayFactor : reconnectDelayLimit;
                      console.error('Init socket failed, retry in', reconnectDelay / 1000, 'sec');
                      setTimeout(this.start.bind(this), reconnectDelay);
                    }

                    /**
                     * Send a message via socket
                     * @param {string} msg - message to send
                     * @this UpdateService
                     * @return {void}
                     */
                  case 32:
                  case "end":
                    return _context2.stop();
                }
              }, _callee, this, [[19, 27]]);
            }));
            function start() {
              return _start.apply(this, arguments);
            }
            return start;
          }()
          /**
           * Stops the update service.
           */
        }, {
          key: "stop",
          value: function stop() {
            this.stopped = true;
            this.socket.close();
          }

          /**
           * Subscribes to changes of an individual.
           * @param {any} ref - Reference to the individual.
           * @param {Array<any>} subscription - Subscription information [id, updateCounter].
           */
        }, {
          key: "subscribe",
          value: function subscribe(ref, subscription) {
            var _subscription = _slicedToArray(subscription, 2),
              id = _subscription[0],
              updateCounter = _subscription[1];
            if (this.subscriptions.has(id)) return;
            this.subscriptions.set(id, subscription);
            this.registry.register(ref, id);
            if (this.socket) {
              this.socket.sendMessage("+".concat(id, "=").concat(updateCounter || 0));
            }
          }

          /**
           * Unsubscribes from changes of an individual.
           * @param {string} id - ID of the individual to unsubscribe. If not provided, unsubscribes from all individuals.
           */
        }, {
          key: "unsubscribe",
          value: function unsubscribe(id) {
            if (!id) {
              this.subscriptions.clear();
              this.socket.sendMessage('-*');
            } else {
              this.subscriptions.delete(id);
              if (this.socket) {
                this.socket.sendMessage('-' + id);
              }
            }
          }

          /**
           * Restores the subscriptions after socket connection.
           */
        }, {
          key: "restore",
          value: function restore() {
            this.socket.sendMessage('-*');
            if (this.socket) {
              var _iterator2 = _createForOfIteratorHelper(this.subscriptions.values()),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var _step2$value = _slicedToArray(_step2.value, 2),
                    id = _step2$value[0],
                    updateCounter = _step2$value[1];
                  this.socket.sendMessage("+".concat(id, "=").concat(updateCounter || 0));
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
          }
        }]);
        return UpdateService;
      }());
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,