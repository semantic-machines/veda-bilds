"use strict";

System.register(["../common/veda.js", "../browser/util.js", "../browser/dom_helpers.js", "../common/individual_model.js", "../common/backend.js", "../browser/update_service.js"], function (_export, _context) {
  "use strict";

  var veda, Util, timeout, IndividualModel, Backend, UpdateService, updateService;
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function () {}; return { s: F, n: function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (e) { throw e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function () { it = it.call(o); }, n: function () { var step = it.next(); normalCompletion = step.done; return step; }, e: function (e) { didErr = true; err = e; }, f: function () { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  /**
   * Check received notification
   * @this {IndividualModel}
   * @return {void}
   */
  function checkNotification() {
    return _checkNotification.apply(this, arguments);
  }
  function _checkNotification() {
    _checkNotification = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var _clientNotification$r, _clientNotification$r2, _serverNotification$r, _serverNotification$r2;
      var serverNotification, userGroups, clientNotification, clientNews, serverNews, _iterator, _step, newsId, news, audience, _iterator2, _step2, group, _clientNotification$r3, _clientNotification$r4, confirmed;
      return _regeneratorRuntime().wrap(function _callee$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return timeout(Math.round(Math.random() * 60 * 1000));
          case 2:
            _context2.next = 4;
            return Backend.get_individual(veda.ticket, 'cfg:ClientNotification', false);
          case 4:
            serverNotification = _context2.sent;
            _context2.next = 7;
            return veda.user.memberOf();
          case 7:
            userGroups = _context2.sent;
            clientNotification = localStorage.notification;
            if (!clientNotification) {
              clientNotification = _objectSpread({}, serverNotification);
              clientNotification['rdf:value'] = [];
            } else {
              clientNotification = JSON.parse(clientNotification);
            }
            clientNews = (_clientNotification$r = (_clientNotification$r2 = clientNotification['rdf:value']) === null || _clientNotification$r2 === void 0 ? void 0 : _clientNotification$r2.map(function (value) {
              return value.data;
            })) !== null && _clientNotification$r !== void 0 ? _clientNotification$r : [];
            serverNews = (_serverNotification$r = (_serverNotification$r2 = serverNotification['rdf:value']) === null || _serverNotification$r2 === void 0 ? void 0 : _serverNotification$r2.map(function (value) {
              return value.data;
            })) !== null && _serverNotification$r !== void 0 ? _serverNotification$r : [];
            _iterator = _createForOfIteratorHelper(serverNews);
            _context2.prev = 13;
            _iterator.s();
          case 15:
            if ((_step = _iterator.n()).done) {
              _context2.next = 49;
              break;
            }
            newsId = _step.value;
            if (!(clientNews.indexOf(newsId) >= 0)) {
              _context2.next = 19;
              break;
            }
            return _context2.abrupt("continue", 47);
          case 19:
            news = new IndividualModel(newsId);
            _context2.next = 22;
            return news.load();
          case 22:
            audience = news.hasValue('v-s:newsAudience') ? news['v-s:newsAudience'] : [new IndividualModel('cfg:AllUsersGroup')];
            _iterator2 = _createForOfIteratorHelper(audience);
            _context2.prev = 24;
            _iterator2.s();
          case 26:
            if ((_step2 = _iterator2.n()).done) {
              _context2.next = 39;
              break;
            }
            group = _step2.value;
            if (!(userGroups.indexOf(group.id) >= 0)) {
              _context2.next = 37;
              break;
            }
            _context2.next = 31;
            return Util.confirm(news);
          case 31:
            confirmed = _context2.sent;
            if (confirmed) {
              _context2.next = 34;
              break;
            }
            return _context2.abrupt("return");
          case 34:
            clientNotification['rdf:value'] = (_clientNotification$r3 = (_clientNotification$r4 = clientNotification['rdf:value']) === null || _clientNotification$r4 === void 0 ? void 0 : _clientNotification$r4.concat({
              data: news.id,
              type: 'Uri'
            })) !== null && _clientNotification$r3 !== void 0 ? _clientNotification$r3 : [{
              data: news.id,
              type: 'Uri'
            }];
            localStorage.notification = JSON.stringify(clientNotification);
            if (news.hasValue('v-s:script')) {
              eval(news['v-s:script'][0].toString());
            }
          case 37:
            _context2.next = 26;
            break;
          case 39:
            _context2.next = 44;
            break;
          case 41:
            _context2.prev = 41;
            _context2.t0 = _context2["catch"](24);
            _iterator2.e(_context2.t0);
          case 44:
            _context2.prev = 44;
            _iterator2.f();
            return _context2.finish(44);
          case 47:
            _context2.next = 15;
            break;
          case 49:
            _context2.next = 54;
            break;
          case 51:
            _context2.prev = 51;
            _context2.t1 = _context2["catch"](13);
            _iterator.e(_context2.t1);
          case 54:
            _context2.prev = 54;
            _iterator.f();
            return _context2.finish(54);
          case 57:
            localStorage.notification = JSON.stringify(serverNotification);
          case 58:
          case "end":
            return _context2.stop();
        }
      }, _callee, null, [[13, 51, 54, 57], [24, 41, 44, 47]]);
    }));
    return _checkNotification.apply(this, arguments);
  }
  return {
    setters: [function (_commonVedaJs) {
      veda = _commonVedaJs.default;
    }, function (_browserUtilJs) {
      Util = _browserUtilJs.default;
    }, function (_browserDom_helpersJs) {
      timeout = _browserDom_helpersJs.timeout;
    }, function (_commonIndividual_modelJs) {
      IndividualModel = _commonIndividual_modelJs.default;
    }, function (_commonBackendJs) {
      Backend = _commonBackendJs.default;
    }, function (_browserUpdate_serviceJs) {
      UpdateService = _browserUpdate_serviceJs.default;
    }],
    execute: function () {
      updateService = new UpdateService();
      veda.one('started', function () {
        updateService.subscribe(document, ['cfg:ClientNotification', 0, checkNotification]);
      });
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZXhwb3J0cyIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImRlc2MiLCJ2YWx1ZSIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsImZuIiwiYXJnIiwidHlwZSIsImNhbGwiLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwibWV0aG9kIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWNvcmQiLCJyZXN1bHQiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJzdGF0ZSIsIkVycm9yIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJkb25lIiwibWV0aG9kTmFtZSIsInVuZGVmaW5lZCIsInJldHVybiIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsInZhbCIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJjYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIm8iLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiQXJyYXkiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiRiIsInMiLCJuIiwiZSIsImYiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwic3RlcCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwidG9TdHJpbmciLCJmcm9tIiwidGVzdCIsImFyciIsImxlbiIsImFycjIiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwic291cmNlIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfdG9Qcm9wZXJ0eUtleSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsIl90eXBlb2YiLCJwcmltIiwidG9QcmltaXRpdmUiLCJyZXMiLCJOdW1iZXIiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJncyIsImNoZWNrTm90aWZpY2F0aW9uIiwiX2NoZWNrTm90aWZpY2F0aW9uIiwiX2NhbGxlZSIsIl9jbGllbnROb3RpZmljYXRpb24kciIsIl9jbGllbnROb3RpZmljYXRpb24kcjIiLCJfc2VydmVyTm90aWZpY2F0aW9uJHIiLCJfc2VydmVyTm90aWZpY2F0aW9uJHIyIiwic2VydmVyTm90aWZpY2F0aW9uIiwidXNlckdyb3VwcyIsImNsaWVudE5vdGlmaWNhdGlvbiIsImNsaWVudE5ld3MiLCJzZXJ2ZXJOZXdzIiwiX2l0ZXJhdG9yIiwiX3N0ZXAiLCJuZXdzSWQiLCJuZXdzIiwiYXVkaWVuY2UiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwiZ3JvdXAiLCJfY2xpZW50Tm90aWZpY2F0aW9uJHIzIiwiX2NsaWVudE5vdGlmaWNhdGlvbiRyNCIsImNvbmZpcm1lZCIsIl9jYWxsZWUkIiwiX2NvbnRleHQyIiwidGltZW91dCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsIkJhY2tlbmQiLCJnZXRfaW5kaXZpZHVhbCIsInZlZGEiLCJ0aWNrZXQiLCJ1c2VyIiwibWVtYmVyT2YiLCJsb2NhbFN0b3JhZ2UiLCJub3RpZmljYXRpb24iLCJKU09OIiwicGFyc2UiLCJtYXAiLCJkYXRhIiwiaW5kZXhPZiIsIkluZGl2aWR1YWxNb2RlbCIsImxvYWQiLCJoYXNWYWx1ZSIsImlkIiwiVXRpbCIsImNvbmZpcm0iLCJjb25jYXQiLCJzdHJpbmdpZnkiLCJldmFsIiwidDAiLCJ0MSIsInNldHRlcnMiLCJfY29tbW9uVmVkYUpzIiwiZGVmYXVsdCIsIl9icm93c2VyVXRpbEpzIiwiX2Jyb3dzZXJEb21faGVscGVyc0pzIiwiX2NvbW1vbkluZGl2aWR1YWxfbW9kZWxKcyIsIl9jb21tb25CYWNrZW5kSnMiLCJfYnJvd3NlclVwZGF0ZV9zZXJ2aWNlSnMiLCJVcGRhdGVTZXJ2aWNlIiwiZXhlY3V0ZSIsInVwZGF0ZVNlcnZpY2UiLCJvbmUiLCJzdWJzY3JpYmUiLCJkb2N1bWVudCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS13ZWIvanMvYnJvd3Nlci9ub3RpZmljYXRpb25fbGlzdGVuZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGlzdGVuIHRvIGNsaWVudCBub3RpZmljYXRpb25zXG5cbmltcG9ydCB2ZWRhIGZyb20gJy4uL2NvbW1vbi92ZWRhLmpzJztcbmltcG9ydCBVdGlsIGZyb20gJy4uL2Jyb3dzZXIvdXRpbC5qcyc7XG5pbXBvcnQge3RpbWVvdXR9IGZyb20gJy4uL2Jyb3dzZXIvZG9tX2hlbHBlcnMuanMnO1xuaW1wb3J0IEluZGl2aWR1YWxNb2RlbCBmcm9tICcuLi9jb21tb24vaW5kaXZpZHVhbF9tb2RlbC5qcyc7XG5pbXBvcnQgQmFja2VuZCBmcm9tICcuLi9jb21tb24vYmFja2VuZC5qcyc7XG5pbXBvcnQgVXBkYXRlU2VydmljZSBmcm9tICcuLi9icm93c2VyL3VwZGF0ZV9zZXJ2aWNlLmpzJztcblxuY29uc3QgdXBkYXRlU2VydmljZSA9IG5ldyBVcGRhdGVTZXJ2aWNlKCk7XG5cbnZlZGEub25lKCdzdGFydGVkJywgKCkgPT4ge1xuICB1cGRhdGVTZXJ2aWNlLnN1YnNjcmliZShkb2N1bWVudCwgWydjZmc6Q2xpZW50Tm90aWZpY2F0aW9uJywgMCwgY2hlY2tOb3RpZmljYXRpb25dKTtcbn0pO1xuXG4vKipcbiAqIENoZWNrIHJlY2VpdmVkIG5vdGlmaWNhdGlvblxuICogQHRoaXMge0luZGl2aWR1YWxNb2RlbH1cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrTm90aWZpY2F0aW9uICgpIHtcbiAgYXdhaXQgdGltZW91dChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA2MCAqIDEwMDApKTtcbiAgY29uc3Qgc2VydmVyTm90aWZpY2F0aW9uID0gYXdhaXQgQmFja2VuZC5nZXRfaW5kaXZpZHVhbCh2ZWRhLnRpY2tldCwgJ2NmZzpDbGllbnROb3RpZmljYXRpb24nLCBmYWxzZSk7XG4gIGNvbnN0IHVzZXJHcm91cHMgPSBhd2FpdCB2ZWRhLnVzZXIubWVtYmVyT2YoKTtcbiAgbGV0IGNsaWVudE5vdGlmaWNhdGlvbiA9IGxvY2FsU3RvcmFnZS5ub3RpZmljYXRpb247XG4gIGlmICghY2xpZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgY2xpZW50Tm90aWZpY2F0aW9uID0gey4uLnNlcnZlck5vdGlmaWNhdGlvbn07XG4gICAgY2xpZW50Tm90aWZpY2F0aW9uWydyZGY6dmFsdWUnXSA9IFtdO1xuICB9IGVsc2Uge1xuICAgIGNsaWVudE5vdGlmaWNhdGlvbiA9IEpTT04ucGFyc2UoY2xpZW50Tm90aWZpY2F0aW9uKTtcbiAgfVxuICBjb25zdCBjbGllbnROZXdzID0gY2xpZW50Tm90aWZpY2F0aW9uWydyZGY6dmFsdWUnXT8ubWFwKCh2YWx1ZSkgPT4gdmFsdWUuZGF0YSkgPz8gW107XG4gIGNvbnN0IHNlcnZlck5ld3MgPSBzZXJ2ZXJOb3RpZmljYXRpb25bJ3JkZjp2YWx1ZSddPy5tYXAoKHZhbHVlKSA9PiB2YWx1ZS5kYXRhKSA/PyBbXTtcbiAgZm9yIChjb25zdCBuZXdzSWQgb2Ygc2VydmVyTmV3cykge1xuICAgIGlmIChjbGllbnROZXdzLmluZGV4T2YobmV3c0lkKSA+PSAwKSBjb250aW51ZTtcbiAgICBjb25zdCBuZXdzID0gbmV3IEluZGl2aWR1YWxNb2RlbChuZXdzSWQpO1xuICAgIGF3YWl0IG5ld3MubG9hZCgpO1xuICAgIGNvbnN0IGF1ZGllbmNlID0gbmV3cy5oYXNWYWx1ZSgndi1zOm5ld3NBdWRpZW5jZScpID8gbmV3c1sndi1zOm5ld3NBdWRpZW5jZSddIDogW25ldyBJbmRpdmlkdWFsTW9kZWwoJ2NmZzpBbGxVc2Vyc0dyb3VwJyldO1xuICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgYXVkaWVuY2UpIHtcbiAgICAgIGlmICh1c2VyR3JvdXBzLmluZGV4T2YoZ3JvdXAuaWQpID49IDApIHtcbiAgICAgICAgY29uc3QgY29uZmlybWVkID0gYXdhaXQgVXRpbC5jb25maXJtKG5ld3MpO1xuICAgICAgICBpZiAoIWNvbmZpcm1lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjbGllbnROb3RpZmljYXRpb25bJ3JkZjp2YWx1ZSddID0gY2xpZW50Tm90aWZpY2F0aW9uWydyZGY6dmFsdWUnXT8uY29uY2F0KHtkYXRhOiBuZXdzLmlkLCB0eXBlOiAnVXJpJ30pID8/IFt7ZGF0YTogbmV3cy5pZCwgdHlwZTogJ1VyaSd9XTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLm5vdGlmaWNhdGlvbiA9IEpTT04uc3RyaW5naWZ5KGNsaWVudE5vdGlmaWNhdGlvbik7XG4gICAgICAgIGlmIChuZXdzLmhhc1ZhbHVlKCd2LXM6c2NyaXB0JykpIHtcbiAgICAgICAgICBldmFsKG5ld3NbJ3YtczpzY3JpcHQnXVswXS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2NhbFN0b3JhZ2Uubm90aWZpY2F0aW9uID0gSlNPTi5zdHJpbmdpZnkoc2VydmVyTm90aWZpY2F0aW9uKTtc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