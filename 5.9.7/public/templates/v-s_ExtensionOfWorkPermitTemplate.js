"use strict";

System.register(["/js/browser/util.js", "jquery", "/js/common/veda.js", "/js/common/individual_model.js", "riot"], function (_export, _context) {
  "use strict";

  var BrowserUtil, $, veda, IndividualModel, riot, pre, html;
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  return {
    setters: [function (_jsBrowserUtilJs) {
      BrowserUtil = _jsBrowserUtilJs.default;
    }, function (_jquery) {
      $ = _jquery.default;
    }, function (_jsCommonVedaJs) {
      veda = _jsCommonVedaJs.default;
    }, function (_jsCommonIndividual_modelJs) {
      IndividualModel = _jsCommonIndividual_modelJs.default;
    }, function (_riot) {
      riot = _riot.default;
    }],
    execute: function () {
      _export("pre", pre = function pre(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        template.on('validate', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var result, dateState, workPermitForm;
          return _regeneratorRuntime().wrap(function _callee$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                result = {};
                dateState = false;
                if (!(individual.hasValue('v-s:dateToPlan') && individual.hasValue('v-s:dateFromPlan'))) {
                  _context2.next = 11;
                  break;
                }
                if (!(individual['v-s:dateToPlan'][0] <= individual['v-s:dateFromPlan'][0])) {
                  _context2.next = 7;
                  break;
                }
                result['v-s:dateToPlan'] = {
                  state: false,
                  cause: ['mnd-s:DateFromToPlan_Bundle']
                };
                _context2.next = 11;
                break;
              case 7:
                _context2.next = 9;
                return individual.getPropertyChain('v-s:backwardTarget', 'v-s:hasWorkPermitForm');
              case 9:
                workPermitForm = _context2.sent;
                if (workPermitForm.length > 0 && workPermitForm[0].id == 'd:WorkKindInWorkPermit_6' && individual['v-s:dateToPlan'][0] - individual['v-s:dateFromPlan'][0] > 1000 * 60 * 60 * 12) {
                  result['v-s:dateToPlan'] = {
                    state: false,
                    cause: ['v-ui:maxCardinality']
                  };
                } else if (individual['v-s:dateToPlan'][0] - individual['v-s:dateFromPlan'][0] > 1000 * 60 * 60 * 24 * 7) {
                  result['v-s:dateToPlan'] = {
                    state: false,
                    cause: ['v-ui:maxCardinality']
                  };
                }
              case 11:
                /*    if (individual.hasValue('v-s:dateFromPlan')) {
                      //смещение в 5 минут, так как поля со временем
                      const shift = 1000 * 60 * 5;
                      const diff = individual['v-s:dateFromPlan'][0] - new Date();
                      if (diff < -shift && individual.isNew()) {
                        result['v-s:dateFromPlam'] = {
                          state: false,
                          cause: ['v-ui:minCardinality'],
                        };
                      }
                   }
                 */
                template[0].dispatchEvent(new CustomEvent('validated', {
                  detail: result
                }));
              case 12:
              case "end":
                return _context2.stop();
            }
          }, _callee);
        })));

        // права зелёной кнопки
        var _classResults = new IndividualModel('v-s:ResultsOfMeasurementsOfHarmfulFactors');
        _classResults.canCreate().then(function (canCreate) {
          if (!canCreate) {
            $('#add-ResultsOfMeasurementsOfHarmfulFactor', template).remove();
          }
        });
        $('button#add-ResultsOfMeasurementsOfHarmfulFactors', template).click(function () {
          var modal = $('#notification-modal-template').html();
          modal = $(modal);
          modal.modal({
            show: false
          });
          $('body').append(modal);
          modal.modal('show');
          template.one('remove', function () {
            modal.modal('hide').remove();
          });
          var cntr = $('.modal-body', modal);
          var _class = new veda.IndividualModel('v-s:ResultsOfMeasurementsOfHarmfulFactors');
          var IdeaState = new veda.IndividualModel();
          var tmpl = new veda.IndividualModel('v-s:ResultsOfMeasurementsOfHarmfulFactorsTemplate');
          IdeaState['rdf:type'] = [_class];
          IdeaState.present(cntr, tmpl, 'edit');
          IdeaState['v-s:backwardTarget'] = [individual];
          IdeaState['v-s:backwardProperty'] = [new veda.IndividualModel('v-s:hasResultsOfMeasurementsOfHarmfulFactors')];
          IdeaState['v-s:canRead'] = [true];
          IdeaState.one('beforeReset', function () {
            modal.modal('hide').remove();
          });
          IdeaState.one('afterSave', function () {
            modal.modal('hide').remove();
          });
        });
      });
      _export("html", html = "\n  <div>\n    <div class=\"container sheet\">\n      <h2>\n        <span about=\"v-s:hasExtensionOfWorkPermit\" property=\"rdfs:label\"></span><br />\n        <small about=\"@\" property=\"rdfs:label\"></small>\n      </h2>\n      <span about=\"@\" data-template=\"v-ui:RabbitHole\" class=\"view edit -search\"></span>\n      <br />\n      <div class=\"row row-attribute\">\n        <div class=\"col-sm-3 col-xs-5\">\n          <label about=\"v-s:dateFromPlan\" property=\"rdfs:label\"></label>\n        </div>\n        <div class=\"col-sm-3 col-xs-3\">\n            <div about=\"@\" property=\"v-s:dateFromPlan\" class=\"view edit -search\"></div>\n            <veda-control data-type=\"dateTime\" property=\"v-s:dateFromPlan\" class=\"-view -edit search\"></veda-control>\n        </div>\n      </div>\n      <div class=\"row row-attribute\">\n        <div class=\"col-sm-3 col-xs-5\">\n          <label about=\"v-s:dateToPlan\" property=\"rdfs:label\"></label>\n        </div>\n        <div class=\"col-sm-3 col-xs-3\">\n            <div about=\"@\" property=\"v-s:dateToPlan\" class=\"view -edit -search\"></div>\n            <veda-control data-type=\"dateTime\" property=\"v-s:dateToPlan\" class=\"-view edit search\"></veda-control>\n        </div>\n      </div>\n      <div class=\"row row-attribute\">\n        <div class=\"col-sm-3 col-xs-5\">\n          <label about=\"v-s:placeDescription\" property=\"rdfs:label\"></label>\n        </div>\n        <div class=\"col-sm-9 col-xs-7\">\n            <div about=\"@\" property=\"v-s:placeDescription\" class=\"view -edit -search\"></div>\n            <veda-control data-type=\"text\" property=\"v-s:placeDescription\" class=\"-view edit search\"></veda-control>\n        </div>\n      </div>   \n      <section class=\"view edit -search\" id=\"hasResultsOfMeasurementsOfHarmfulFactors\">\n      <h4 class=\"section-header clearfix\">\n        <span about=\"v-s:hasResultsOfMeasurementsOfHarmfulFactors\" property=\"rdfs:label\"></span>\n        <button class=\"btn btn-xs btn-success margin-lg-h view -edit -search\" id=\"add-ResultsOfMeasurementsOfHarmfulFactors\">\n          <span class=\"glyphicon glyphicon-zoom-in\"></span>\n          <span about=\"v-s:hasResultsOfMeasurementsOfHarmfulFactors\" property=\"rdfs:label\"> </span>\n        </button>\n        <span about=\"v-s:hasResultsOfMeasurementsOfHarmfulFactors\" data-template=\"v-ui:SectionHeaderTemplate\"></span>\n      </h4>\n      <div class=\"section-content\">\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead class=\"result-header\">\n              <tr>\n                <th width=\"1%\"><span class=\"glyphicon glyphicon-search\"></span></th>\n                <th about=\"v-s:DateForResultsOfMeasurementsOfHarmfulFactors_Bundle\" property=\"rdfs:label\"></th>\n                <th about=\"v-s:placeDescription\" property=\"rdfs:label\"></th>\n                <th about=\"v-s:hasHarmfulSubstance\" property=\"rdfs:label\"></th>\n                <th about=\"v-s:description\" property=\"rdfs:label\"></th>\n                <th about=\"v-s:responsible\" property=\"rdfs:label\"></th>\n              </tr>\n            </thead>\n            <tbody about=\"@\" rel=\"v-s:hasResultsOfMeasurementsOfHarmfulFactors\" data-embedded=\"true\">\n              <tr>\n                <td about=\"@\" data-template=\"v-ui:IconModalTemplate\"></td>\n                <td>\n                  <div about=\"@\" property=\"v-s:date\" class=\"view edit -search\"></div>\n                  <veda-control data-type=\"dateTime\" property=\"v-s:date\" class=\"-view -edit search\"></veda-control>\n                </td>\n                <td>\n                  <div about=\"@\" property=\"v-s:placeDescription\" class=\"view edit -search\"></div>\n                  <veda-control data-type=\"text\" property=\"v-s:placeDescription\" class=\"-view -edit search\"></veda-control>\n                </td>\n                <td>\n                  <div about=\"@\" rel=\"v-s:hasHarmfulSubstance\" data-template=\"v-ui:LabelTemplate\" class=\"view edit search\"></div>\n                  <veda-control rel=\"v-s:hasHarmfulSubstance\" data-type=\"link\" class=\"-view -edit search fulltext dropdown\"></veda-control>\n                </td>\n                <td>\n                  <div about=\"@\" property=\"v-s:description\" class=\"view edit -search\"></div>\n                  <veda-control data-type=\"text\" property=\"v-s:description\" class=\"-view -edit search\"></veda-control>\n                </td>\n                <td>\n                  <div about=\"@\" rel=\"v-s:responsible\" data-template=\"v-ui:LabelTemplate\" class=\"view edit -search\"></div>\n                  <veda-control data-type=\"link\" rel=\"v-s:responsible\" class=\"-view -edit search fulltext\"></veda-control>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n      </div>\n      </section>      \n\n         \n      <hr />\n      <!--\u0421\u0438\u0441\u0442\u0435\u043C\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430-->\n      <div about=\"@\" data-template=\"v-ui:SystemPropertiesTemplate\" data-embedded=\"true\"></div>\n      <br />\n      <!-- BUTTONS -->\n      <div class=\"actions view edit -search\">\n        <span about=\"@\" data-template=\"v-ui:StandardButtonsTemplate\" data-embedded=\"true\" data-buttons=\"edit save cancel delete journal \"></span>\n      </div>\n    </div>\n  </div>\n");
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,