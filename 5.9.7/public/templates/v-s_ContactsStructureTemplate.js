"use strict";

System.register(["/js/browser/util.js", "/js/common/util.js", "jquery", "/js/common/veda.js", "/js/common/individual_model.js", "/js/common/backend.js"], function (_export, _context) {
  "use strict";

  var BrowserUtil, CommonUtil, $, veda, IndividualModel, Backend, pre, post, html;
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }
  return {
    setters: [function (_jsBrowserUtilJs) {
      BrowserUtil = _jsBrowserUtilJs.default;
    }, function (_jsCommonUtilJs) {
      CommonUtil = _jsCommonUtilJs.default;
    }, function (_jquery) {
      $ = _jquery.default;
    }, function (_jsCommonVedaJs) {
      veda = _jsCommonVedaJs.default;
    }, function (_jsCommonIndividual_modelJs) {
      IndividualModel = _jsCommonIndividual_modelJs.default;
    }, function (_jsCommonBackendJs) {
      Backend = _jsCommonBackendJs.default;
    }],
    execute: function () {
      _export("pre", pre = function pre(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        return new IndividualModel('v-s:vedaInfo').load().then(function (vedaInfo) {
          if (vedaInfo.hasValue('v-s:tenant') && vedaInfo['v-s:tenant'][0].id != veda.appointment['v-s:parentOrganization'][0].id) {
            individual['v-s:managedOrganization'] = vedaInfo['v-s:tenant'];
            $('#tenant', template).click(function () {
              individual['v-s:managedOrganization'] = vedaInfo['v-s:tenant'];
            });
          } else {
            $('#tenant', template).remove();
          }
          return true;
        }).then(function () {
          if (veda.user && veda.user.hasValue('v-s:parentOrganization')) {
            var selfOrg = veda.user['v-s:parentOrganization'][0];
            if (!individual.hasValue('v-s:managedOrganization')) {
              individual['v-s:managedOrganization'] = [selfOrg];
            }
            return selfOrg.present($('#selfOrg span', template), 'v-ui:LabelTemplate');
          } else {
            $('#selfOrg', template).remove();
          }
        }).then(function () {
          if (extra != undefined && extra.target != undefined) {
            var promise = _instanceof(extra.target[0], IndividualModel) ? Promise.resolve(extra.target[0]) : new veda.IndividualModel(extra.target[0]).load();
            return promise.then(function (appointment) {
              var splited = appointment['rdfs:label'][0].split(' ');
              var searchText = splited.length > 1 ? [splited[0], splited[1]].join(' ') : splited[0];
              $('#searchText input', template).val(searchText);
              individual.targetToCards = appointment['v-s:parentUnit'][0].id;
              individual['v-s:managedOrganization'] = appointment['v-s:parentOrganization'];
            }).catch(function (exp) {
              console.log(exp);
            });
          }
        });
      });
      _export("post", post = function post(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        var orgTree = $('#orgTree', template);
        var orgContent = $('#orgContent', template);
        var basePos;
        var baseWidth;
        var maxWidth;
        $('#resizeLine', template).on('mousedown', function (e) {
          e.preventDefault();
          basePos = e.clientX;
          baseWidth = orgTree.width();
          maxWidth = orgTree.parent().width();
        });
        template.on('mouseup', function (e) {
          e.preventDefault();
          basePos = undefined;
        });
        template.on('mousemove', function (e) {
          if (basePos == undefined) return;
          e.preventDefault();
          var changedWidth = baseWidth + (e.clientX - basePos);
          if (changedWidth < 200) {
            orgTree.css('width', 200);
            orgContent.css('width', maxWidth - 200);
          } else if (changedWidth > 600) {
            orgTree.css('width', 600);
            orgContent.css('width', maxWidth - 600);
          } else {
            orgTree.css('width', changedWidth);
            orgContent.css('width', maxWidth - changedWidth);
          }
        });
        var loadIndicator = $('#load-indicator');
        var findDeleted = false;
        var searchOrgMode = individual.hasValue('v-s:managedOrganization') ? 'targetOrg' : 'allOrg';
        var isContactManager = false;
        var userDisplayedElements;
        if (veda.user.preferences.hasValue('v-ui:displayedElements')) {
          userDisplayedElements = veda.user.preferences['v-ui:displayedElements'][0];
        } else {
          userDisplayedElements = 10;
        }
        veda.user.isMemberOf('cfg:ContactManagerGroup').then(function (isMember) {
          isContactManager = isMember || veda.appointment.id == 'cfg:AdministratorAppointment';
        });
        $('#selfOrg', template).click(function () {
          individual['v-s:managedOrganization'] = veda.user['v-s:parentOrganization'];
        });
        $('section .section-header', template).click(function () {
          var self = $(this);
          $('span.glyphicon', self).toggleClass('glyphicon-chevron-right glyphicon-chevron-down');
          self.siblings().toggle();
        });
        template.on('click', '.img-thumbnail', function (e) {
          e.preventDefault();
          var uri = $(this).attr('resource');
          var modal = BrowserUtil.showSmallModal(new IndividualModel(uri), 'v-ui:ImageTemplate');
          modal.find('.modal-dialog').removeClass('modal-lg').addClass('modal-sm');
        });
        var parentContainerTmpl = '<div class="row">' + '<div class="col-md-5">' + '<div class="margin-sm-h"><strong about="@" property="rdfs:label"></strong></div>' + '<div class="margin-sm-h"><small>' + '<span about="v-fs:cursor" property="rdfs:label"></span>' + '<span class="margin-sm-h badge"></span>&nbsp;&nbsp;' + '<span about="v-fs:estimated" property="rdfs:label"></span>' + '<span class="margin-sm-h badge"></span>' + '</small></div>' + '</div>' + '<div class="col-md-6" about="@" rel="v-s:hasCommunicationMean">' + '<div>' + '<strong class="margin-sm-h" about="@" rel="v-s:hasCommunicationMeanChannel" data-template="v-ui:LabelTemplate"></strong>' + '<span about="@" property="v-s:description"></span>  ' + '</div>' + '</div>' + '<div class="col-md-1">' + '<span class="hidden faviconIcon pointer fa fa-lg fa-star-o"></span>' + '<span style="float:right" about="@" class="zoom hidden" data-template="v-ui:IconModalTemplate"></span>' + '</div>' + '</div>';
        function drawCards(parent, from, limit) {
          loadIndicator.show();
          var isNeedBtnMore = false;
          if (limit == undefined) limit = userDisplayedElements;
          if (from == undefined) {
            $('tbody', orgContent).empty();
            orgContent.show();
            from = 0;
          }
          $('#parentContainer', orgContent).empty();

          // parent already has list of all children
          return parent.present($('#parentContainer', orgContent), parentContainerTmpl).then(function (tmpl) {
            if (parent.hasValue('v-s:hasCommunicationMean')) {
              var faviconIcon = $('span.faviconIcon', tmpl);
              faviconIcon.removeClass('hidden');
              if (veda.user.aspect.hasValue('v-s:hasFavoriteContact', parent)) {
                faviconIcon.toggleClass('fa-star-o fa-star');
              }
              faviconIcon.click(function () {
                if (faviconIcon.hasClass('fa-star-o')) {
                  veda.user.aspect.addValue('v-s:hasFavoriteContact', parent);
                } else if (faviconIcon.hasClass('fa-star')) {
                  veda.user.aspect.removeValue('v-s:hasFavoriteContact', parent);
                }
                veda.user.aspect.save();
                faviconIcon.toggleClass('fa-star-o fa-star');
              });
            }
            if (isContactManager) $('.zoom.hidden', tmpl).removeClass('hidden');
            return getChildren(parent);
          }).then(function (childrenUris) {
            var endIndex = childrenUris.length > from + limit ? from + limit : childrenUris.length;
            var promises = [];
            for (var i = from; i < endIndex; i++) {
              var uri = childrenUris[i];
              promises.push(new IndividualModel(uri).present($('<div></div>'), 'v-s:ContactCardTemplate'));
            }
            if (endIndex != childrenUris.length) {
              isNeedBtnMore = true;
            }
            if (isNeedBtnMore) {
              $('.result-info-container', orgContent).show();
              $('.result-info-container #showMoreCards', orgContent).off('click');
              $('.result-info-container #showMoreCards', orgContent).click(function () {
                drawCards(parent, from + limit);
              });
              $('.result-info-container #showAllCards', orgContent).off('click');
              $('.result-info-container #showAllCards', orgContent).click(function () {
                drawCards(parent, from + limit, childrenUris.length);
              });
            } else {
              $('.result-info-container', orgContent).hide();
            }
            $('span.badge:nth-child(4)', orgContent).text(childrenUris.length);
            $('span.badge:nth-child(2)', orgContent).text(endIndex);
            if (promises.length == 0) {
              var emptyIndivid = new IndividualModel('v-fs:Empty');
              promises.push(emptyIndivid.present($('<div></div>'), 'v-s:ContactCardTemplate'));
            }
            return Promise.all(promises);
          }).then(function (templates) {
            for (var i = 0; i < templates.length; i++) {
              $('.hideInStructure', templates[i]).siblings().removeClass('col-md-8');
              $('.hideInStructure', templates[i]).remove();
              $('tbody', orgContent).append(templates[i]);
              if (isContactManager) $('.zoom.hidden', templates[i]).removeClass('hidden');
            }
            $('#resizeLine', template).height(Math.max(orgContent.height(), orgTree.height()));
            loadIndicator.hide();
            return orgContent;
          });
        }
        function initialStructure(org) {
          orgTree.empty();
          orgContent.hide();
          if (org == undefined) {
            org = individual.hasValue('v-s:managedOrganization') ? individual['v-s:managedOrganization'][0] : null;
          }
          if (org) {
            $('section#OrgStructure').show();
            return getRowTemplate(org).then(function (tmpl) {
              return org.present(orgTree, tmpl);
            }).then(function (rendered) {
              var row = $('#orgTree div.value-row', template);
              return openRow(row).then(function () {
                // drawCards(org);

                return rendered;
              });
            });
          } else {
            $('section#OrgStructure').hide();
            return Promise.resolve(false);
          }
        }
        function getRowTemplate(value) {
          return value.load().then(function (value) {
            var rowTmpl = "<div class='value-row'>" + "<div class='item'>" + "<a href='#' class='expand glyphicon glyphicon-chevron-right'></a>" + "<span style='margin:0 5px;' class='fa fa-lg {icon}'></span>" + "<span about='@' data-template='v-ui:LabelTemplate'></span>" + '</div>' + '</div>';
            var icon = '';
            if (value.hasValue('rdf:type', 'v-s:Appointment') || value.hasValue('rdf:type', 'v-s:Position')) {
              return null;
            }
            if (value.hasValue('rdf:type', 'v-s:Organization')) {
              icon = 'fa-sitemap';
            }
            if (value.hasValue('rdf:type', 'v-s:Department') || value.hasValue('rdf:type', 'v-s:OrgGroup')) {
              icon = 'fa-folder-o';
            }
            return rowTmpl.replace('{icon}', icon);
            // else {
            //   return getChildren(value, false).then(function (children) {
            //     if ( value.treeChildrens > 0 ) {
            //       expand = "<a href='#' class='expand glyphicon glyphicon-chevron-right'></a>";
            //     }
            //   });
            // }
            // return rowTmpl.replace("{icon}", icon).replace("{expand}", expand);
          });
        }

        function getChildren(parent, refresh, mode) {
          if (parent.allChildren && !refresh) {
            return Promise.resolve(parent.allChildren);
          }
          var childrenUris = [];
          if (parent.hasValue('rdf:type', 'v-s:Appointment')) {
            return Promise.resolve([]);
          }
          loadIndicator.show();
          var parentUri = parent.id;
          var selectPart = 'SELECT DISTINCT id ';
          var wherePart = "WHERE v_s_parentUnit_str=['" + parentUri + "'] AND v_s_deleted_int=[0]";
          var endingPart = " group by id, rdfs_label_str having sum(sign) > 0 order by arraySort(x -> endsWith(lowerUTF8(x), '@en'), rdfs_label_str) asc";
          var queryDepartments = selectPart + 'FROM veda_tt.`v-s:Department` FINAL ' + wherePart + endingPart;
          var queryAppointment = selectPart + 'FROM veda_tt.`v-s:Appointment` FINAL ' + "WHERE v_s_parentUnit_str=['" + parentUri + "'] AND v_s_deleted_int=[0] AND v_s_official_int=[1] AND NOT(lowerUTF8(arrayStringConcat(v_s_origin_str, '')) LIKE '%group%')" + endingPart;
          var queryPositions = selectPart + 'FROM veda_tt.`v-s:Position` FINAL ' + "WHERE v_s_parentUnit_str=['" + parentUri + "'] AND v_s_deleted_int=[0] AND lowerUTF8(arrayStringConcat(v_s_origin_str, ' ')) LIKE '%group%'" + endingPart;
          if (mode == 'notAppointment') {
            queryAppointment = null;
            queryPositions = null;
          }
          var queryStringArray = [];
          if (parent.hasValue('rdf:type', 'v-s:Department') || parent.hasValue('rdf:type', 'v-s:Subsidiary')) {
            queryStringArray = [queryDepartments, queryPositions, queryAppointment];
          } else if (parent.hasValue('rdf:type', 'v-s:OrgGroup')) {
            var queryOrgGroup = selectPart + 'FROM veda_tt.`v-s:OrgGroup` ' + wherePart + endingPart;
            queryStringArray = [queryOrgGroup, queryPositions, queryAppointment];
          } else if (parent.hasValue('rdf:type', 'v-s:Organization')) {
            var _queryOrgGroup = selectPart + 'FROM veda_tt.`v-s:OrgGroup` ' + wherePart + endingPart;
            var querySubsidiary = selectPart + "FROM veda_tt.`v-s:Subsidiary` WHERE v_s_parent_str=['" + parentUri + "'] AND v_s_deleted_int=[0]" + endingPart;
            queryStringArray = [querySubsidiary, queryDepartments, _queryOrgGroup, queryPositions, queryAppointment];
          }
          var sort = "'rdfs:label_ru' asc";
          var queries = queryStringArray.map(function (queryString) {
            if (queryString == null) return Promise.resolve({
              result: []
            });
            return Backend.query({
              ticket: veda.ticket,
              sql: queryString,
              sort: sort,
              from: 0,
              limit: 10000,
              top: 300
            });
          });
          return Promise.all(queries).then(function (queryResults) {
            parent.treeChildrens = 0;
            queryResults.forEach(function (queryResult, i) {
              // 2 last items not counting in childrens (appointments, positions)
              if (i + 2 < queryResults.length) parent.treeChildrens += queryResult.count;
              childrenUris = childrenUris.concat(queryResult.result);
            });
            childrenUris = CommonUtil.unique(childrenUris);
            parent.allChildren = childrenUris;
            loadIndicator.hide();
            return childrenUris;
          });
        }
        function drawChildren(parentUri, rootElement) {
          var childrenContainer = rootElement.children('.children');
          if (childrenContainer.length) {
            childrenContainer.removeClass('hidden');
            return Promise.resolve(childrenContainer.length);
          } else {
            rootElement.append("<div class='children'></div>");
            loadIndicator.show();
            return getChildren(new IndividualModel(parentUri), true).then(function (childrenUris) {
              return childrenUris.reduce( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(acc, cur) {
                  var child, tmpl;
                  return _regeneratorRuntime().wrap(function _callee$(_context2) {
                    while (1) switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return acc;
                      case 2:
                        acc = _context2.sent;
                        child = new IndividualModel(cur);
                        _context2.next = 6;
                        return getRowTemplate(child);
                      case 6:
                        tmpl = _context2.sent;
                        if (!(tmpl == null)) {
                          _context2.next = 9;
                          break;
                        }
                        return _context2.abrupt("return", acc);
                      case 9:
                        _context2.next = 11;
                        return child.present(rootElement.children('.children'), tmpl);
                      case 11:
                        return _context2.abrupt("return", ++acc);
                      case 12:
                      case "end":
                        return _context2.stop();
                    }
                  }, _callee);
                }));
                return function (_x, _x2) {
                  return _ref.apply(this, arguments);
                };
              }(), Promise.resolve(0));
              // const promises = childrenUris.map(function (childUri) {
              //   const child = new IndividualModel(childUri);
              //   return getRowTemplate(child).then(function (tmpl) {
              //     if (tmpl == null) {
              //       return [child, Promise.resolve(null)];
              //     } else {
              //       return [child, tmpl];
              //     }
              //     return child.present(rootElement.children('.children'), tmpl);
              //   });
              // });
              // return Promise.all(promises);
            }).then(function (result) {
              loadIndicator.hide();
              // result = result.filter(function (item) {
              //   return item != null;
              // });
              // return result.length;
              return result;
            });
          }
        }
        function openFromStructure(targetUri) {
          var isInRoot = false;
          var targetIndivid = new IndividualModel(targetUri);
          if ($('section#OrgStructure .section-header .glyphicon', template).hasClass('glyphicon-chevron-right')) {
            $('section#OrgStructure .section-header').click();
          }
          return getParentUnitChain(targetIndivid).then(function (chain) {
            var rootOrg;
            if (chain.length == 0) {
              // isInRoot = true;
              rootOrg = targetIndivid;
            } else {
              rootOrg = chain.pop();
              chain.unshift(targetIndivid);
            }
            return initialStructure(rootOrg).then(function (tmpl) {
              return chain.reduceRight(function (pr, cur) {
                return pr.then(function () {
                  var row = $("div.value-row[resource='" + cur.id + "']", tmpl);
                  return openRow(row);
                });
              }, Promise.resolve());
            });
          }).then(function () {
            var targetRow = $("div.value-row[resource='" + targetUri + "'] > .item", template);
            targetRow.addClass('warning');
            return isInRoot ? true : drawCards(new IndividualModel(targetUri));
          }).then(function () {
            var position = orgContent.offset().top;
            if (position > 0) {
              $('html, body').animate({
                scrollTop: position
              });
            }
            individual.targetToCards = targetUri;
          });
        }
        function getParentUnitChain(target, acc) {
          if (acc == undefined) acc = [];
          return target.load().then(function () {
            if (target.hasValue('v-s:parentUnit')) {
              var parentUnit = target['v-s:parentUnit'][0];
              acc.push(parentUnit);
              return getParentUnitChain(parentUnit, acc);
            } else {
              return acc;
            }
          });
        }
        new IndividualModel('v-s:SearchTextBundle').load().then(function (bundle) {
          $('#searchText input', template).attr('placeholder', bundle['rdfs:label'].map(CommonUtil.formatValue).join(' '));
        });
        var searchHelperObj = {};
        function setSearchHelperObjToDefault() {
          searchHelperObj = {
            org: {
              handlered: 0
            },
            dep: {
              handlered: 0
            },
            app: {
              handlered: 0
            },
            phone: {
              handlered: 0
            },
            email: {
              handlered: 0
            },
            pos: {
              handlered: 0
            }
          };
        }
        $('#searchButton', template).click(function () {
          var searchText = $('#searchText input', template).val();
          if (!searchText) return;
          searchText = searchText.trim();
          setSearchHelperObjToDefault();
          loadIndicator.show();
          var resultOrg = $('#resultOrg', template).hide();
          $('tbody', resultOrg).empty();
          var resultDep = $('#resultDep', template).hide();
          $('tbody', resultDep).empty();
          var resultApp = $('#resultApp', template).hide();
          $('tbody', resultApp).empty();
          var resultPos = $('#resultPos', template).hide();
          $('tbody', resultPos).empty();
          var searchPromise = [];
          var queryStringArr = genQueryStringArray(searchText, findDeleted, searchOrgMode == 'targetOrg');
          searchPromise.push(queryStringArr[0] == null ? Promise.resolve([]) : searchAndLoad('org', queryStringArr[0], 0));
          searchPromise.push(searchAndLoad('dep', queryStringArr[1], 0));
          searchPromise.push(searchAndLoad('app', queryStringArr[2], 0));
          searchPromise.push(searchAndLoad('pos', queryStringArr[3], 0));

          // orgTree.empty();
          // orgContent.hide();
          // $("tbody", orgContent).empty();

          return Promise.all(searchPromise).then(function (results) {
            var finded = results.reduce(function (acc, cur) {
              return acc + cur.length;
            }, 0);
            if (finded == 0) {
              $('.not-found', template).removeClass('hidden');
            } else {
              $('.not-found', template).addClass('hidden');
            }
            var presentPromises = [];
            var orgObj = results[0];
            var depObj = results[1];
            var appObj = results[2];
            var posObj = results[3];
            if (orgObj.length > 0) resultOrg.show();
            if (depObj.length > 0) resultDep.show();
            if (appObj.length > 0) resultApp.show();
            if (posObj.length > 0) resultPos.show();
            presentPromises.push(presentSearchResult('org', resultOrg, orgObj));
            presentPromises.push(presentSearchResult('dep', resultDep, depObj));
            presentPromises.push(presentSearchResult('app', resultApp, appObj));
            presentPromises.push(presentSearchResult('pos', resultPos, posObj));
            return Promise.all(presentPromises);
          }).then(function () {
            if ($('section#OrgStructure .section-header .glyphicon', template).hasClass('glyphicon-chevron-down')) {
              $('section#OrgStructure .section-header').click();
            }
            loadIndicator.hide();
            return true;
          });
        });
        function genQueryStringArray(searchText, findDeleted, findInParentOrg) {
          var selectPart = 'SELECT DISTINCT target.id';
          var endingPart = " GROUP BY target.id, target.rdfs_label_str, target.version HAVING sum(target.sign) > 0 order by arraySort(x -> endsWith(lowerUTF8(x), '@en'), target.rdfs_label_str) asc";
          var basicWherePart = findDeleted ? ' WHERE target.v_s_deleted_int=[1]' : ' WHERE target.v_s_deleted_int=[0] ';
          var orgJoinPart = ' LEFT JOIN veda_tt.`v-s:Organization` as org ON org.id=target.`v_s_parentOrganization_str`[1]';
          var conditionForOrg = ' and org.`v_s_actualContacts_int`[1]=1';
          if (findInParentOrg) {
            basicWherePart += " AND target.v_s_parentOrganization_str=['" + individual['v-s:managedOrganization'][0].id + "']";
          }
          var organizationQuery = selectPart + ' FROM veda_tt.`v-s:Organization` AS target';
          var departmentQuery = selectPart + ' FROM veda_tt.`v-s:Department` AS target' + orgJoinPart;
          var appointmentQuery = selectPart + ' FROM veda_tt.`v-s:Appointment` as target INNER JOIN veda_tt.`v-s:Person` as per ON target.v_s_employee_str[1] = per.id' + orgJoinPart;
          var specialPositionQuery = selectPart + ' FROM veda_tt.`v-s:Position` AS target' + orgJoinPart;
          var isCommMeanJoinAdded = false;
          // var isPhoneChannelAdded = false;
          // var isEmailChannelAdded = false;
          var queryParts = searchText.split(' ').reduce(function (qParts, sText) {
            sText = sText.toLowerCase();
            var isPhoneSearch = sText.match('^' + String.fromCharCode(92) + '+?[' + String.fromCharCode(92) + 'd-' + String.fromCharCode(92) + 's]*$') != null;
            var isEmailSearch = sText.match('^.*@{1}') != null;
            if (isPhoneSearch || isEmailSearch) {
              if (!isCommMeanJoinAdded) {
                isCommMeanJoinAdded = true;
                organizationQuery += ' INNER JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [target.id]';
                departmentQuery += ' INNER JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [target.id]';
                appointmentQuery += ' INNER JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [per.id]';
                specialPositionQuery += ' INNER JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [target.id]';
                // organizationQuery += " LEFT JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [target.id]";
                // departmentQuery += " LEFT JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [target.id]";
                // appointmentQuery += " LEFT JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [per.id]";
                // specialPositionQuery += " LEFT JOIN veda_tt.`v-s:CommunicationMean` as cm ON cm.v_s_backwardTarget_str = [target.id]";
              }
              // if (isPhoneSearch && !isPhoneChannelAdded) {
              //   basicWherePart += " AND (cm.v_s_hasCommunicationMeanChannel_str[1] in ('d:fpxx0hw2gyea8z1dcjc6mxtlg2','d:zhercrddg5yotsbbzr33cfoqfc','d:o3q2gagyvfwh430io88vvb8vel','d:m4vg7pkvcvke9e6loqtb937jhy'))";
              // }
              // if (isEmailSearch && !isEmailChannelAdded) {
              //   basicWherePart += " AND cm.v_s_hasCommunicationMeanChannel_str[1] = 'd:a1iwni0b54fvcz41vuts08bxqsh'";
              // }
              qParts = qParts.map(function (part) {
                return part + " AND (lowerUTF8(cm.v_s_description_str[1]) LIKE '%" + sText + "%' OR lowerUTF8(cm.rdfs_comment_str[1]) LIKE '%" + sText + "%')";
              });
            } else {
              qParts[0] += " AND lowerUTF8(arrayStringConcat(arrayConcat(rdfs_label_str,v_s_title_str, v_s_shortLabel_str), ' ')) LIKE '%" + sText + "%'";
              qParts[1] += " AND lowerUTF8(arrayStringConcat(arrayConcat(rdfs_label_str,v_s_title_str, v_s_shortLabel_str), ' ')) LIKE '%" + sText + "%'";
              qParts[2] += " AND lowerUTF8(arrayStringConcat(arrayConcat(target.rdfs_label_str,per.v_s_middleName_str), ' ')) LIKE '%" + sText + "%'";
              qParts[3] += " AND lowerUTF8(arrayStringConcat(arrayConcat(target.rdfs_label_str,target.rdfs_comment_str), ' ')) LIKE '%" + sText + "%'";
            }
            return qParts;
          }, ['', '', '', '']);
          if (isCommMeanJoinAdded) {
            basicWherePart += ' AND cm.v_s_deleted_int = [0]';
          }
          organizationQuery = findInParentOrg ? null : organizationQuery + basicWherePart + queryParts[0] + " AND v_s_hasCommunicationMean_str[1]!=''" + ' and target.`v_s_actualContacts_int`[1]=1' + endingPart;
          departmentQuery += basicWherePart + queryParts[1] + conditionForOrg + endingPart;
          appointmentQuery += basicWherePart + queryParts[2] + " AND target.v_s_official_int=[1] AND NOT(lowerUTF8(arrayStringConcat(target.v_s_origin_str, '')) LIKE '%group%')" + conditionForOrg + endingPart;
          specialPositionQuery += basicWherePart + queryParts[3] + " AND lowerUTF8(arrayStringConcat(target.v_s_origin_str, ' ')) LIKE '%group%'" + conditionForOrg + endingPart;
          return [organizationQuery, departmentQuery, appointmentQuery, specialPositionQuery];
        }
        function presentSearchResult(objType, container, items) {
          var promises = items.map(function (item) {
            return item.present($('<div></div>'), 'v-s:ContactCardTemplate');
          });
          return Promise.all(promises).then(function (templates) {
            templates.forEach(function (tmpl) {
              if (isContactManager) $('.zoom.hidden', tmpl).removeClass('hidden');
              if (individual.hasValue('v-s:managedOrganization')) {
                $(".hideInStructure span[rel='v-s:parentOrganization']", tmpl).remove();
              }
              $('tbody', container).append(tmpl);
            });
            $('span.badge:nth-child(4)', container).text(searchHelperObj[objType].estimated);
            $('span.badge:nth-child(2)', container).text(searchHelperObj[objType].handlered);
            if ($('tbody tr', container).length < searchHelperObj[objType].estimated) {
              $('div.result-info-container', container).removeClass('hidden');
            } else {
              $('div.result-info-container', container).addClass('hidden');
            }
          });
        }
        function searchAndLoad(objType, queryString, from, top) {
          var sort;
          if (objType == 'app') {
            sort = "'rdfs:label_ru' asc";
          } else {
            sort = "'rdfs:label' asc";
          }
          if (!top) top = userDisplayedElements;
          // TODO если в консоли не появляется то удалить
          if (objType == 'phone' || objType == 'email') console.log('This is search ', objType);
          var searchObj = {
            ticket: veda.ticket,
            sql: queryString,
            sort: sort,
            from: from,
            top: top,
            limit: 200,
            async: true
          };
          searchHelperObj[objType].query = queryString;
          return Backend.query(searchObj).then(function (searchResult) {
            searchHelperObj[objType].estimated = searchResult.estimated;
            searchHelperObj[objType].handlered = searchHelperObj[objType].handlered + searchResult.count;
            var loadPromises = [];
            loadPromises = searchResult.result.map(function (uri) {
              return new IndividualModel(uri).load();
            });
            return Promise.all(loadPromises);
          }).catch(function (err) {
            console.error('Backend query failed');
            return [];
          });
        }
        function openRow(row) {
          var uri = row.attr('resource');
          return drawChildren(uri, row).then(function (childrenCount) {
            var chevron = row.children('.item').find('a');
            if (childrenCount == 0) {
              chevron.removeClass('glyphicon-chevron-right glyphicon-chevron-down');
            } else {
              chevron.toggleClass('expanded glyphicon-chevron-right glyphicon-chevron-down');
            }
            $('#resizeLine', template).height(Math.max(orgContent.height(), orgTree.height()));
            return true;
          });
        }
        function initPopover(target) {
          var uri = target.closest('[resource]').attr('resource');
          var tmpl = "<div><a tabindex='0' role='button' class='to-structure' about='@' property='rdfs:label'/></div>";
          return getParentUnitChain(new IndividualModel(uri)).then(function (chain) {
            var presentPromises = chain.map(function (parent) {
              return parent.present($('<div></div>'), tmpl);
            });
            if (presentPromises.length == 0) {
              presentPromises.push(new IndividualModel(uri).present($('<div></div>'), tmpl));
            }
            return Promise.all(presentPromises);
          }).then(function (templates) {
            var cntr = templates.reduceRight(function (acc, curTmpl, i) {
              curTmpl.style.marginLeft = 15 * (templates.length - (i + 1)) + 'px';
              return acc.append(curTmpl);
            }, $("<div><span class='close'>&nbsp;&times;</span></div>"));
            return cntr;
          });
        }
        var openedPopover;
        template.on('click', 'span.open-structure', function (e) {
          e.stopPropagation();
          e.preventDefault();
          var self = $(this);
          initPopover($(this)).then(function (content) {
            self.popover({
              trigger: 'manual focus',
              placement: 'auto right',
              html: true,
              content: content,
              container: template
            });
            content.on('click', '.close', function (e) {
              e.stopPropagation();
              //openedPopover = undefined;
              self.popover('hide');
              self.attr('data-popovered', false);
            });
            //openedPopover = self;
            self.popover('show');
            self.attr('data-popovered', true);
          });

          // return openFromStructure(uri);
        });

        template.on('click', 'a.to-structure', function (e) {
          e.stopPropagation();
          e.preventDefault();
          // openedPopover.popover('hide');
          // openedPopover.attr('data-popovered', false);
          // openedPopover = undefined;
          var uri = $(this).attr('about');
          var section = $(this).closest('section');
          $('.section-header', section).click();
          return openFromStructure(uri);
        });
        template.on('click', 'a.expand.glyphicon-chevron-right', function (e) {
          e.stopPropagation();
          e.preventDefault();
          var row = $(this).closest('div.value-row');
          return openRow(row);
        });
        template.on('click', 'a.expanded.glyphicon-chevron-down', function (e) {
          e.stopPropagation();
          e.preventDefault();
          var self = $(this);
          self.toggleClass('expanded glyphicon-chevron-right glyphicon-chevron-down');
          var row = self.closest('div.value-row');
          row.children('div.children').addClass('hidden');
          return false;
        });
        template.on('click', 'div.value-row', function (e) {
          e.stopPropagation();
          e.preventDefault();
          var self = $(this);
          var item = self.children('.item');
          if (!item.hasClass('warning')) {
            $('.item.warning', template).removeClass('warning');
            item.addClass('warning');
          }
          var uri = self.attr('resource');
          return drawCards(new IndividualModel(uri));
        });
        template.on('dblclick', '#orgContent tbody tr', function (e) {
          var uri = $(this).attr('resource');
          if (uri == undefined) {
            console.error('Unexpected behavior: empty attr[resource]');
            return false;
          }
          return new IndividualModel(uri).load().then(function (loaded) {
            if (!loaded.hasValue('rdf:type', 'v-s:Department') && !loaded.hasValue('rdf:type', 'v-s:OrgGroup')) {
              return false;
            }
            return Promise.resolve().then(function () {
              var rowInTree = $("#orgTree .children:not(.hidden)>div.value-row[resource='" + uri + "']", template);
              if (rowInTree.length == 0) {
                var parent = $('#orgTree div.item.warning', template).parent();
                return openRow(parent).then(function () {
                  return $("div.value-row[resource='" + uri + "']", parent);
                });
              }
              return rowInTree;
            }).then(function (row) {
              row.click();
              return true;
            });
          });
        });
        template.on('click', '.result-info-container .more-results', function (e) {
          var self = $(this);
          var type = self.data('search-type');
          var query = searchHelperObj[type].query;
          var from = searchHelperObj[type].handlered;
          return searchAndLoad(type, query, from).then(function (result) {
            var container = self.closest('section');
            return presentSearchResult(type, container, result);
          });
        });
        template.on('click', '.result-info-container .all-results', function (e) {
          var self = $(this);
          var type = self.data('search-type');
          var query = searchHelperObj[type].query;
          var from = searchHelperObj[type].handlered;
          return searchAndLoad(type, query, from, 200).then(function (result) {
            var container = self.closest('section');
            return presentSearchResult(type, container, result);
          });
        });
        template.on('click', 'a.glyphicon-zoom-in', function (e) {
          e.stopPropagation();
          e.preventDefault();
          var self = $(this);
          var uri = self.closest('[resource]').attr('resource');
          var obj = new IndividualModel(uri);
          var tmpl;
          if (obj.hasValue('rdf:type', 'v-s:Appointment')) {
            obj = obj['v-s:employee'][0];
            tmpl = undefined;
          } else if (obj.hasValue('rdf:type', 'v-s:Department')) {
            tmpl = 'v-s:DepartmentTemplate';
          } else if (obj.hasValue('rdf:type', 'v-s:Organization')) {
            tmpl = undefined;
          }
          BrowserUtil.showModal(obj, tmpl);
          return false;
        });

        // Ctrl + Enter triggers search
        function ctrlEnterHandler(e) {
          // if (e.ctrlKey && e.keyCode === 13) {
          //   $("#searchButton", template).click();
          // }
          if (e.keyCode === 13) {
            $('#searchButton', template).click();
          }
        }
        $(window).on('keyup', ctrlEnterHandler);
        template.one('remove', function () {
          $(window).off('keyup', ctrlEnterHandler);
        });
        function dropResultTables() {
          var resultOrg = $('#resultOrg', template).hide();
          $('tbody', resultOrg).empty();
          var resultDep = $('#resultDep', template).hide();
          $('tbody', resultDep).empty();
          var resultApp = $('#resultApp', template).hide();
          $('tbody', resultApp).empty();
          var resultPos = $('#resultPos', template).hide();
          $('tbody', resultPos).empty();
        }
        individual.on('v-s:managedOrganization', function () {
          searchOrgMode = individual.hasValue('v-s:managedOrganization') ? 'targetOrg' : 'allOrg';
          dropResultTables();
          var searchText = $('#searchText input', template).val();
          if (searchText != '') {
            $('#searchButton', template).click();
          }
          initialStructure().then(function (result) {
            if (result == false) return;
            if ($('section#OrgStructure .section-header .glyphicon', template).hasClass('glyphicon-chevron-right')) {
              $('section#OrgStructure .section-header', template).click();
            }
            return drawCards(individual['v-s:managedOrganization'][0]);
          });
        });
        template.one('remove', function () {
          individual.off('v-s:managedOrganization');
        });
        $('#searchText .clear', template).click(function () {
          $('#searchText input', template).val('');
          dropResultTables();
        });
        $('#resetButton', template).click(function () {
          $('#searchText input', template).val('');
          dropResultTables();
          individual['v-s:managedOrganization'] = [];
        });
        if (individual.targetToCards) {
          return openFromStructure(individual.targetToCards);
        } else {
          return initialStructure().then(function (result) {
            if (result == false) return;
            return drawCards(individual['v-s:managedOrganization'][0]);
          });
        }
      });
      _export("html", html = "\n  <div>\n    <style>\n      div.value-row > div.item {\n        padding: 8px;\n        white-space: nowrap;\n        overflow-x: hidden;\n        text-overflow: clip;\n      }\n      div.item:hover {\n        background-color: #fcf8e3;\n      }\n      div.warning {\n        background-color: #faf2cc;\n      }\n      #searchText input {\n        border-top-left-radius: 4px;\n        border-bottom-left-radius: 4px;\n      }\n      .children {\n        border-left: 1px dashed #eee;\n        padding-left: 8px;\n        margin-left: 14px;\n      }\n      /*#orgContent {\n      background-color: #fff;\n    }*/\n      #resizeLine {\n        position: absolute;\n        float: left;\n        width: 3px;\n        height: 100%;\n        cursor: col-resize;\n        background-color: #ddd;\n      }\n      /*.result-table thead {\n        background-color: #f5f5f5;\n      }*/\n\n      .section-header > span.glyphicon {\n        margin-right: 5%;\n      }\n\n      div.result-info-container {\n        margin-top: -20px;\n      }\n    </style>\n    <div class=\"row  margin-md\">\n      <div class=\"col-md-3\">\n        <!-- <veda-control id=\"searchText\" property=\"*\" data-type=\"string\"></veda-control> -->\n        <div id=\"searchText\" class=\"input-group\">\n          <input type=\"text\" class=\"form-control\" />\n          <div class=\"input-group-addon btn btn-default clear\" tabindex=\"0\">\u2715</div>\n        </div>\n        <div class=\"margin-sm\">\n          <button id=\"searchButton\" class=\"btn btn-primary\" type=\"button\" about=\"v-fs:Find\" property=\"rdfs:label\"></button>\n          <button id=\"resetButton\" class=\"btn btn-default\" type=\"button\" about=\"v-s:Reset\" property=\"rdfs:label\"></button>\n        </div>\n      </div>\n      <div class=\"col-md-4\">\n        <veda-control\n          data-type=\"link\"\n          rel=\"v-s:managedOrganization\"\n          data-template=\"{@.rdfs:label}, {@.v-s:taxId}\"\n          class=\"fulltext dropdown\"\n          data-query-prefix=\"('rdf:type' === 'v-s:Organization' || 'rdf:type'==='v-s:Subsidiary') && 'v-s:actualContacts'=='true'\"></veda-control>\n        <span class=\"text-muted padding-md\" about=\"v-s:FastInputBundle\" property=\"rdfs:label\"></span>\n        <button id=\"selfOrg\" class=\"btn btn-xs btn-primary margin-sm\">+<span></span></button>\n        <button id=\"tenant\" class=\"btn btn-xs btn-primary margin-sm\">\n          <span>+</span>\n          <span about=\"v-s:vedaInfo\" rel=\"v-s:tenant\" data-template=\"v-ui:LabelTemplate\"></span>\n        </button>\n      </div>\n    </div>\n    <div class=\"not-found alert alert-warning hidden\">\n      <strong about=\"v-fs:Empty\" property=\"rdfs:label\"></strong>\n      <span about=\"v-fs:NothingFound\" property=\"rdfs:label\"></span>\n    </div>\n    <section id=\"resultOrg\" style=\"display: none\">\n      <h5 class=\"section-header\">\n        <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        <label about=\"v-s:OrganizationsBundle\" property=\"rdfs:label\"></label>\n        <small class=\"margin-md-h\" style=\"color:black; font-weight: normal\">\n          <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>&nbsp;&nbsp;\n          <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>\n        </small>\n      </h5>\n      <div class=\"section-content\">\n        <table class=\"table result-table\">\n          <tbody></tbody>\n        </table>\n        <div class=\"result-info-container\">\n          <button class=\"btn btn-primary more-results\" data-search-type=\"org\" about=\"v-fs:MoreResults\" property=\"rdfs:label\"></button>\n          <button class=\"btn btn-warning all-results\" data-search-type=\"org\" about=\"v-fs:AllResults\" property=\"rdfs:label\"></button>\n          <small class=\"margin-sm-h\" style=\"color:black\">\n            <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>&nbsp;&nbsp;\n            <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>\n          </small>\n        </div>\n      </div>\n    </section>\n    <section id=\"resultDep\" style=\"display: none\">\n      <h5 class=\"section-header\">\n        <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        <label about=\"v-s:DepartmentsBundle\" property=\"rdfs:label\"></label>\n        <small class=\"margin-md-h\" style=\"color:black; font-weight: normal\">\n          <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>&nbsp;&nbsp;\n          <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>\n        </small>\n      </h5>\n      <div class=\"section-content\">\n        <table class=\"table result-table\">\n          <tbody></tbody>\n        </table>\n        <div class=\"result-info-container\">\n          <button class=\"btn btn-primary more-results\" data-search-type=\"dep\" about=\"v-fs:MoreResults\" property=\"rdfs:label\"></button>\n          <button class=\"btn btn-warning all-results\" data-search-type=\"dep\" about=\"v-fs:AllResults\" property=\"rdfs:label\"></button>\n          <small class=\"margin-sm-h\" style=\"color:black\">\n            <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>&nbsp;&nbsp;\n            <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>\n          </small>\n        </div>\n      </div>\n    </section>\n    <section id=\"resultPos\" style=\"display: none\">\n      <h5 class=\"section-header\">\n        <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        <label about=\"v-s:PositionsBundle\" property=\"rdfs:label\"></label>\n        <small class=\"margin-md-h\" style=\"color:black; font-weight: normal\">\n          <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>&nbsp;&nbsp;\n          <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>\n        </small>\n      </h5>\n      <div class=\"section-content\">\n        <table class=\"table result-table\">\n          <tbody></tbody>\n        </table>\n        <div class=\"result-info-container\">\n          <button class=\"btn btn-primary more-results\" data-search-type=\"pos\" about=\"v-fs:MoreResults\" property=\"rdfs:label\"></button>\n          <button class=\"btn btn-warning all-results\" data-search-type=\"pos\" about=\"v-fs:AllResults\" property=\"rdfs:label\"></button>\n          <small class=\"margin-sm-h\" style=\"color:black\">\n            <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>&nbsp;&nbsp;\n            <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>\n          </small>\n        </div>\n      </div>\n    </section>\n    <section id=\"resultApp\" style=\"display: none\">\n      <h5 class=\"section-header\">\n        <span class=\"glyphicon glyphicon-chevron-down\"></span>\n        <label about=\"v-s:AppointmentsBundle\" property=\"rdfs:label\"></label>\n        <small class=\"margin-md-h\" style=\"color:black; font-weight: normal\">\n          <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>&nbsp;&nbsp;\n          <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n          <span class=\"badge\"></span>\n        </small>\n      </h5>\n      <div class=\"section-content\">\n        <table class=\"table result-table\">\n          <thead>\n            <th></th>\n            <th><span about=\"rdfs:label\" property=\"rdfs:label\"></span></th>\n            <th></th>\n            <th>\n              <div class=\"row\">\n                <div about=\"d:o3q2gagyvfwh430io88vvb8vel\" property=\"rdfs:label\" class=\"col-lg-2 col-md-12\"></div>\n                <div about=\"d:a1iwni0b54fvcz41vuts08bxqsh\" property=\"rdfs:label\" class=\"col-lg-5 col-md-12\" style=\"overflow-x: hidden;\"></div>\n                <div about=\"d:fpxx0hw2gyea8z1dcjc6mxtlg2\" property=\"rdfs:label\" class=\"other-phone col-lg-5 col-md-12\"></div>  \n              </div>\n              <!-- <span about=\"v-s:ContactsBundle\" property=\"rdfs:label\"></span> -->\n            </th>\n            <th></th>\n          </thead>\n          <tbody></tbody>\n        </table>\n        <div class=\"result-info-container\">\n          <button class=\"btn btn-primary more-results\" data-search-type=\"app\" about=\"v-fs:MoreResults\" property=\"rdfs:label\"></button>\n          <button class=\"btn btn-warning all-results\" data-search-type=\"app\" about=\"v-fs:AllResults\" property=\"rdfs:label\"></button>\n          <small class=\"margin-sm-h\" style=\"color:black\">\n            <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>&nbsp;&nbsp;\n            <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n            <span class=\"badge\"></span>\n          </small>\n        </div>\n      </div>\n    </section>\n    <section id=\"OrgStructure\" style=\"display: none;\">\n      <h5 class=\"section-header\">\n        <span class=\"glyphicon glyphicon-chevron-down\"></span>\n        <label about=\"v-s:Contacts\" property=\"rdfs:comment\"></label>\n      </h5>\n      <div class=\"section-content\">\n        <div id=\"orgTree\" class=\"col-md-3\" style=\"padding-right:0px\"></div>\n        <div id=\"orgContent\" class=\"col-md-9\" style=\"padding-left:5px\">\n          <div id=\"resizeLine\"></div>\n          <div>\n            <div id=\"parentContainer\" class=\"warning padding-md\">\n              <div about=\"@\" property=\"rdfs:label\"></div>\n              <div about=\"@\" rel=\"v-s:hasCommunicationMean\">\n                <div>\n                  <strong about=\"@\" rel=\"v-s:hasCommunicationMeanChannel\" data-template=\"v-ui:LabelTemplate\"></strong>\n                  <span about=\"@\" property=\"v-s:description\"></span>\n                </div>\n              </div>\n            </div>\n            <table class=\"table table-hover\">\n              <thead>\n                <th></th>\n                <th><span about=\"rdfs:label\" property=\"rdfs:label\"></span></th>\n                <th>\n                  <div class=\"row\">\n                    <div about=\"d:o3q2gagyvfwh430io88vvb8vel\" property=\"rdfs:label\" class=\"col-lg-2 col-md-12\"></div>\n                    <div about=\"d:a1iwni0b54fvcz41vuts08bxqsh\" property=\"rdfs:label\" class=\"col-lg-5 col-md-12\" style=\"overflow-x: hidden;\"></div>\n                    <div about=\"d:fpxx0hw2gyea8z1dcjc6mxtlg2\" property=\"rdfs:label\" class=\"other-phone col-lg-5 col-md-12\"></div>  \n                  </div>\n                  <!-- <span about=\"v-s:ContactsBundle\" property=\"rdfs:label\"></span> -->\n                </th>\n                <th></th>\n              </thead>\n              <tbody></tbody>\n            </table>\n            <div class=\"result-info-container margin-md-h\">\n              <button id=\"showMoreCards\" class=\"btn btn-primary\" about=\"v-fs:MoreResults\" property=\"rdfs:label\"></button>\n              <button id=\"showAllCards\" class=\"btn btn-warning\" about=\"v-fs:AllResults\" property=\"rdfs:label\"></button>\n              <small class=\"margin-md-h\" style=\"color:black\">\n                <span about=\"v-fs:cursor\" property=\"rdfs:label\"></span>\n                <span class=\"badge\"></span>&nbsp;&nbsp;\n                <span about=\"v-fs:estimated\" property=\"rdfs:label\"></span>\n                <span class=\"badge\"></span>\n              </small>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n");
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZXhwb3J0cyIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImRlc2MiLCJ2YWx1ZSIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsImZuIiwiYXJnIiwidHlwZSIsImNhbGwiLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwibWV0aG9kIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWNvcmQiLCJyZXN1bHQiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJzdGF0ZSIsIkVycm9yIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJkb25lIiwibWV0aG9kTmFtZSIsInVuZGVmaW5lZCIsInJldHVybiIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsInZhbCIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJjYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiX2luc3RhbmNlb2YiLCJsZWZ0IiwicmlnaHQiLCJoYXNJbnN0YW5jZSIsInNldHRlcnMiLCJfanNCcm93c2VyVXRpbEpzIiwiQnJvd3NlclV0aWwiLCJkZWZhdWx0IiwiX2pzQ29tbW9uVXRpbEpzIiwiQ29tbW9uVXRpbCIsIl9qcXVlcnkiLCIkIiwiX2pzQ29tbW9uVmVkYUpzIiwidmVkYSIsIl9qc0NvbW1vbkluZGl2aWR1YWxfbW9kZWxKcyIsIkluZGl2aWR1YWxNb2RlbCIsIl9qc0NvbW1vbkJhY2tlbmRKcyIsIkJhY2tlbmQiLCJleGVjdXRlIiwiX2V4cG9ydCIsInByZSIsImluZGl2aWR1YWwiLCJ0ZW1wbGF0ZSIsImNvbnRhaW5lciIsIm1vZGUiLCJleHRyYSIsImxvYWQiLCJ2ZWRhSW5mbyIsImhhc1ZhbHVlIiwiaWQiLCJhcHBvaW50bWVudCIsImNsaWNrIiwicmVtb3ZlIiwidXNlciIsInNlbGZPcmciLCJwcmVzZW50IiwidGFyZ2V0IiwicHJvbWlzZSIsInNwbGl0ZWQiLCJzcGxpdCIsInNlYXJjaFRleHQiLCJqb2luIiwidGFyZ2V0VG9DYXJkcyIsImV4cCIsImNvbnNvbGUiLCJsb2ciLCJwb3N0Iiwib3JnVHJlZSIsIm9yZ0NvbnRlbnQiLCJiYXNlUG9zIiwiYmFzZVdpZHRoIiwibWF4V2lkdGgiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImNsaWVudFgiLCJ3aWR0aCIsInBhcmVudCIsImNoYW5nZWRXaWR0aCIsImNzcyIsImxvYWRJbmRpY2F0b3IiLCJmaW5kRGVsZXRlZCIsInNlYXJjaE9yZ01vZGUiLCJpc0NvbnRhY3RNYW5hZ2VyIiwidXNlckRpc3BsYXllZEVsZW1lbnRzIiwicHJlZmVyZW5jZXMiLCJpc01lbWJlck9mIiwiaXNNZW1iZXIiLCJ0b2dnbGVDbGFzcyIsInNpYmxpbmdzIiwidG9nZ2xlIiwidXJpIiwiYXR0ciIsIm1vZGFsIiwic2hvd1NtYWxsTW9kYWwiLCJmaW5kIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInBhcmVudENvbnRhaW5lclRtcGwiLCJkcmF3Q2FyZHMiLCJmcm9tIiwibGltaXQiLCJzaG93IiwiaXNOZWVkQnRuTW9yZSIsImVtcHR5IiwidG1wbCIsImZhdmljb25JY29uIiwiYXNwZWN0IiwiaGFzQ2xhc3MiLCJhZGRWYWx1ZSIsInJlbW92ZVZhbHVlIiwic2F2ZSIsImdldENoaWxkcmVuIiwiY2hpbGRyZW5VcmlzIiwiZW5kSW5kZXgiLCJwcm9taXNlcyIsIm9mZiIsImhpZGUiLCJ0ZXh0IiwiZW1wdHlJbmRpdmlkIiwiYWxsIiwidGVtcGxhdGVzIiwiYXBwZW5kIiwiaGVpZ2h0IiwiTWF0aCIsIm1heCIsImluaXRpYWxTdHJ1Y3R1cmUiLCJvcmciLCJnZXRSb3dUZW1wbGF0ZSIsInJlbmRlcmVkIiwicm93Iiwib3BlblJvdyIsInJvd1RtcGwiLCJpY29uIiwicmVwbGFjZSIsInJlZnJlc2giLCJhbGxDaGlsZHJlbiIsInBhcmVudFVyaSIsInNlbGVjdFBhcnQiLCJ3aGVyZVBhcnQiLCJlbmRpbmdQYXJ0IiwicXVlcnlEZXBhcnRtZW50cyIsInF1ZXJ5QXBwb2ludG1lbnQiLCJxdWVyeVBvc2l0aW9ucyIsInF1ZXJ5U3RyaW5nQXJyYXkiLCJxdWVyeU9yZ0dyb3VwIiwicXVlcnlTdWJzaWRpYXJ5Iiwic29ydCIsInF1ZXJpZXMiLCJtYXAiLCJxdWVyeVN0cmluZyIsInF1ZXJ5IiwidGlja2V0Iiwic3FsIiwidG9wIiwicXVlcnlSZXN1bHRzIiwidHJlZUNoaWxkcmVucyIsInF1ZXJ5UmVzdWx0IiwiY291bnQiLCJjb25jYXQiLCJ1bmlxdWUiLCJkcmF3Q2hpbGRyZW4iLCJyb290RWxlbWVudCIsImNoaWxkcmVuQ29udGFpbmVyIiwiY2hpbGRyZW4iLCJyZWR1Y2UiLCJfcmVmIiwiX2NhbGxlZSIsImFjYyIsImN1ciIsImNoaWxkIiwiX2NhbGxlZSQiLCJfY29udGV4dDIiLCJfeCIsIl94MiIsIm9wZW5Gcm9tU3RydWN0dXJlIiwidGFyZ2V0VXJpIiwiaXNJblJvb3QiLCJ0YXJnZXRJbmRpdmlkIiwiZ2V0UGFyZW50VW5pdENoYWluIiwiY2hhaW4iLCJyb290T3JnIiwidW5zaGlmdCIsInJlZHVjZVJpZ2h0IiwicHIiLCJ0YXJnZXRSb3ciLCJwb3NpdGlvbiIsIm9mZnNldCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJwYXJlbnRVbml0IiwiYnVuZGxlIiwiZm9ybWF0VmFsdWUiLCJzZWFyY2hIZWxwZXJPYmoiLCJzZXRTZWFyY2hIZWxwZXJPYmpUb0RlZmF1bHQiLCJoYW5kbGVyZWQiLCJkZXAiLCJhcHAiLCJwaG9uZSIsImVtYWlsIiwicG9zIiwidHJpbSIsInJlc3VsdE9yZyIsInJlc3VsdERlcCIsInJlc3VsdEFwcCIsInJlc3VsdFBvcyIsInNlYXJjaFByb21pc2UiLCJxdWVyeVN0cmluZ0FyciIsImdlblF1ZXJ5U3RyaW5nQXJyYXkiLCJzZWFyY2hBbmRMb2FkIiwicmVzdWx0cyIsImZpbmRlZCIsInByZXNlbnRQcm9taXNlcyIsIm9yZ09iaiIsImRlcE9iaiIsImFwcE9iaiIsInBvc09iaiIsInByZXNlbnRTZWFyY2hSZXN1bHQiLCJmaW5kSW5QYXJlbnRPcmciLCJiYXNpY1doZXJlUGFydCIsIm9yZ0pvaW5QYXJ0IiwiY29uZGl0aW9uRm9yT3JnIiwib3JnYW5pemF0aW9uUXVlcnkiLCJkZXBhcnRtZW50UXVlcnkiLCJhcHBvaW50bWVudFF1ZXJ5Iiwic3BlY2lhbFBvc2l0aW9uUXVlcnkiLCJpc0NvbW1NZWFuSm9pbkFkZGVkIiwicXVlcnlQYXJ0cyIsInFQYXJ0cyIsInNUZXh0IiwidG9Mb3dlckNhc2UiLCJpc1Bob25lU2VhcmNoIiwibWF0Y2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJpc0VtYWlsU2VhcmNoIiwicGFydCIsIm9ialR5cGUiLCJpdGVtcyIsIml0ZW0iLCJlc3RpbWF0ZWQiLCJzZWFyY2hPYmoiLCJzZWFyY2hSZXN1bHQiLCJsb2FkUHJvbWlzZXMiLCJjaGlsZHJlbkNvdW50IiwiY2hldnJvbiIsImluaXRQb3BvdmVyIiwiY2xvc2VzdCIsImNudHIiLCJjdXJUbXBsIiwic3R5bGUiLCJtYXJnaW5MZWZ0Iiwib3BlbmVkUG9wb3ZlciIsInN0b3BQcm9wYWdhdGlvbiIsImNvbnRlbnQiLCJwb3BvdmVyIiwidHJpZ2dlciIsInBsYWNlbWVudCIsImh0bWwiLCJzZWN0aW9uIiwibG9hZGVkIiwicm93SW5UcmVlIiwiZGF0YSIsInNob3dNb2RhbCIsImN0cmxFbnRlckhhbmRsZXIiLCJrZXlDb2RlIiwid2luZG93Iiwib25lIiwiZHJvcFJlc3VsdFRhYmxlcyJdLCJzb3VyY2VzIjpbIi4uLy4uL29udG9sb2d5L2dlbmVyaWMtZnVuY3Rpb24vdGVtcGxhdGVzL3Ytc19Db250YWN0c1N0cnVjdHVyZVRlbXBsYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCcm93c2VyVXRpbCBmcm9tICcvanMvYnJvd3Nlci91dGlsLmpzJztcbmltcG9ydCBDb21tb25VdGlsIGZyb20gJy9qcy9jb21tb24vdXRpbC5qcyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHZlZGEgZnJvbSAnL2pzL2NvbW1vbi92ZWRhLmpzJztcbmltcG9ydCBJbmRpdmlkdWFsTW9kZWwgZnJvbSAnL2pzL2NvbW1vbi9pbmRpdmlkdWFsX21vZGVsLmpzJztcbmltcG9ydCBCYWNrZW5kIGZyb20gJy9qcy9jb21tb24vYmFja2VuZC5qcyc7XG5cbmV4cG9ydCBjb25zdCBwcmUgPSBmdW5jdGlvbiAoaW5kaXZpZHVhbCwgdGVtcGxhdGUsIGNvbnRhaW5lciwgbW9kZSwgZXh0cmEpIHtcbiAgdGVtcGxhdGUgPSAkKHRlbXBsYXRlKTtcbiAgY29udGFpbmVyID0gJChjb250YWluZXIpO1xuXG4gIHJldHVybiBuZXcgSW5kaXZpZHVhbE1vZGVsKCd2LXM6dmVkYUluZm8nKVxuICAgIC5sb2FkKClcbiAgICAudGhlbihmdW5jdGlvbiAodmVkYUluZm8pIHtcbiAgICAgIGlmICh2ZWRhSW5mby5oYXNWYWx1ZSgndi1zOnRlbmFudCcpICYmIHZlZGFJbmZvWyd2LXM6dGVuYW50J11bMF0uaWQgIT0gdmVkYS5hcHBvaW50bWVudFsndi1zOnBhcmVudE9yZ2FuaXphdGlvbiddWzBdLmlkKSB7XG4gICAgICAgIGluZGl2aWR1YWxbJ3YtczptYW5hZ2VkT3JnYW5pemF0aW9uJ10gPSB2ZWRhSW5mb1sndi1zOnRlbmFudCddO1xuICAgICAgICAkKCcjdGVuYW50JywgdGVtcGxhdGUpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpbmRpdmlkdWFsWyd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbiddID0gdmVkYUluZm9bJ3Ytczp0ZW5hbnQnXTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKCcjdGVuYW50JywgdGVtcGxhdGUpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodmVkYS51c2VyICYmIHZlZGEudXNlci5oYXNWYWx1ZSgndi1zOnBhcmVudE9yZ2FuaXphdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IHNlbGZPcmcgPSB2ZWRhLnVzZXJbJ3YtczpwYXJlbnRPcmdhbml6YXRpb24nXVswXTtcbiAgICAgICAgaWYgKCFpbmRpdmlkdWFsLmhhc1ZhbHVlKCd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbicpKSB7XG4gICAgICAgICAgaW5kaXZpZHVhbFsndi1zOm1hbmFnZWRPcmdhbml6YXRpb24nXSA9IFtzZWxmT3JnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZk9yZy5wcmVzZW50KCQoJyNzZWxmT3JnIHNwYW4nLCB0ZW1wbGF0ZSksICd2LXVpOkxhYmVsVGVtcGxhdGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoJyNzZWxmT3JnJywgdGVtcGxhdGUpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGV4dHJhICE9IHVuZGVmaW5lZCAmJiBleHRyYS50YXJnZXQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBleHRyYS50YXJnZXRbMF0gaW5zdGFuY2VvZiBJbmRpdmlkdWFsTW9kZWwgPyBQcm9taXNlLnJlc29sdmUoZXh0cmEudGFyZ2V0WzBdKSA6IG5ldyB2ZWRhLkluZGl2aWR1YWxNb2RlbChleHRyYS50YXJnZXRbMF0pLmxvYWQoKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihhcHBvaW50bWVudCkge1xuICAgICAgICAgICAgY29uc3Qgc3BsaXRlZCA9IGFwcG9pbnRtZW50WydyZGZzOmxhYmVsJ11bMF0uc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaFRleHQgPSBzcGxpdGVkLmxlbmd0aCA+IDEgPyBbc3BsaXRlZFswXSwgc3BsaXRlZFsxXV0uam9pbignICcpIDogc3BsaXRlZFswXTtcbiAgICAgICAgICAgICQoJyNzZWFyY2hUZXh0IGlucHV0JywgdGVtcGxhdGUpLnZhbChzZWFyY2hUZXh0KTtcbiAgICAgICAgICAgIGluZGl2aWR1YWwudGFyZ2V0VG9DYXJkcyA9IGFwcG9pbnRtZW50Wyd2LXM6cGFyZW50VW5pdCddWzBdLmlkO1xuICAgICAgICAgICAgaW5kaXZpZHVhbFsndi1zOm1hbmFnZWRPcmdhbml6YXRpb24nXSA9IGFwcG9pbnRtZW50Wyd2LXM6cGFyZW50T3JnYW5pemF0aW9uJ107XG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXhwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhleHApO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHBvc3QgPSBmdW5jdGlvbiAoaW5kaXZpZHVhbCwgdGVtcGxhdGUsIGNvbnRhaW5lciwgbW9kZSwgZXh0cmEpIHtcbiAgdGVtcGxhdGUgPSAkKHRlbXBsYXRlKTtcbiAgY29udGFpbmVyID0gJChjb250YWluZXIpO1xuXG4gIGNvbnN0IG9yZ1RyZWUgPSAkKCcjb3JnVHJlZScsIHRlbXBsYXRlKTtcbiAgY29uc3Qgb3JnQ29udGVudCA9ICQoJyNvcmdDb250ZW50JywgdGVtcGxhdGUpO1xuXG4gIGxldCBiYXNlUG9zO1xuICBsZXQgYmFzZVdpZHRoO1xuICBsZXQgbWF4V2lkdGg7XG4gICQoJyNyZXNpemVMaW5lJywgdGVtcGxhdGUpLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBiYXNlUG9zID0gZS5jbGllbnRYO1xuICAgIGJhc2VXaWR0aCA9IG9yZ1RyZWUud2lkdGgoKTtcbiAgICBtYXhXaWR0aCA9IG9yZ1RyZWUucGFyZW50KCkud2lkdGgoKTtcbiAgfSk7XG5cbiAgdGVtcGxhdGUub24oJ21vdXNldXAnLCBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBiYXNlUG9zID0gdW5kZWZpbmVkO1xuICB9KTtcblxuICB0ZW1wbGF0ZS5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoYmFzZVBvcyA9PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgY2hhbmdlZFdpZHRoID0gYmFzZVdpZHRoICsgKGUuY2xpZW50WCAtIGJhc2VQb3MpO1xuICAgIGlmIChjaGFuZ2VkV2lkdGggPCAyMDApIHtcbiAgICAgIG9yZ1RyZWUuY3NzKCd3aWR0aCcsIDIwMCk7XG4gICAgICBvcmdDb250ZW50LmNzcygnd2lkdGgnLCBtYXhXaWR0aCAtIDIwMCk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2VkV2lkdGggPiA2MDApIHtcbiAgICAgIG9yZ1RyZWUuY3NzKCd3aWR0aCcsIDYwMCk7XG4gICAgICBvcmdDb250ZW50LmNzcygnd2lkdGgnLCBtYXhXaWR0aCAtIDYwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZ1RyZWUuY3NzKCd3aWR0aCcsIGNoYW5nZWRXaWR0aCk7XG4gICAgICBvcmdDb250ZW50LmNzcygnd2lkdGgnLCBtYXhXaWR0aCAtIGNoYW5nZWRXaWR0aCk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBsb2FkSW5kaWNhdG9yID0gJCgnI2xvYWQtaW5kaWNhdG9yJyk7XG4gIGNvbnN0IGZpbmREZWxldGVkID0gZmFsc2U7XG4gIGxldCBzZWFyY2hPcmdNb2RlID0gaW5kaXZpZHVhbC5oYXNWYWx1ZSgndi1zOm1hbmFnZWRPcmdhbml6YXRpb24nKSA/ICd0YXJnZXRPcmcnIDogJ2FsbE9yZyc7XG4gIGxldCBpc0NvbnRhY3RNYW5hZ2VyID0gZmFsc2U7XG4gIGxldCB1c2VyRGlzcGxheWVkRWxlbWVudHM7XG4gIGlmICh2ZWRhLnVzZXIucHJlZmVyZW5jZXMuaGFzVmFsdWUoJ3YtdWk6ZGlzcGxheWVkRWxlbWVudHMnKSkge1xuICAgIHVzZXJEaXNwbGF5ZWRFbGVtZW50cyA9IHZlZGEudXNlci5wcmVmZXJlbmNlc1sndi11aTpkaXNwbGF5ZWRFbGVtZW50cyddWzBdO1xuICB9IGVsc2Uge1xuICAgIHVzZXJEaXNwbGF5ZWRFbGVtZW50cyA9IDEwO1xuICB9XG5cbiAgdmVkYS51c2VyLmlzTWVtYmVyT2YoJ2NmZzpDb250YWN0TWFuYWdlckdyb3VwJykudGhlbihmdW5jdGlvbiAoaXNNZW1iZXIpIHtcbiAgICBpc0NvbnRhY3RNYW5hZ2VyID0gaXNNZW1iZXIgfHwgdmVkYS5hcHBvaW50bWVudC5pZCA9PSAnY2ZnOkFkbWluaXN0cmF0b3JBcHBvaW50bWVudCc7XG4gIH0pO1xuXG4gICQoJyNzZWxmT3JnJywgdGVtcGxhdGUpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpbmRpdmlkdWFsWyd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbiddID0gdmVkYS51c2VyWyd2LXM6cGFyZW50T3JnYW5pemF0aW9uJ107XG4gIH0pO1xuXG4gICQoJ3NlY3Rpb24gLnNlY3Rpb24taGVhZGVyJywgdGVtcGxhdGUpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzZWxmID0gJCh0aGlzKTtcbiAgICAkKCdzcGFuLmdseXBoaWNvbicsIHNlbGYpLnRvZ2dsZUNsYXNzKCdnbHlwaGljb24tY2hldnJvbi1yaWdodCBnbHlwaGljb24tY2hldnJvbi1kb3duJyk7XG4gICAgc2VsZi5zaWJsaW5ncygpLnRvZ2dsZSgpO1xuICB9KTtcblxuICB0ZW1wbGF0ZS5vbignY2xpY2snLCAnLmltZy10aHVtYm5haWwnLCBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB1cmkgPSAkKHRoaXMpLmF0dHIoJ3Jlc291cmNlJyk7XG4gICAgY29uc3QgbW9kYWwgPSBCcm93c2VyVXRpbC5zaG93U21hbGxNb2RhbChuZXcgSW5kaXZpZHVhbE1vZGVsKHVyaSksICd2LXVpOkltYWdlVGVtcGxhdGUnKTtcbiAgICBtb2RhbC5maW5kKCcubW9kYWwtZGlhbG9nJykucmVtb3ZlQ2xhc3MoJ21vZGFsLWxnJykuYWRkQ2xhc3MoJ21vZGFsLXNtJyk7XG4gIH0pO1xuXG4gIGNvbnN0IHBhcmVudENvbnRhaW5lclRtcGwgPVxuICAgICc8ZGl2IGNsYXNzPVwicm93XCI+JyArXG4gICAgJzxkaXYgY2xhc3M9XCJjb2wtbWQtNVwiPicgK1xuICAgICc8ZGl2IGNsYXNzPVwibWFyZ2luLXNtLWhcIj48c3Ryb25nIGFib3V0PVwiQFwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Ryb25nPjwvZGl2PicgK1xuICAgICc8ZGl2IGNsYXNzPVwibWFyZ2luLXNtLWhcIj48c21hbGw+JyArXG4gICAgJzxzcGFuIGFib3V0PVwidi1mczpjdXJzb3JcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+JyArXG4gICAgJzxzcGFuIGNsYXNzPVwibWFyZ2luLXNtLWggYmFkZ2VcIj48L3NwYW4+Jm5ic3A7Jm5ic3A7JyArXG4gICAgJzxzcGFuIGFib3V0PVwidi1mczplc3RpbWF0ZWRcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+JyArXG4gICAgJzxzcGFuIGNsYXNzPVwibWFyZ2luLXNtLWggYmFkZ2VcIj48L3NwYW4+JyArXG4gICAgJzwvc21hbGw+PC9kaXY+JyArXG4gICAgJzwvZGl2PicgK1xuICAgICc8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIiBhYm91dD1cIkBcIiByZWw9XCJ2LXM6aGFzQ29tbXVuaWNhdGlvbk1lYW5cIj4nICtcbiAgICAnPGRpdj4nICtcbiAgICAnPHN0cm9uZyBjbGFzcz1cIm1hcmdpbi1zbS1oXCIgYWJvdXQ9XCJAXCIgcmVsPVwidi1zOmhhc0NvbW11bmljYXRpb25NZWFuQ2hhbm5lbFwiIGRhdGEtdGVtcGxhdGU9XCJ2LXVpOkxhYmVsVGVtcGxhdGVcIj48L3N0cm9uZz4nICtcbiAgICAnPHNwYW4gYWJvdXQ9XCJAXCIgcHJvcGVydHk9XCJ2LXM6ZGVzY3JpcHRpb25cIj48L3NwYW4+ICAnICtcbiAgICAnPC9kaXY+JyArXG4gICAgJzwvZGl2PicgK1xuICAgICc8ZGl2IGNsYXNzPVwiY29sLW1kLTFcIj4nICtcbiAgICAnPHNwYW4gY2xhc3M9XCJoaWRkZW4gZmF2aWNvbkljb24gcG9pbnRlciBmYSBmYS1sZyBmYS1zdGFyLW9cIj48L3NwYW4+JyArXG4gICAgJzxzcGFuIHN0eWxlPVwiZmxvYXQ6cmlnaHRcIiBhYm91dD1cIkBcIiBjbGFzcz1cInpvb20gaGlkZGVuXCIgZGF0YS10ZW1wbGF0ZT1cInYtdWk6SWNvbk1vZGFsVGVtcGxhdGVcIj48L3NwYW4+JyArXG4gICAgJzwvZGl2PicgK1xuICAgICc8L2Rpdj4nO1xuXG4gIGZ1bmN0aW9uIGRyYXdDYXJkcyAocGFyZW50LCBmcm9tLCBsaW1pdCkge1xuICAgIGxvYWRJbmRpY2F0b3Iuc2hvdygpO1xuICAgIGxldCBpc05lZWRCdG5Nb3JlID0gZmFsc2U7XG4gICAgaWYgKGxpbWl0ID09IHVuZGVmaW5lZCkgbGltaXQgPSB1c2VyRGlzcGxheWVkRWxlbWVudHM7XG4gICAgaWYgKGZyb20gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAkKCd0Ym9keScsIG9yZ0NvbnRlbnQpLmVtcHR5KCk7XG4gICAgICBvcmdDb250ZW50LnNob3coKTtcbiAgICAgIGZyb20gPSAwO1xuICAgIH1cbiAgICAkKCcjcGFyZW50Q29udGFpbmVyJywgb3JnQ29udGVudCkuZW1wdHkoKTtcblxuICAgIC8vIHBhcmVudCBhbHJlYWR5IGhhcyBsaXN0IG9mIGFsbCBjaGlsZHJlblxuICAgIHJldHVybiBwYXJlbnRcbiAgICAgIC5wcmVzZW50KCQoJyNwYXJlbnRDb250YWluZXInLCBvcmdDb250ZW50KSwgcGFyZW50Q29udGFpbmVyVG1wbClcbiAgICAgIC50aGVuKGZ1bmN0aW9uICh0bXBsKSB7XG4gICAgICAgIGlmIChwYXJlbnQuaGFzVmFsdWUoJ3YtczpoYXNDb21tdW5pY2F0aW9uTWVhbicpKSB7XG4gICAgICAgICAgY29uc3QgZmF2aWNvbkljb24gPSAkKCdzcGFuLmZhdmljb25JY29uJywgdG1wbCk7XG4gICAgICAgICAgZmF2aWNvbkljb24ucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgIGlmICh2ZWRhLnVzZXIuYXNwZWN0Lmhhc1ZhbHVlKCd2LXM6aGFzRmF2b3JpdGVDb250YWN0JywgcGFyZW50KSkge1xuICAgICAgICAgICAgZmF2aWNvbkljb24udG9nZ2xlQ2xhc3MoJ2ZhLXN0YXItbyBmYS1zdGFyJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZhdmljb25JY29uLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChmYXZpY29uSWNvbi5oYXNDbGFzcygnZmEtc3Rhci1vJykpIHtcbiAgICAgICAgICAgICAgdmVkYS51c2VyLmFzcGVjdC5hZGRWYWx1ZSgndi1zOmhhc0Zhdm9yaXRlQ29udGFjdCcsIHBhcmVudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZhdmljb25JY29uLmhhc0NsYXNzKCdmYS1zdGFyJykpIHtcbiAgICAgICAgICAgICAgdmVkYS51c2VyLmFzcGVjdC5yZW1vdmVWYWx1ZSgndi1zOmhhc0Zhdm9yaXRlQ29udGFjdCcsIHBhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2ZWRhLnVzZXIuYXNwZWN0LnNhdmUoKTtcbiAgICAgICAgICAgIGZhdmljb25JY29uLnRvZ2dsZUNsYXNzKCdmYS1zdGFyLW8gZmEtc3RhcicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NvbnRhY3RNYW5hZ2VyKSAkKCcuem9vbS5oaWRkZW4nLCB0bXBsKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgIHJldHVybiBnZXRDaGlsZHJlbihwYXJlbnQpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChjaGlsZHJlblVyaXMpIHtcbiAgICAgICAgY29uc3QgZW5kSW5kZXggPSBjaGlsZHJlblVyaXMubGVuZ3RoID4gZnJvbSArIGxpbWl0ID8gZnJvbSArIGxpbWl0IDogY2hpbGRyZW5VcmlzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdXJpID0gY2hpbGRyZW5VcmlzW2ldO1xuICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IEluZGl2aWR1YWxNb2RlbCh1cmkpLnByZXNlbnQoJCgnPGRpdj48L2Rpdj4nKSwgJ3YtczpDb250YWN0Q2FyZFRlbXBsYXRlJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRJbmRleCAhPSBjaGlsZHJlblVyaXMubGVuZ3RoKSB7XG4gICAgICAgICAgaXNOZWVkQnRuTW9yZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmVlZEJ0bk1vcmUpIHtcbiAgICAgICAgICAkKCcucmVzdWx0LWluZm8tY29udGFpbmVyJywgb3JnQ29udGVudCkuc2hvdygpO1xuICAgICAgICAgICQoJy5yZXN1bHQtaW5mby1jb250YWluZXIgI3Nob3dNb3JlQ2FyZHMnLCBvcmdDb250ZW50KS5vZmYoJ2NsaWNrJyk7XG4gICAgICAgICAgJCgnLnJlc3VsdC1pbmZvLWNvbnRhaW5lciAjc2hvd01vcmVDYXJkcycsIG9yZ0NvbnRlbnQpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRyYXdDYXJkcyhwYXJlbnQsIGZyb20gKyBsaW1pdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJCgnLnJlc3VsdC1pbmZvLWNvbnRhaW5lciAjc2hvd0FsbENhcmRzJywgb3JnQ29udGVudCkub2ZmKCdjbGljaycpO1xuICAgICAgICAgICQoJy5yZXN1bHQtaW5mby1jb250YWluZXIgI3Nob3dBbGxDYXJkcycsIG9yZ0NvbnRlbnQpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRyYXdDYXJkcyhwYXJlbnQsIGZyb20gKyBsaW1pdCwgY2hpbGRyZW5VcmlzLmxlbmd0aCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCgnLnJlc3VsdC1pbmZvLWNvbnRhaW5lcicsIG9yZ0NvbnRlbnQpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICAkKCdzcGFuLmJhZGdlOm50aC1jaGlsZCg0KScsIG9yZ0NvbnRlbnQpLnRleHQoY2hpbGRyZW5VcmlzLmxlbmd0aCk7XG4gICAgICAgICQoJ3NwYW4uYmFkZ2U6bnRoLWNoaWxkKDIpJywgb3JnQ29udGVudCkudGV4dChlbmRJbmRleCk7XG4gICAgICAgIGlmIChwcm9taXNlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIGNvbnN0IGVtcHR5SW5kaXZpZCA9IG5ldyBJbmRpdmlkdWFsTW9kZWwoJ3YtZnM6RW1wdHknKTtcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKGVtcHR5SW5kaXZpZC5wcmVzZW50KCQoJzxkaXY+PC9kaXY+JyksICd2LXM6Q29udGFjdENhcmRUZW1wbGF0ZScpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZW1wbGF0ZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wbGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAkKCcuaGlkZUluU3RydWN0dXJlJywgdGVtcGxhdGVzW2ldKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKCdjb2wtbWQtOCcpO1xuICAgICAgICAgICQoJy5oaWRlSW5TdHJ1Y3R1cmUnLCB0ZW1wbGF0ZXNbaV0pLnJlbW92ZSgpO1xuICAgICAgICAgICQoJ3Rib2R5Jywgb3JnQ29udGVudCkuYXBwZW5kKHRlbXBsYXRlc1tpXSk7XG4gICAgICAgICAgaWYgKGlzQ29udGFjdE1hbmFnZXIpICQoJy56b29tLmhpZGRlbicsIHRlbXBsYXRlc1tpXSkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICB9XG4gICAgICAgICQoJyNyZXNpemVMaW5lJywgdGVtcGxhdGUpLmhlaWdodChNYXRoLm1heChvcmdDb250ZW50LmhlaWdodCgpLCBvcmdUcmVlLmhlaWdodCgpKSk7XG4gICAgICAgIGxvYWRJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICByZXR1cm4gb3JnQ29udGVudDtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbFN0cnVjdHVyZSAob3JnKSB7XG4gICAgb3JnVHJlZS5lbXB0eSgpO1xuICAgIG9yZ0NvbnRlbnQuaGlkZSgpO1xuICAgIGlmIChvcmcgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcmcgPSBpbmRpdmlkdWFsLmhhc1ZhbHVlKCd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbicpID8gaW5kaXZpZHVhbFsndi1zOm1hbmFnZWRPcmdhbml6YXRpb24nXVswXSA6IG51bGw7XG4gICAgfVxuICAgIGlmIChvcmcpIHtcbiAgICAgICQoJ3NlY3Rpb24jT3JnU3RydWN0dXJlJykuc2hvdygpO1xuICAgICAgcmV0dXJuIGdldFJvd1RlbXBsYXRlKG9yZylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRtcGwpIHtcbiAgICAgICAgICByZXR1cm4gb3JnLnByZXNlbnQob3JnVHJlZSwgdG1wbCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZW5kZXJlZCkge1xuICAgICAgICAgIGNvbnN0IHJvdyA9ICQoJyNvcmdUcmVlIGRpdi52YWx1ZS1yb3cnLCB0ZW1wbGF0ZSk7XG4gICAgICAgICAgcmV0dXJuIG9wZW5Sb3cocm93KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGRyYXdDYXJkcyhvcmcpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKCdzZWN0aW9uI09yZ1N0cnVjdHVyZScpLmhpZGUoKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJvd1RlbXBsYXRlICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5sb2FkKCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGNvbnN0IHJvd1RtcGwgPVxuICAgICAgICBcIjxkaXYgY2xhc3M9J3ZhbHVlLXJvdyc+XCIgK1xuICAgICAgICBcIjxkaXYgY2xhc3M9J2l0ZW0nPlwiICtcbiAgICAgICAgXCI8YSBocmVmPScjJyBjbGFzcz0nZXhwYW5kIGdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodCc+PC9hPlwiICtcbiAgICAgICAgXCI8c3BhbiBzdHlsZT0nbWFyZ2luOjAgNXB4OycgY2xhc3M9J2ZhIGZhLWxnIHtpY29ufSc+PC9zcGFuPlwiICtcbiAgICAgICAgXCI8c3BhbiBhYm91dD0nQCcgZGF0YS10ZW1wbGF0ZT0ndi11aTpMYWJlbFRlbXBsYXRlJz48L3NwYW4+XCIgK1xuICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8L2Rpdj4nO1xuICAgICAgbGV0IGljb24gPSAnJztcbiAgICAgIGlmICh2YWx1ZS5oYXNWYWx1ZSgncmRmOnR5cGUnLCAndi1zOkFwcG9pbnRtZW50JykgfHwgdmFsdWUuaGFzVmFsdWUoJ3JkZjp0eXBlJywgJ3YtczpQb3NpdGlvbicpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmhhc1ZhbHVlKCdyZGY6dHlwZScsICd2LXM6T3JnYW5pemF0aW9uJykpIHtcbiAgICAgICAgaWNvbiA9ICdmYS1zaXRlbWFwJztcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5oYXNWYWx1ZSgncmRmOnR5cGUnLCAndi1zOkRlcGFydG1lbnQnKSB8fCB2YWx1ZS5oYXNWYWx1ZSgncmRmOnR5cGUnLCAndi1zOk9yZ0dyb3VwJykpIHtcbiAgICAgICAgaWNvbiA9ICdmYS1mb2xkZXItbyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm93VG1wbC5yZXBsYWNlKCd7aWNvbn0nLCBpY29uKTtcbiAgICAgIC8vIGVsc2Uge1xuICAgICAgLy8gICByZXR1cm4gZ2V0Q2hpbGRyZW4odmFsdWUsIGZhbHNlKS50aGVuKGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgICAgLy8gICAgIGlmICggdmFsdWUudHJlZUNoaWxkcmVucyA+IDAgKSB7XG4gICAgICAvLyAgICAgICBleHBhbmQgPSBcIjxhIGhyZWY9JyMnIGNsYXNzPSdleHBhbmQgZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0Jz48L2E+XCI7XG4gICAgICAvLyAgICAgfVxuICAgICAgLy8gICB9KTtcbiAgICAgIC8vIH1cbiAgICAgIC8vIHJldHVybiByb3dUbXBsLnJlcGxhY2UoXCJ7aWNvbn1cIiwgaWNvbikucmVwbGFjZShcIntleHBhbmR9XCIsIGV4cGFuZCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDaGlsZHJlbiAocGFyZW50LCByZWZyZXNoLCBtb2RlKSB7XG4gICAgaWYgKHBhcmVudC5hbGxDaGlsZHJlbiAmJiAhcmVmcmVzaCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwYXJlbnQuYWxsQ2hpbGRyZW4pO1xuICAgIH1cbiAgICBsZXQgY2hpbGRyZW5VcmlzID0gW107XG4gICAgaWYgKHBhcmVudC5oYXNWYWx1ZSgncmRmOnR5cGUnLCAndi1zOkFwcG9pbnRtZW50JykpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cbiAgICBsb2FkSW5kaWNhdG9yLnNob3coKTtcbiAgICBjb25zdCBwYXJlbnRVcmkgPSBwYXJlbnQuaWQ7XG5cbiAgICBjb25zdCBzZWxlY3RQYXJ0ID0gJ1NFTEVDVCBESVNUSU5DVCBpZCAnO1xuICAgIGNvbnN0IHdoZXJlUGFydCA9IFwiV0hFUkUgdl9zX3BhcmVudFVuaXRfc3RyPVsnXCIgKyBwYXJlbnRVcmkgKyBcIiddIEFORCB2X3NfZGVsZXRlZF9pbnQ9WzBdXCI7XG4gICAgY29uc3QgZW5kaW5nUGFydCA9IFwiIGdyb3VwIGJ5IGlkLCByZGZzX2xhYmVsX3N0ciBoYXZpbmcgc3VtKHNpZ24pID4gMCBvcmRlciBieSBhcnJheVNvcnQoeCAtPiBlbmRzV2l0aChsb3dlclVURjgoeCksICdAZW4nKSwgcmRmc19sYWJlbF9zdHIpIGFzY1wiO1xuICAgIGNvbnN0IHF1ZXJ5RGVwYXJ0bWVudHMgPSBzZWxlY3RQYXJ0ICsgJ0ZST00gdmVkYV90dC5gdi1zOkRlcGFydG1lbnRgIEZJTkFMICcgKyB3aGVyZVBhcnQgKyBlbmRpbmdQYXJ0O1xuICAgIGxldCBxdWVyeUFwcG9pbnRtZW50ID1cbiAgICAgIHNlbGVjdFBhcnQgK1xuICAgICAgJ0ZST00gdmVkYV90dC5gdi1zOkFwcG9pbnRtZW50YCBGSU5BTCAnICtcbiAgICAgIFwiV0hFUkUgdl9zX3BhcmVudFVuaXRfc3RyPVsnXCIgK1xuICAgICAgcGFyZW50VXJpICtcbiAgICAgIFwiJ10gQU5EIHZfc19kZWxldGVkX2ludD1bMF0gQU5EIHZfc19vZmZpY2lhbF9pbnQ9WzFdIEFORCBOT1QobG93ZXJVVEY4KGFycmF5U3RyaW5nQ29uY2F0KHZfc19vcmlnaW5fc3RyLCAnJykpIExJS0UgJyVncm91cCUnKVwiICtcbiAgICAgIGVuZGluZ1BhcnQ7XG4gICAgbGV0IHF1ZXJ5UG9zaXRpb25zID1cbiAgICAgIHNlbGVjdFBhcnQgK1xuICAgICAgJ0ZST00gdmVkYV90dC5gdi1zOlBvc2l0aW9uYCBGSU5BTCAnICtcbiAgICAgIFwiV0hFUkUgdl9zX3BhcmVudFVuaXRfc3RyPVsnXCIgK1xuICAgICAgcGFyZW50VXJpICtcbiAgICAgIFwiJ10gQU5EIHZfc19kZWxldGVkX2ludD1bMF0gQU5EIGxvd2VyVVRGOChhcnJheVN0cmluZ0NvbmNhdCh2X3Nfb3JpZ2luX3N0ciwgJyAnKSkgTElLRSAnJWdyb3VwJSdcIiArXG4gICAgICBlbmRpbmdQYXJ0O1xuICAgIGlmIChtb2RlID09ICdub3RBcHBvaW50bWVudCcpIHtcbiAgICAgIHF1ZXJ5QXBwb2ludG1lbnQgPSBudWxsO1xuICAgICAgcXVlcnlQb3NpdGlvbnMgPSBudWxsO1xuICAgIH1cblxuICAgIGxldCBxdWVyeVN0cmluZ0FycmF5ID0gW107XG4gICAgaWYgKHBhcmVudC5oYXNWYWx1ZSgncmRmOnR5cGUnLCAndi1zOkRlcGFydG1lbnQnKSB8fCBwYXJlbnQuaGFzVmFsdWUoJ3JkZjp0eXBlJywgJ3YtczpTdWJzaWRpYXJ5JykpIHtcbiAgICAgIHF1ZXJ5U3RyaW5nQXJyYXkgPSBbcXVlcnlEZXBhcnRtZW50cywgcXVlcnlQb3NpdGlvbnMsIHF1ZXJ5QXBwb2ludG1lbnRdO1xuICAgIH0gZWxzZSBpZiAocGFyZW50Lmhhc1ZhbHVlKCdyZGY6dHlwZScsICd2LXM6T3JnR3JvdXAnKSkge1xuICAgICAgY29uc3QgcXVlcnlPcmdHcm91cCA9IHNlbGVjdFBhcnQgKyAnRlJPTSB2ZWRhX3R0LmB2LXM6T3JnR3JvdXBgICcgKyB3aGVyZVBhcnQgKyBlbmRpbmdQYXJ0O1xuICAgICAgcXVlcnlTdHJpbmdBcnJheSA9IFtxdWVyeU9yZ0dyb3VwLCBxdWVyeVBvc2l0aW9ucywgcXVlcnlBcHBvaW50bWVudF07XG4gICAgfSBlbHNlIGlmIChwYXJlbnQuaGFzVmFsdWUoJ3JkZjp0eXBlJywgJ3YtczpPcmdhbml6YXRpb24nKSkge1xuICAgICAgY29uc3QgcXVlcnlPcmdHcm91cCA9IHNlbGVjdFBhcnQgKyAnRlJPTSB2ZWRhX3R0LmB2LXM6T3JnR3JvdXBgICcgKyB3aGVyZVBhcnQgKyBlbmRpbmdQYXJ0O1xuICAgICAgY29uc3QgcXVlcnlTdWJzaWRpYXJ5ID0gc2VsZWN0UGFydCArIFwiRlJPTSB2ZWRhX3R0LmB2LXM6U3Vic2lkaWFyeWAgV0hFUkUgdl9zX3BhcmVudF9zdHI9WydcIiArIHBhcmVudFVyaSArIFwiJ10gQU5EIHZfc19kZWxldGVkX2ludD1bMF1cIiArIGVuZGluZ1BhcnQ7XG4gICAgICBxdWVyeVN0cmluZ0FycmF5ID0gW3F1ZXJ5U3Vic2lkaWFyeSwgcXVlcnlEZXBhcnRtZW50cywgcXVlcnlPcmdHcm91cCwgcXVlcnlQb3NpdGlvbnMsIHF1ZXJ5QXBwb2ludG1lbnRdO1xuICAgIH1cblxuICAgIGNvbnN0IHNvcnQgPSBcIidyZGZzOmxhYmVsX3J1JyBhc2NcIjtcbiAgICBjb25zdCBxdWVyaWVzID0gcXVlcnlTdHJpbmdBcnJheS5tYXAoZnVuY3Rpb24gKHF1ZXJ5U3RyaW5nKSB7XG4gICAgICBpZiAocXVlcnlTdHJpbmcgPT0gbnVsbCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7cmVzdWx0OiBbXX0pO1xuICAgICAgcmV0dXJuIEJhY2tlbmQucXVlcnkoe1xuICAgICAgICB0aWNrZXQ6IHZlZGEudGlja2V0LFxuICAgICAgICBzcWw6IHF1ZXJ5U3RyaW5nLFxuICAgICAgICBzb3J0OiBzb3J0LFxuICAgICAgICBmcm9tOiAwLFxuICAgICAgICBsaW1pdDogMTAwMDAsXG4gICAgICAgIHRvcDogMzAwLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHF1ZXJpZXMpLnRoZW4oZnVuY3Rpb24gKHF1ZXJ5UmVzdWx0cykge1xuICAgICAgcGFyZW50LnRyZWVDaGlsZHJlbnMgPSAwO1xuICAgICAgcXVlcnlSZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5UmVzdWx0LCBpKSB7XG4gICAgICAgIC8vIDIgbGFzdCBpdGVtcyBub3QgY291bnRpbmcgaW4gY2hpbGRyZW5zIChhcHBvaW50bWVudHMsIHBvc2l0aW9ucylcbiAgICAgICAgaWYgKGkgKyAyIDwgcXVlcnlSZXN1bHRzLmxlbmd0aCkgcGFyZW50LnRyZWVDaGlsZHJlbnMgKz0gcXVlcnlSZXN1bHQuY291bnQ7XG4gICAgICAgIGNoaWxkcmVuVXJpcyA9IGNoaWxkcmVuVXJpcy5jb25jYXQocXVlcnlSZXN1bHQucmVzdWx0KTtcbiAgICAgIH0pO1xuICAgICAgY2hpbGRyZW5VcmlzID0gQ29tbW9uVXRpbC51bmlxdWUoY2hpbGRyZW5VcmlzKTtcbiAgICAgIHBhcmVudC5hbGxDaGlsZHJlbiA9IGNoaWxkcmVuVXJpcztcbiAgICAgIGxvYWRJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuVXJpcztcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdDaGlsZHJlbiAocGFyZW50VXJpLCByb290RWxlbWVudCkge1xuICAgIGNvbnN0IGNoaWxkcmVuQ29udGFpbmVyID0gcm9vdEVsZW1lbnQuY2hpbGRyZW4oJy5jaGlsZHJlbicpO1xuICAgIGlmIChjaGlsZHJlbkNvbnRhaW5lci5sZW5ndGgpIHtcbiAgICAgIGNoaWxkcmVuQ29udGFpbmVyLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hpbGRyZW5Db250YWluZXIubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdEVsZW1lbnQuYXBwZW5kKFwiPGRpdiBjbGFzcz0nY2hpbGRyZW4nPjwvZGl2PlwiKTtcbiAgICAgIGxvYWRJbmRpY2F0b3Iuc2hvdygpO1xuICAgICAgcmV0dXJuIGdldENoaWxkcmVuKG5ldyBJbmRpdmlkdWFsTW9kZWwocGFyZW50VXJpKSwgdHJ1ZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNoaWxkcmVuVXJpcykge1xuICAgICAgICAgIHJldHVybiBjaGlsZHJlblVyaXMucmVkdWNlKGFzeW5jIChhY2MsIGN1cikgPT4ge1xuICAgICAgICAgICAgYWNjID0gYXdhaXQgYWNjO1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBuZXcgSW5kaXZpZHVhbE1vZGVsKGN1cik7XG4gICAgICAgICAgICBjb25zdCB0bXBsID0gYXdhaXQgZ2V0Um93VGVtcGxhdGUoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKHRtcGwgPT0gbnVsbCkgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIGF3YWl0IGNoaWxkLnByZXNlbnQocm9vdEVsZW1lbnQuY2hpbGRyZW4oJy5jaGlsZHJlbicpLCB0bXBsKTtcbiAgICAgICAgICAgIHJldHVybiArK2FjYztcbiAgICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoMCkpO1xuICAgICAgICAgIC8vIGNvbnN0IHByb21pc2VzID0gY2hpbGRyZW5VcmlzLm1hcChmdW5jdGlvbiAoY2hpbGRVcmkpIHtcbiAgICAgICAgICAvLyAgIGNvbnN0IGNoaWxkID0gbmV3IEluZGl2aWR1YWxNb2RlbChjaGlsZFVyaSk7XG4gICAgICAgICAgLy8gICByZXR1cm4gZ2V0Um93VGVtcGxhdGUoY2hpbGQpLnRoZW4oZnVuY3Rpb24gKHRtcGwpIHtcbiAgICAgICAgICAvLyAgICAgaWYgKHRtcGwgPT0gbnVsbCkge1xuICAgICAgICAgIC8vICAgICAgIHJldHVybiBbY2hpbGQsIFByb21pc2UucmVzb2x2ZShudWxsKV07XG4gICAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gICAgICAgcmV0dXJuIFtjaGlsZCwgdG1wbF07XG4gICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAvLyAgICAgcmV0dXJuIGNoaWxkLnByZXNlbnQocm9vdEVsZW1lbnQuY2hpbGRyZW4oJy5jaGlsZHJlbicpLCB0bXBsKTtcbiAgICAgICAgICAvLyAgIH0pO1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgIC8vIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICBsb2FkSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgICAvLyByZXN1bHQgPSByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgLy8gICByZXR1cm4gaXRlbSAhPSBudWxsO1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgIC8vIHJldHVybiByZXN1bHQubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9wZW5Gcm9tU3RydWN0dXJlICh0YXJnZXRVcmkpIHtcbiAgICBjb25zdCBpc0luUm9vdCA9IGZhbHNlO1xuICAgIGNvbnN0IHRhcmdldEluZGl2aWQgPSBuZXcgSW5kaXZpZHVhbE1vZGVsKHRhcmdldFVyaSk7XG4gICAgaWYgKCQoJ3NlY3Rpb24jT3JnU3RydWN0dXJlIC5zZWN0aW9uLWhlYWRlciAuZ2x5cGhpY29uJywgdGVtcGxhdGUpLmhhc0NsYXNzKCdnbHlwaGljb24tY2hldnJvbi1yaWdodCcpKSB7XG4gICAgICAkKCdzZWN0aW9uI09yZ1N0cnVjdHVyZSAuc2VjdGlvbi1oZWFkZXInKS5jbGljaygpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0UGFyZW50VW5pdENoYWluKHRhcmdldEluZGl2aWQpXG4gICAgICAudGhlbihmdW5jdGlvbiAoY2hhaW4pIHtcbiAgICAgICAgbGV0IHJvb3RPcmc7XG4gICAgICAgIGlmIChjaGFpbi5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIC8vIGlzSW5Sb290ID0gdHJ1ZTtcbiAgICAgICAgICByb290T3JnID0gdGFyZ2V0SW5kaXZpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb290T3JnID0gY2hhaW4ucG9wKCk7XG4gICAgICAgICAgY2hhaW4udW5zaGlmdCh0YXJnZXRJbmRpdmlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5pdGlhbFN0cnVjdHVyZShyb290T3JnKS50aGVuKGZ1bmN0aW9uICh0bXBsKSB7XG4gICAgICAgICAgcmV0dXJuIGNoYWluLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChwciwgY3VyKSB7XG4gICAgICAgICAgICByZXR1cm4gcHIudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJvdyA9ICQoXCJkaXYudmFsdWUtcm93W3Jlc291cmNlPSdcIiArIGN1ci5pZCArIFwiJ11cIiwgdG1wbCk7XG4gICAgICAgICAgICAgIHJldHVybiBvcGVuUm93KHJvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0Um93ID0gJChcImRpdi52YWx1ZS1yb3dbcmVzb3VyY2U9J1wiICsgdGFyZ2V0VXJpICsgXCInXSA+IC5pdGVtXCIsIHRlbXBsYXRlKTtcbiAgICAgICAgdGFyZ2V0Um93LmFkZENsYXNzKCd3YXJuaW5nJyk7XG4gICAgICAgIHJldHVybiBpc0luUm9vdCA/IHRydWUgOiBkcmF3Q2FyZHMobmV3IEluZGl2aWR1YWxNb2RlbCh0YXJnZXRVcmkpKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gb3JnQ29udGVudC5vZmZzZXQoKS50b3A7XG4gICAgICAgIGlmIChwb3NpdGlvbiA+IDApIHtcbiAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XG4gICAgICAgICAgICBzY3JvbGxUb3A6IHBvc2l0aW9uLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGluZGl2aWR1YWwudGFyZ2V0VG9DYXJkcyA9IHRhcmdldFVyaTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFyZW50VW5pdENoYWluICh0YXJnZXQsIGFjYykge1xuICAgIGlmIChhY2MgPT0gdW5kZWZpbmVkKSBhY2MgPSBbXTtcbiAgICByZXR1cm4gdGFyZ2V0LmxvYWQoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0YXJnZXQuaGFzVmFsdWUoJ3YtczpwYXJlbnRVbml0JykpIHtcbiAgICAgICAgY29uc3QgcGFyZW50VW5pdCA9IHRhcmdldFsndi1zOnBhcmVudFVuaXQnXVswXTtcbiAgICAgICAgYWNjLnB1c2gocGFyZW50VW5pdCk7XG4gICAgICAgIHJldHVybiBnZXRQYXJlbnRVbml0Q2hhaW4ocGFyZW50VW5pdCwgYWNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZXcgSW5kaXZpZHVhbE1vZGVsKCd2LXM6U2VhcmNoVGV4dEJ1bmRsZScpLmxvYWQoKS50aGVuKGZ1bmN0aW9uIChidW5kbGUpIHtcbiAgICAkKCcjc2VhcmNoVGV4dCBpbnB1dCcsIHRlbXBsYXRlKS5hdHRyKCdwbGFjZWhvbGRlcicsIGJ1bmRsZVsncmRmczpsYWJlbCddLm1hcChDb21tb25VdGlsLmZvcm1hdFZhbHVlKS5qb2luKCcgJykpO1xuICB9KTtcblxuICBsZXQgc2VhcmNoSGVscGVyT2JqID0ge307XG4gIGZ1bmN0aW9uIHNldFNlYXJjaEhlbHBlck9ialRvRGVmYXVsdCAoKSB7XG4gICAgc2VhcmNoSGVscGVyT2JqID0ge1xuICAgICAgb3JnOiB7XG4gICAgICAgIGhhbmRsZXJlZDogMCxcbiAgICAgIH0sXG4gICAgICBkZXA6IHtcbiAgICAgICAgaGFuZGxlcmVkOiAwLFxuICAgICAgfSxcbiAgICAgIGFwcDoge1xuICAgICAgICBoYW5kbGVyZWQ6IDAsXG4gICAgICB9LFxuICAgICAgcGhvbmU6IHtcbiAgICAgICAgaGFuZGxlcmVkOiAwLFxuICAgICAgfSxcbiAgICAgIGVtYWlsOiB7XG4gICAgICAgIGhhbmRsZXJlZDogMCxcbiAgICAgIH0sXG4gICAgICBwb3M6IHtcbiAgICAgICAgaGFuZGxlcmVkOiAwLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgJCgnI3NlYXJjaEJ1dHRvbicsIHRlbXBsYXRlKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNlYXJjaFRleHQgPSAkKCcjc2VhcmNoVGV4dCBpbnB1dCcsIHRlbXBsYXRlKS52YWwoKTtcbiAgICBpZiAoIXNlYXJjaFRleHQpIHJldHVybjtcbiAgICBzZWFyY2hUZXh0ID0gc2VhcmNoVGV4dC50cmltKCk7XG4gICAgc2V0U2VhcmNoSGVscGVyT2JqVG9EZWZhdWx0KCk7XG4gICAgbG9hZEluZGljYXRvci5zaG93KCk7XG5cbiAgICBjb25zdCByZXN1bHRPcmcgPSAkKCcjcmVzdWx0T3JnJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdE9yZykuZW1wdHkoKTtcbiAgICBjb25zdCByZXN1bHREZXAgPSAkKCcjcmVzdWx0RGVwJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdERlcCkuZW1wdHkoKTtcbiAgICBjb25zdCByZXN1bHRBcHAgPSAkKCcjcmVzdWx0QXBwJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdEFwcCkuZW1wdHkoKTtcbiAgICBjb25zdCByZXN1bHRQb3MgPSAkKCcjcmVzdWx0UG9zJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdFBvcykuZW1wdHkoKTtcblxuICAgIGNvbnN0IHNlYXJjaFByb21pc2UgPSBbXTtcbiAgICBjb25zdCBxdWVyeVN0cmluZ0FyciA9IGdlblF1ZXJ5U3RyaW5nQXJyYXkoc2VhcmNoVGV4dCwgZmluZERlbGV0ZWQsIHNlYXJjaE9yZ01vZGUgPT0gJ3RhcmdldE9yZycpO1xuICAgIHNlYXJjaFByb21pc2UucHVzaChxdWVyeVN0cmluZ0FyclswXSA9PSBudWxsID8gUHJvbWlzZS5yZXNvbHZlKFtdKSA6IHNlYXJjaEFuZExvYWQoJ29yZycsIHF1ZXJ5U3RyaW5nQXJyWzBdLCAwKSk7XG4gICAgc2VhcmNoUHJvbWlzZS5wdXNoKHNlYXJjaEFuZExvYWQoJ2RlcCcsIHF1ZXJ5U3RyaW5nQXJyWzFdLCAwKSk7XG4gICAgc2VhcmNoUHJvbWlzZS5wdXNoKHNlYXJjaEFuZExvYWQoJ2FwcCcsIHF1ZXJ5U3RyaW5nQXJyWzJdLCAwKSk7XG4gICAgc2VhcmNoUHJvbWlzZS5wdXNoKHNlYXJjaEFuZExvYWQoJ3BvcycsIHF1ZXJ5U3RyaW5nQXJyWzNdLCAwKSk7XG5cbiAgICAvLyBvcmdUcmVlLmVtcHR5KCk7XG4gICAgLy8gb3JnQ29udGVudC5oaWRlKCk7XG4gICAgLy8gJChcInRib2R5XCIsIG9yZ0NvbnRlbnQpLmVtcHR5KCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoc2VhcmNoUHJvbWlzZSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgIGNvbnN0IGZpbmRlZCA9IHJlc3VsdHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cikge1xuICAgICAgICAgIHJldHVybiBhY2MgKyBjdXIubGVuZ3RoO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgaWYgKGZpbmRlZCA9PSAwKSB7XG4gICAgICAgICAgJCgnLm5vdC1mb3VuZCcsIHRlbXBsYXRlKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCgnLm5vdC1mb3VuZCcsIHRlbXBsYXRlKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlc2VudFByb21pc2VzID0gW107XG4gICAgICAgIGNvbnN0IG9yZ09iaiA9IHJlc3VsdHNbMF07XG4gICAgICAgIGNvbnN0IGRlcE9iaiA9IHJlc3VsdHNbMV07XG4gICAgICAgIGNvbnN0IGFwcE9iaiA9IHJlc3VsdHNbMl07XG4gICAgICAgIGNvbnN0IHBvc09iaiA9IHJlc3VsdHNbM107XG4gICAgICAgIGlmIChvcmdPYmoubGVuZ3RoID4gMCkgcmVzdWx0T3JnLnNob3coKTtcbiAgICAgICAgaWYgKGRlcE9iai5sZW5ndGggPiAwKSByZXN1bHREZXAuc2hvdygpO1xuICAgICAgICBpZiAoYXBwT2JqLmxlbmd0aCA+IDApIHJlc3VsdEFwcC5zaG93KCk7XG4gICAgICAgIGlmIChwb3NPYmoubGVuZ3RoID4gMCkgcmVzdWx0UG9zLnNob3coKTtcbiAgICAgICAgcHJlc2VudFByb21pc2VzLnB1c2gocHJlc2VudFNlYXJjaFJlc3VsdCgnb3JnJywgcmVzdWx0T3JnLCBvcmdPYmopKTtcbiAgICAgICAgcHJlc2VudFByb21pc2VzLnB1c2gocHJlc2VudFNlYXJjaFJlc3VsdCgnZGVwJywgcmVzdWx0RGVwLCBkZXBPYmopKTtcbiAgICAgICAgcHJlc2VudFByb21pc2VzLnB1c2gocHJlc2VudFNlYXJjaFJlc3VsdCgnYXBwJywgcmVzdWx0QXBwLCBhcHBPYmopKTtcbiAgICAgICAgcHJlc2VudFByb21pc2VzLnB1c2gocHJlc2VudFNlYXJjaFJlc3VsdCgncG9zJywgcmVzdWx0UG9zLCBwb3NPYmopKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByZXNlbnRQcm9taXNlcyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCgnc2VjdGlvbiNPcmdTdHJ1Y3R1cmUgLnNlY3Rpb24taGVhZGVyIC5nbHlwaGljb24nLCB0ZW1wbGF0ZSkuaGFzQ2xhc3MoJ2dseXBoaWNvbi1jaGV2cm9uLWRvd24nKSkge1xuICAgICAgICAgICQoJ3NlY3Rpb24jT3JnU3RydWN0dXJlIC5zZWN0aW9uLWhlYWRlcicpLmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgbG9hZEluZGljYXRvci5oaWRlKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGdlblF1ZXJ5U3RyaW5nQXJyYXkgKHNlYXJjaFRleHQsIGZpbmREZWxldGVkLCBmaW5kSW5QYXJlbnRPcmcpIHtcbiAgICBjb25zdCBzZWxlY3RQYXJ0ID0gJ1NFTEVDVCBESVNUSU5DVCB0YXJnZXQuaWQnO1xuICAgIGNvbnN0IGVuZGluZ1BhcnQgPVxuICAgICAgXCIgR1JPVVAgQlkgdGFyZ2V0LmlkLCB0YXJnZXQucmRmc19sYWJlbF9zdHIsIHRhcmdldC52ZXJzaW9uIEhBVklORyBzdW0odGFyZ2V0LnNpZ24pID4gMCBvcmRlciBieSBhcnJheVNvcnQoeCAtPiBlbmRzV2l0aChsb3dlclVURjgoeCksICdAZW4nKSwgdGFyZ2V0LnJkZnNfbGFiZWxfc3RyKSBhc2NcIjtcbiAgICBsZXQgYmFzaWNXaGVyZVBhcnQgPSBmaW5kRGVsZXRlZCA/ICcgV0hFUkUgdGFyZ2V0LnZfc19kZWxldGVkX2ludD1bMV0nIDogJyBXSEVSRSB0YXJnZXQudl9zX2RlbGV0ZWRfaW50PVswXSAnO1xuICAgIGNvbnN0IG9yZ0pvaW5QYXJ0ID0gJyBMRUZUIEpPSU4gdmVkYV90dC5gdi1zOk9yZ2FuaXphdGlvbmAgYXMgb3JnIE9OIG9yZy5pZD10YXJnZXQuYHZfc19wYXJlbnRPcmdhbml6YXRpb25fc3RyYFsxXSc7XG4gICAgY29uc3QgY29uZGl0aW9uRm9yT3JnID0gJyBhbmQgb3JnLmB2X3NfYWN0dWFsQ29udGFjdHNfaW50YFsxXT0xJztcbiAgICBpZiAoZmluZEluUGFyZW50T3JnKSB7XG4gICAgICBiYXNpY1doZXJlUGFydCArPSBcIiBBTkQgdGFyZ2V0LnZfc19wYXJlbnRPcmdhbml6YXRpb25fc3RyPVsnXCIgKyBpbmRpdmlkdWFsWyd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbiddWzBdLmlkICsgXCInXVwiO1xuICAgIH1cbiAgICBsZXQgb3JnYW5pemF0aW9uUXVlcnkgPSBzZWxlY3RQYXJ0ICsgJyBGUk9NIHZlZGFfdHQuYHYtczpPcmdhbml6YXRpb25gIEFTIHRhcmdldCc7XG4gICAgbGV0IGRlcGFydG1lbnRRdWVyeSA9IHNlbGVjdFBhcnQgKyAnIEZST00gdmVkYV90dC5gdi1zOkRlcGFydG1lbnRgIEFTIHRhcmdldCcgKyBvcmdKb2luUGFydDtcbiAgICBsZXQgYXBwb2ludG1lbnRRdWVyeSA9XG4gICAgICBzZWxlY3RQYXJ0ICsgJyBGUk9NIHZlZGFfdHQuYHYtczpBcHBvaW50bWVudGAgYXMgdGFyZ2V0IElOTkVSIEpPSU4gdmVkYV90dC5gdi1zOlBlcnNvbmAgYXMgcGVyIE9OIHRhcmdldC52X3NfZW1wbG95ZWVfc3RyWzFdID0gcGVyLmlkJyArIG9yZ0pvaW5QYXJ0O1xuICAgIGxldCBzcGVjaWFsUG9zaXRpb25RdWVyeSA9IHNlbGVjdFBhcnQgKyAnIEZST00gdmVkYV90dC5gdi1zOlBvc2l0aW9uYCBBUyB0YXJnZXQnICsgb3JnSm9pblBhcnQ7XG5cbiAgICBsZXQgaXNDb21tTWVhbkpvaW5BZGRlZCA9IGZhbHNlO1xuICAgIC8vIHZhciBpc1Bob25lQ2hhbm5lbEFkZGVkID0gZmFsc2U7XG4gICAgLy8gdmFyIGlzRW1haWxDaGFubmVsQWRkZWQgPSBmYWxzZTtcbiAgICBjb25zdCBxdWVyeVBhcnRzID0gc2VhcmNoVGV4dC5zcGxpdCgnICcpLnJlZHVjZShcbiAgICAgIGZ1bmN0aW9uIChxUGFydHMsIHNUZXh0KSB7XG4gICAgICAgIHNUZXh0ID0gc1RleHQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBjb25zdCBpc1Bob25lU2VhcmNoID0gc1RleHQubWF0Y2goJ14nICsgU3RyaW5nLmZyb21DaGFyQ29kZSg5MikgKyAnKz9bJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoOTIpICsgJ2QtJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoOTIpICsgJ3NdKiQnKSAhPSBudWxsO1xuICAgICAgICBjb25zdCBpc0VtYWlsU2VhcmNoID0gc1RleHQubWF0Y2goJ14uKkB7MX0nKSAhPSBudWxsO1xuICAgICAgICBpZiAoaXNQaG9uZVNlYXJjaCB8fCBpc0VtYWlsU2VhcmNoKSB7XG4gICAgICAgICAgaWYgKCFpc0NvbW1NZWFuSm9pbkFkZGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1NZWFuSm9pbkFkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvblF1ZXJ5ICs9ICcgSU5ORVIgSk9JTiB2ZWRhX3R0LmB2LXM6Q29tbXVuaWNhdGlvbk1lYW5gIGFzIGNtIE9OIGNtLnZfc19iYWNrd2FyZFRhcmdldF9zdHIgPSBbdGFyZ2V0LmlkXSc7XG4gICAgICAgICAgICBkZXBhcnRtZW50UXVlcnkgKz0gJyBJTk5FUiBKT0lOIHZlZGFfdHQuYHYtczpDb21tdW5pY2F0aW9uTWVhbmAgYXMgY20gT04gY20udl9zX2JhY2t3YXJkVGFyZ2V0X3N0ciA9IFt0YXJnZXQuaWRdJztcbiAgICAgICAgICAgIGFwcG9pbnRtZW50UXVlcnkgKz0gJyBJTk5FUiBKT0lOIHZlZGFfdHQuYHYtczpDb21tdW5pY2F0aW9uTWVhbmAgYXMgY20gT04gY20udl9zX2JhY2t3YXJkVGFyZ2V0X3N0ciA9IFtwZXIuaWRdJztcbiAgICAgICAgICAgIHNwZWNpYWxQb3NpdGlvblF1ZXJ5ICs9ICcgSU5ORVIgSk9JTiB2ZWRhX3R0LmB2LXM6Q29tbXVuaWNhdGlvbk1lYW5gIGFzIGNtIE9OIGNtLnZfc19iYWNrd2FyZFRhcmdldF9zdHIgPSBbdGFyZ2V0LmlkXSc7XG4gICAgICAgICAgICAvLyBvcmdhbml6YXRpb25RdWVyeSArPSBcIiBMRUZUIEpPSU4gdmVkYV90dC5gdi1zOkNvbW11bmljYXRpb25NZWFuYCBhcyBjbSBPTiBjbS52X3NfYmFja3dhcmRUYXJnZXRfc3RyID0gW3RhcmdldC5pZF1cIjtcbiAgICAgICAgICAgIC8vIGRlcGFydG1lbnRRdWVyeSArPSBcIiBMRUZUIEpPSU4gdmVkYV90dC5gdi1zOkNvbW11bmljYXRpb25NZWFuYCBhcyBjbSBPTiBjbS52X3NfYmFja3dhcmRUYXJnZXRfc3RyID0gW3RhcmdldC5pZF1cIjtcbiAgICAgICAgICAgIC8vIGFwcG9pbnRtZW50UXVlcnkgKz0gXCIgTEVGVCBKT0lOIHZlZGFfdHQuYHYtczpDb21tdW5pY2F0aW9uTWVhbmAgYXMgY20gT04gY20udl9zX2JhY2t3YXJkVGFyZ2V0X3N0ciA9IFtwZXIuaWRdXCI7XG4gICAgICAgICAgICAvLyBzcGVjaWFsUG9zaXRpb25RdWVyeSArPSBcIiBMRUZUIEpPSU4gdmVkYV90dC5gdi1zOkNvbW11bmljYXRpb25NZWFuYCBhcyBjbSBPTiBjbS52X3NfYmFja3dhcmRUYXJnZXRfc3RyID0gW3RhcmdldC5pZF1cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaWYgKGlzUGhvbmVTZWFyY2ggJiYgIWlzUGhvbmVDaGFubmVsQWRkZWQpIHtcbiAgICAgICAgICAvLyAgIGJhc2ljV2hlcmVQYXJ0ICs9IFwiIEFORCAoY20udl9zX2hhc0NvbW11bmljYXRpb25NZWFuQ2hhbm5lbF9zdHJbMV0gaW4gKCdkOmZweHgwaHcyZ3llYTh6MWRjamM2bXh0bGcyJywnZDp6aGVyY3JkZGc1eW90c2JienIzM2Nmb3FmYycsJ2Q6bzNxMmdhZ3l2ZndoNDMwaW84OHZ2Yjh2ZWwnLCdkOm00dmc3cGt2Y3ZrZTllNmxvcXRiOTM3amh5JykpXCI7XG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIC8vIGlmIChpc0VtYWlsU2VhcmNoICYmICFpc0VtYWlsQ2hhbm5lbEFkZGVkKSB7XG4gICAgICAgICAgLy8gICBiYXNpY1doZXJlUGFydCArPSBcIiBBTkQgY20udl9zX2hhc0NvbW11bmljYXRpb25NZWFuQ2hhbm5lbF9zdHJbMV0gPSAnZDphMWl3bmkwYjU0ZnZjejQxdnV0czA4Ynhxc2gnXCI7XG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIHFQYXJ0cyA9IHFQYXJ0cy5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0ICsgXCIgQU5EIChsb3dlclVURjgoY20udl9zX2Rlc2NyaXB0aW9uX3N0clsxXSkgTElLRSAnJVwiICsgc1RleHQgKyBcIiUnIE9SIGxvd2VyVVRGOChjbS5yZGZzX2NvbW1lbnRfc3RyWzFdKSBMSUtFICclXCIgKyBzVGV4dCArIFwiJScpXCI7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcVBhcnRzWzBdICs9IFwiIEFORCBsb3dlclVURjgoYXJyYXlTdHJpbmdDb25jYXQoYXJyYXlDb25jYXQocmRmc19sYWJlbF9zdHIsdl9zX3RpdGxlX3N0ciwgdl9zX3Nob3J0TGFiZWxfc3RyKSwgJyAnKSkgTElLRSAnJVwiICsgc1RleHQgKyBcIiUnXCI7XG4gICAgICAgICAgcVBhcnRzWzFdICs9IFwiIEFORCBsb3dlclVURjgoYXJyYXlTdHJpbmdDb25jYXQoYXJyYXlDb25jYXQocmRmc19sYWJlbF9zdHIsdl9zX3RpdGxlX3N0ciwgdl9zX3Nob3J0TGFiZWxfc3RyKSwgJyAnKSkgTElLRSAnJVwiICsgc1RleHQgKyBcIiUnXCI7XG4gICAgICAgICAgcVBhcnRzWzJdICs9IFwiIEFORCBsb3dlclVURjgoYXJyYXlTdHJpbmdDb25jYXQoYXJyYXlDb25jYXQodGFyZ2V0LnJkZnNfbGFiZWxfc3RyLHBlci52X3NfbWlkZGxlTmFtZV9zdHIpLCAnICcpKSBMSUtFICclXCIgKyBzVGV4dCArIFwiJSdcIjtcbiAgICAgICAgICBxUGFydHNbM10gKz0gXCIgQU5EIGxvd2VyVVRGOChhcnJheVN0cmluZ0NvbmNhdChhcnJheUNvbmNhdCh0YXJnZXQucmRmc19sYWJlbF9zdHIsdGFyZ2V0LnJkZnNfY29tbWVudF9zdHIpLCAnICcpKSBMSUtFICclXCIgKyBzVGV4dCArIFwiJSdcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcVBhcnRzO1xuICAgICAgfSxcbiAgICAgIFsnJywgJycsICcnLCAnJ10sXG4gICAgKTtcbiAgICBpZiAoaXNDb21tTWVhbkpvaW5BZGRlZCkge1xuICAgICAgYmFzaWNXaGVyZVBhcnQgKz0gJyBBTkQgY20udl9zX2RlbGV0ZWRfaW50ID0gWzBdJztcbiAgICB9XG4gICAgb3JnYW5pemF0aW9uUXVlcnkgPSBmaW5kSW5QYXJlbnRPcmcgP1xuICAgICAgbnVsbCA6XG4gICAgICBvcmdhbml6YXRpb25RdWVyeSArXG4gICAgICAgIGJhc2ljV2hlcmVQYXJ0ICtcbiAgICAgICAgcXVlcnlQYXJ0c1swXSArXG4gICAgICAgIFwiIEFORCB2X3NfaGFzQ29tbXVuaWNhdGlvbk1lYW5fc3RyWzFdIT0nJ1wiICtcbiAgICAgICAgJyBhbmQgdGFyZ2V0LmB2X3NfYWN0dWFsQ29udGFjdHNfaW50YFsxXT0xJyArXG4gICAgICAgIGVuZGluZ1BhcnQ7XG4gICAgZGVwYXJ0bWVudFF1ZXJ5ICs9IGJhc2ljV2hlcmVQYXJ0ICsgcXVlcnlQYXJ0c1sxXSArIGNvbmRpdGlvbkZvck9yZyArIGVuZGluZ1BhcnQ7XG4gICAgYXBwb2ludG1lbnRRdWVyeSArPVxuICAgICAgYmFzaWNXaGVyZVBhcnQgK1xuICAgICAgcXVlcnlQYXJ0c1syXSArXG4gICAgICBcIiBBTkQgdGFyZ2V0LnZfc19vZmZpY2lhbF9pbnQ9WzFdIEFORCBOT1QobG93ZXJVVEY4KGFycmF5U3RyaW5nQ29uY2F0KHRhcmdldC52X3Nfb3JpZ2luX3N0ciwgJycpKSBMSUtFICclZ3JvdXAlJylcIiArXG4gICAgICBjb25kaXRpb25Gb3JPcmcgK1xuICAgICAgZW5kaW5nUGFydDtcbiAgICBzcGVjaWFsUG9zaXRpb25RdWVyeSArPVxuICAgICAgYmFzaWNXaGVyZVBhcnQgKyBxdWVyeVBhcnRzWzNdICsgXCIgQU5EIGxvd2VyVVRGOChhcnJheVN0cmluZ0NvbmNhdCh0YXJnZXQudl9zX29yaWdpbl9zdHIsICcgJykpIExJS0UgJyVncm91cCUnXCIgKyBjb25kaXRpb25Gb3JPcmcgKyBlbmRpbmdQYXJ0O1xuICAgIHJldHVybiBbb3JnYW5pemF0aW9uUXVlcnksIGRlcGFydG1lbnRRdWVyeSwgYXBwb2ludG1lbnRRdWVyeSwgc3BlY2lhbFBvc2l0aW9uUXVlcnldO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlc2VudFNlYXJjaFJlc3VsdCAob2JqVHlwZSwgY29udGFpbmVyLCBpdGVtcykge1xuICAgIGNvbnN0IHByb21pc2VzID0gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5wcmVzZW50KCQoJzxkaXY+PC9kaXY+JyksICd2LXM6Q29udGFjdENhcmRUZW1wbGF0ZScpO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAodGVtcGxhdGVzKSB7XG4gICAgICB0ZW1wbGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodG1wbCkge1xuICAgICAgICBpZiAoaXNDb250YWN0TWFuYWdlcikgJCgnLnpvb20uaGlkZGVuJywgdG1wbCkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICBpZiAoaW5kaXZpZHVhbC5oYXNWYWx1ZSgndi1zOm1hbmFnZWRPcmdhbml6YXRpb24nKSkge1xuICAgICAgICAgICQoXCIuaGlkZUluU3RydWN0dXJlIHNwYW5bcmVsPSd2LXM6cGFyZW50T3JnYW5pemF0aW9uJ11cIiwgdG1wbCkucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgJCgndGJvZHknLCBjb250YWluZXIpLmFwcGVuZCh0bXBsKTtcbiAgICAgIH0pO1xuICAgICAgJCgnc3Bhbi5iYWRnZTpudGgtY2hpbGQoNCknLCBjb250YWluZXIpLnRleHQoc2VhcmNoSGVscGVyT2JqW29ialR5cGVdLmVzdGltYXRlZCk7XG4gICAgICAkKCdzcGFuLmJhZGdlOm50aC1jaGlsZCgyKScsIGNvbnRhaW5lcikudGV4dChzZWFyY2hIZWxwZXJPYmpbb2JqVHlwZV0uaGFuZGxlcmVkKTtcbiAgICAgIGlmICgkKCd0Ym9keSB0cicsIGNvbnRhaW5lcikubGVuZ3RoIDwgc2VhcmNoSGVscGVyT2JqW29ialR5cGVdLmVzdGltYXRlZCkge1xuICAgICAgICAkKCdkaXYucmVzdWx0LWluZm8tY29udGFpbmVyJywgY29udGFpbmVyKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKCdkaXYucmVzdWx0LWluZm8tY29udGFpbmVyJywgY29udGFpbmVyKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWFyY2hBbmRMb2FkIChvYmpUeXBlLCBxdWVyeVN0cmluZywgZnJvbSwgdG9wKSB7XG4gICAgbGV0IHNvcnQ7XG4gICAgaWYgKG9ialR5cGUgPT0gJ2FwcCcpIHtcbiAgICAgIHNvcnQgPSBcIidyZGZzOmxhYmVsX3J1JyBhc2NcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc29ydCA9IFwiJ3JkZnM6bGFiZWwnIGFzY1wiO1xuICAgIH1cbiAgICBpZiAoIXRvcCkgdG9wID0gdXNlckRpc3BsYXllZEVsZW1lbnRzO1xuICAgIC8vIFRPRE8g0LXRgdC70Lgg0LIg0LrQvtC90YHQvtC70Lgg0L3QtSDQv9C+0Y/QstC70Y/QtdGC0YHRjyDRgtC+INGD0LTQsNC70LjRgtGMXG4gICAgaWYgKG9ialR5cGUgPT0gJ3Bob25lJyB8fCBvYmpUeXBlID09ICdlbWFpbCcpIGNvbnNvbGUubG9nKCdUaGlzIGlzIHNlYXJjaCAnLCBvYmpUeXBlKTtcbiAgICBjb25zdCBzZWFyY2hPYmogPSB7XG4gICAgICB0aWNrZXQ6IHZlZGEudGlja2V0LFxuICAgICAgc3FsOiBxdWVyeVN0cmluZyxcbiAgICAgIHNvcnQ6IHNvcnQsXG4gICAgICBmcm9tOiBmcm9tLFxuICAgICAgdG9wOiB0b3AsXG4gICAgICBsaW1pdDogMjAwLFxuICAgICAgYXN5bmM6IHRydWUsXG4gICAgfTtcbiAgICBzZWFyY2hIZWxwZXJPYmpbb2JqVHlwZV0ucXVlcnkgPSBxdWVyeVN0cmluZztcbiAgICByZXR1cm4gQmFja2VuZC5xdWVyeShzZWFyY2hPYmopXG4gICAgICAudGhlbihmdW5jdGlvbiAoc2VhcmNoUmVzdWx0KSB7XG4gICAgICAgIHNlYXJjaEhlbHBlck9ialtvYmpUeXBlXS5lc3RpbWF0ZWQgPSBzZWFyY2hSZXN1bHQuZXN0aW1hdGVkO1xuICAgICAgICBzZWFyY2hIZWxwZXJPYmpbb2JqVHlwZV0uaGFuZGxlcmVkID0gc2VhcmNoSGVscGVyT2JqW29ialR5cGVdLmhhbmRsZXJlZCArIHNlYXJjaFJlc3VsdC5jb3VudDtcbiAgICAgICAgbGV0IGxvYWRQcm9taXNlcyA9IFtdO1xuICAgICAgICBsb2FkUHJvbWlzZXMgPSBzZWFyY2hSZXN1bHQucmVzdWx0Lm1hcChmdW5jdGlvbiAodXJpKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBJbmRpdmlkdWFsTW9kZWwodXJpKS5sb2FkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobG9hZFByb21pc2VzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdCYWNrZW5kIHF1ZXJ5IGZhaWxlZCcpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9wZW5Sb3cgKHJvdykge1xuICAgIGNvbnN0IHVyaSA9IHJvdy5hdHRyKCdyZXNvdXJjZScpO1xuICAgIHJldHVybiBkcmF3Q2hpbGRyZW4odXJpLCByb3cpLnRoZW4oZnVuY3Rpb24gKGNoaWxkcmVuQ291bnQpIHtcbiAgICAgIGNvbnN0IGNoZXZyb24gPSByb3cuY2hpbGRyZW4oJy5pdGVtJykuZmluZCgnYScpO1xuICAgICAgaWYgKGNoaWxkcmVuQ291bnQgPT0gMCkge1xuICAgICAgICBjaGV2cm9uLnJlbW92ZUNsYXNzKCdnbHlwaGljb24tY2hldnJvbi1yaWdodCBnbHlwaGljb24tY2hldnJvbi1kb3duJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGV2cm9uLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCBnbHlwaGljb24tY2hldnJvbi1yaWdodCBnbHlwaGljb24tY2hldnJvbi1kb3duJyk7XG4gICAgICB9XG4gICAgICAkKCcjcmVzaXplTGluZScsIHRlbXBsYXRlKS5oZWlnaHQoTWF0aC5tYXgob3JnQ29udGVudC5oZWlnaHQoKSwgb3JnVHJlZS5oZWlnaHQoKSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0UG9wb3ZlciAodGFyZ2V0KSB7XG4gICAgY29uc3QgdXJpID0gdGFyZ2V0LmNsb3Nlc3QoJ1tyZXNvdXJjZV0nKS5hdHRyKCdyZXNvdXJjZScpO1xuICAgIGNvbnN0IHRtcGwgPSBcIjxkaXY+PGEgdGFiaW5kZXg9JzAnIHJvbGU9J2J1dHRvbicgY2xhc3M9J3RvLXN0cnVjdHVyZScgYWJvdXQ9J0AnIHByb3BlcnR5PSdyZGZzOmxhYmVsJy8+PC9kaXY+XCI7XG4gICAgcmV0dXJuIGdldFBhcmVudFVuaXRDaGFpbihuZXcgSW5kaXZpZHVhbE1vZGVsKHVyaSkpXG4gICAgICAudGhlbihmdW5jdGlvbiAoY2hhaW4pIHtcbiAgICAgICAgY29uc3QgcHJlc2VudFByb21pc2VzID0gY2hhaW4ubWFwKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50LnByZXNlbnQoJCgnPGRpdj48L2Rpdj4nKSwgdG1wbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJlc2VudFByb21pc2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgcHJlc2VudFByb21pc2VzLnB1c2gobmV3IEluZGl2aWR1YWxNb2RlbCh1cmkpLnByZXNlbnQoJCgnPGRpdj48L2Rpdj4nKSwgdG1wbCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcmVzZW50UHJvbWlzZXMpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZW1wbGF0ZXMpIHtcbiAgICAgICAgY29uc3QgY250ciA9IHRlbXBsYXRlcy5yZWR1Y2VSaWdodChmdW5jdGlvbiAoYWNjLCBjdXJUbXBsLCBpKSB7XG4gICAgICAgICAgY3VyVG1wbC5zdHlsZS5tYXJnaW5MZWZ0ID0gMTUgKiAodGVtcGxhdGVzLmxlbmd0aCAtIChpICsgMSkpICsgJ3B4JztcbiAgICAgICAgICByZXR1cm4gYWNjLmFwcGVuZChjdXJUbXBsKTtcbiAgICAgICAgfSwgJChcIjxkaXY+PHNwYW4gY2xhc3M9J2Nsb3NlJz4mbmJzcDsmdGltZXM7PC9zcGFuPjwvZGl2PlwiKSk7XG4gICAgICAgIHJldHVybiBjbnRyO1xuICAgICAgfSk7XG4gIH1cblxuICBsZXQgb3BlbmVkUG9wb3ZlcjtcbiAgdGVtcGxhdGUub24oJ2NsaWNrJywgJ3NwYW4ub3Blbi1zdHJ1Y3R1cmUnLCBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHNlbGYgPSAkKHRoaXMpO1xuICAgIGluaXRQb3BvdmVyKCQodGhpcykpLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgIHNlbGYucG9wb3Zlcih7XG4gICAgICAgIHRyaWdnZXI6ICdtYW51YWwgZm9jdXMnLFxuICAgICAgICBwbGFjZW1lbnQ6ICdhdXRvIHJpZ2h0JyxcbiAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgY29udGFpbmVyOiB0ZW1wbGF0ZSxcbiAgICAgIH0pO1xuICAgICAgY29udGVudC5vbignY2xpY2snLCAnLmNsb3NlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy9vcGVuZWRQb3BvdmVyID0gdW5kZWZpbmVkO1xuICAgICAgICBzZWxmLnBvcG92ZXIoJ2hpZGUnKTtcbiAgICAgICAgc2VsZi5hdHRyKCdkYXRhLXBvcG92ZXJlZCcsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgICAgLy9vcGVuZWRQb3BvdmVyID0gc2VsZjtcbiAgICAgIHNlbGYucG9wb3Zlcignc2hvdycpO1xuICAgICAgc2VsZi5hdHRyKCdkYXRhLXBvcG92ZXJlZCcsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgLy8gcmV0dXJuIG9wZW5Gcm9tU3RydWN0dXJlKHVyaSk7XG4gIH0pO1xuXG4gIHRlbXBsYXRlLm9uKCdjbGljaycsICdhLnRvLXN0cnVjdHVyZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gb3BlbmVkUG9wb3Zlci5wb3BvdmVyKCdoaWRlJyk7XG4gICAgLy8gb3BlbmVkUG9wb3Zlci5hdHRyKCdkYXRhLXBvcG92ZXJlZCcsIGZhbHNlKTtcbiAgICAvLyBvcGVuZWRQb3BvdmVyID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHVyaSA9ICQodGhpcykuYXR0cignYWJvdXQnKTtcbiAgICBjb25zdCBzZWN0aW9uID0gJCh0aGlzKS5jbG9zZXN0KCdzZWN0aW9uJyk7XG4gICAgJCgnLnNlY3Rpb24taGVhZGVyJywgc2VjdGlvbikuY2xpY2soKTtcbiAgICByZXR1cm4gb3BlbkZyb21TdHJ1Y3R1cmUodXJpKTtcbiAgfSk7XG5cbiAgdGVtcGxhdGUub24oJ2NsaWNrJywgJ2EuZXhwYW5kLmdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0JywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCByb3cgPSAkKHRoaXMpLmNsb3Nlc3QoJ2Rpdi52YWx1ZS1yb3cnKTtcbiAgICByZXR1cm4gb3BlblJvdyhyb3cpO1xuICB9KTtcblxuICB0ZW1wbGF0ZS5vbignY2xpY2snLCAnYS5leHBhbmRlZC5nbHlwaGljb24tY2hldnJvbi1kb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBzZWxmID0gJCh0aGlzKTtcbiAgICBzZWxmLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCBnbHlwaGljb24tY2hldnJvbi1yaWdodCBnbHlwaGljb24tY2hldnJvbi1kb3duJyk7XG4gICAgY29uc3Qgcm93ID0gc2VsZi5jbG9zZXN0KCdkaXYudmFsdWUtcm93Jyk7XG4gICAgcm93LmNoaWxkcmVuKCdkaXYuY2hpbGRyZW4nKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICB0ZW1wbGF0ZS5vbignY2xpY2snLCAnZGl2LnZhbHVlLXJvdycsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgc2VsZiA9ICQodGhpcyk7XG5cbiAgICBjb25zdCBpdGVtID0gc2VsZi5jaGlsZHJlbignLml0ZW0nKTtcbiAgICBpZiAoIWl0ZW0uaGFzQ2xhc3MoJ3dhcm5pbmcnKSkge1xuICAgICAgJCgnLml0ZW0ud2FybmluZycsIHRlbXBsYXRlKS5yZW1vdmVDbGFzcygnd2FybmluZycpO1xuICAgICAgaXRlbS5hZGRDbGFzcygnd2FybmluZycpO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBzZWxmLmF0dHIoJ3Jlc291cmNlJyk7XG4gICAgcmV0dXJuIGRyYXdDYXJkcyhuZXcgSW5kaXZpZHVhbE1vZGVsKHVyaSkpO1xuICB9KTtcblxuICB0ZW1wbGF0ZS5vbignZGJsY2xpY2snLCAnI29yZ0NvbnRlbnQgdGJvZHkgdHInLCBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnN0IHVyaSA9ICQodGhpcykuYXR0cigncmVzb3VyY2UnKTtcbiAgICBpZiAodXJpID09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBiZWhhdmlvcjogZW1wdHkgYXR0cltyZXNvdXJjZV0nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbmRpdmlkdWFsTW9kZWwodXJpKS5sb2FkKCkudGhlbihmdW5jdGlvbiAobG9hZGVkKSB7XG4gICAgICBpZiAoIWxvYWRlZC5oYXNWYWx1ZSgncmRmOnR5cGUnLCAndi1zOkRlcGFydG1lbnQnKSAmJiAhbG9hZGVkLmhhc1ZhbHVlKCdyZGY6dHlwZScsICd2LXM6T3JnR3JvdXAnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IHJvd0luVHJlZSA9ICQoXCIjb3JnVHJlZSAuY2hpbGRyZW46bm90KC5oaWRkZW4pPmRpdi52YWx1ZS1yb3dbcmVzb3VyY2U9J1wiICsgdXJpICsgXCInXVwiLCB0ZW1wbGF0ZSk7XG4gICAgICAgICAgaWYgKHJvd0luVHJlZS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gJCgnI29yZ1RyZWUgZGl2Lml0ZW0ud2FybmluZycsIHRlbXBsYXRlKS5wYXJlbnQoKTtcbiAgICAgICAgICAgIHJldHVybiBvcGVuUm93KHBhcmVudCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiAkKFwiZGl2LnZhbHVlLXJvd1tyZXNvdXJjZT0nXCIgKyB1cmkgKyBcIiddXCIsIHBhcmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJvd0luVHJlZTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgIHJvdy5jbGljaygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVtcGxhdGUub24oJ2NsaWNrJywgJy5yZXN1bHQtaW5mby1jb250YWluZXIgLm1vcmUtcmVzdWx0cycsIGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc3Qgc2VsZiA9ICQodGhpcyk7XG4gICAgY29uc3QgdHlwZSA9IHNlbGYuZGF0YSgnc2VhcmNoLXR5cGUnKTtcbiAgICBjb25zdCBxdWVyeSA9IHNlYXJjaEhlbHBlck9ialt0eXBlXS5xdWVyeTtcbiAgICBjb25zdCBmcm9tID0gc2VhcmNoSGVscGVyT2JqW3R5cGVdLmhhbmRsZXJlZDtcbiAgICByZXR1cm4gc2VhcmNoQW5kTG9hZCh0eXBlLCBxdWVyeSwgZnJvbSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBzZWxmLmNsb3Nlc3QoJ3NlY3Rpb24nKTtcbiAgICAgIHJldHVybiBwcmVzZW50U2VhcmNoUmVzdWx0KHR5cGUsIGNvbnRhaW5lciwgcmVzdWx0KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVtcGxhdGUub24oJ2NsaWNrJywgJy5yZXN1bHQtaW5mby1jb250YWluZXIgLmFsbC1yZXN1bHRzJywgZnVuY3Rpb24gKGUpIHtcbiAgICBjb25zdCBzZWxmID0gJCh0aGlzKTtcbiAgICBjb25zdCB0eXBlID0gc2VsZi5kYXRhKCdzZWFyY2gtdHlwZScpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gc2VhcmNoSGVscGVyT2JqW3R5cGVdLnF1ZXJ5O1xuICAgIGNvbnN0IGZyb20gPSBzZWFyY2hIZWxwZXJPYmpbdHlwZV0uaGFuZGxlcmVkO1xuICAgIHJldHVybiBzZWFyY2hBbmRMb2FkKHR5cGUsIHF1ZXJ5LCBmcm9tLCAyMDApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gc2VsZi5jbG9zZXN0KCdzZWN0aW9uJyk7XG4gICAgICByZXR1cm4gcHJlc2VudFNlYXJjaFJlc3VsdCh0eXBlLCBjb250YWluZXIsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlbXBsYXRlLm9uKCdjbGljaycsICdhLmdseXBoaWNvbi16b29tLWluJywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBzZWxmID0gJCh0aGlzKTtcbiAgICBjb25zdCB1cmkgPSBzZWxmLmNsb3Nlc3QoJ1tyZXNvdXJjZV0nKS5hdHRyKCdyZXNvdXJjZScpO1xuICAgIGxldCBvYmogPSBuZXcgSW5kaXZpZHVhbE1vZGVsKHVyaSk7XG4gICAgbGV0IHRtcGw7XG4gICAgaWYgKG9iai5oYXNWYWx1ZSgncmRmOnR5cGUnLCAndi1zOkFwcG9pbnRtZW50JykpIHtcbiAgICAgIG9iaiA9IG9ialsndi1zOmVtcGxveWVlJ11bMF07XG4gICAgICB0bXBsID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAob2JqLmhhc1ZhbHVlKCdyZGY6dHlwZScsICd2LXM6RGVwYXJ0bWVudCcpKSB7XG4gICAgICB0bXBsID0gJ3YtczpEZXBhcnRtZW50VGVtcGxhdGUnO1xuICAgIH0gZWxzZSBpZiAob2JqLmhhc1ZhbHVlKCdyZGY6dHlwZScsICd2LXM6T3JnYW5pemF0aW9uJykpIHtcbiAgICAgIHRtcGwgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIEJyb3dzZXJVdGlsLnNob3dNb2RhbChvYmosIHRtcGwpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG5cbiAgLy8gQ3RybCArIEVudGVyIHRyaWdnZXJzIHNlYXJjaFxuICBmdW5jdGlvbiBjdHJsRW50ZXJIYW5kbGVyIChlKSB7XG4gICAgLy8gaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgLy8gICAkKFwiI3NlYXJjaEJ1dHRvblwiLCB0ZW1wbGF0ZSkuY2xpY2soKTtcbiAgICAvLyB9XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICQoJyNzZWFyY2hCdXR0b24nLCB0ZW1wbGF0ZSkuY2xpY2soKTtcbiAgICB9XG4gIH1cbiAgJCh3aW5kb3cpLm9uKCdrZXl1cCcsIGN0cmxFbnRlckhhbmRsZXIpO1xuICB0ZW1wbGF0ZS5vbmUoJ3JlbW92ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAkKHdpbmRvdykub2ZmKCdrZXl1cCcsIGN0cmxFbnRlckhhbmRsZXIpO1xuICB9KTtcblxuICBmdW5jdGlvbiBkcm9wUmVzdWx0VGFibGVzICgpIHtcbiAgICBjb25zdCByZXN1bHRPcmcgPSAkKCcjcmVzdWx0T3JnJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdE9yZykuZW1wdHkoKTtcbiAgICBjb25zdCByZXN1bHREZXAgPSAkKCcjcmVzdWx0RGVwJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdERlcCkuZW1wdHkoKTtcbiAgICBjb25zdCByZXN1bHRBcHAgPSAkKCcjcmVzdWx0QXBwJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdEFwcCkuZW1wdHkoKTtcbiAgICBjb25zdCByZXN1bHRQb3MgPSAkKCcjcmVzdWx0UG9zJywgdGVtcGxhdGUpLmhpZGUoKTtcbiAgICAkKCd0Ym9keScsIHJlc3VsdFBvcykuZW1wdHkoKTtcbiAgfVxuXG4gIGluZGl2aWR1YWwub24oJ3YtczptYW5hZ2VkT3JnYW5pemF0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgIHNlYXJjaE9yZ01vZGUgPSBpbmRpdmlkdWFsLmhhc1ZhbHVlKCd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbicpID8gJ3RhcmdldE9yZycgOiAnYWxsT3JnJztcbiAgICBkcm9wUmVzdWx0VGFibGVzKCk7XG5cbiAgICBjb25zdCBzZWFyY2hUZXh0ID0gJCgnI3NlYXJjaFRleHQgaW5wdXQnLCB0ZW1wbGF0ZSkudmFsKCk7XG4gICAgaWYgKHNlYXJjaFRleHQgIT0gJycpIHtcbiAgICAgICQoJyNzZWFyY2hCdXR0b24nLCB0ZW1wbGF0ZSkuY2xpY2soKTtcbiAgICB9XG4gICAgaW5pdGlhbFN0cnVjdHVyZSgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgaWYgKHJlc3VsdCA9PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgaWYgKCQoJ3NlY3Rpb24jT3JnU3RydWN0dXJlIC5zZWN0aW9uLWhlYWRlciAuZ2x5cGhpY29uJywgdGVtcGxhdGUpLmhhc0NsYXNzKCdnbHlwaGljb24tY2hldnJvbi1yaWdodCcpKSB7XG4gICAgICAgICQoJ3NlY3Rpb24jT3JnU3RydWN0dXJlIC5zZWN0aW9uLWhlYWRlcicsIHRlbXBsYXRlKS5jbGljaygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRyYXdDYXJkcyhpbmRpdmlkdWFsWyd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbiddWzBdKTtcbiAgICB9KTtcbiAgfSk7XG4gIHRlbXBsYXRlLm9uZSgncmVtb3ZlJywgZnVuY3Rpb24gKCkge1xuICAgIGluZGl2aWR1YWwub2ZmKCd2LXM6bWFuYWdlZE9yZ2FuaXphdGlvbicpO1xuICB9KTtcblxuICAkKCcjc2VhcmNoVGV4dCAuY2xlYXInLCB0ZW1wbGF0ZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICQoJyNzZWFyY2hUZXh0IGlucHV0JywgdGVtcGxhdGUpLnZhbCgnJyk7XG4gICAgZHJvcFJlc3VsdFRhYmxlcygpO1xuICB9KTtcblxuICAkKCcjcmVzZXRCdXR0b24nLCB0ZW1wbGF0ZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICQoJyNzZWFyY2hUZXh0IGlucHV0JywgdGVtcGxhdGUpLnZhbCgnJyk7XG4gICAgZHJvcFJlc3VsdFRhYmxlcygpO1xuICAgIGluZGl2aWR1YWxbJ3YtczptYW5hZ2VkT3JnYW5pemF0aW9uJ10gPSBbXTtcbiAgfSk7XG5cbiAgaWYgKGluZGl2aWR1YWwudGFyZ2V0VG9DYXJkcykge1xuICAgIHJldHVybiBvcGVuRnJvbVN0cnVjdHVyZShpbmRpdmlkdWFsLnRhcmdldFRvQ2FyZHMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbml0aWFsU3RydWN0dXJlKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0ID09IGZhbHNlKSByZXR1cm47XG4gICAgICByZXR1cm4gZHJhd0NhcmRzKGluZGl2aWR1YWxbJ3YtczptYW5hZ2VkT3JnYW5pemF0aW9uJ11bMF0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgaHRtbCA9IGBcbiAgPGRpdj5cbiAgICA8c3R5bGU+XG4gICAgICBkaXYudmFsdWUtcm93ID4gZGl2Lml0ZW0ge1xuICAgICAgICBwYWRkaW5nOiA4cHg7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogY2xpcDtcbiAgICAgIH1cbiAgICAgIGRpdi5pdGVtOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjhlMztcbiAgICAgIH1cbiAgICAgIGRpdi53YXJuaW5nIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZjJjYztcbiAgICAgIH1cbiAgICAgICNzZWFyY2hUZXh0IGlucHV0IHtcbiAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNHB4O1xuICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA0cHg7XG4gICAgICB9XG4gICAgICAuY2hpbGRyZW4ge1xuICAgICAgICBib3JkZXItbGVmdDogMXB4IGRhc2hlZCAjZWVlO1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDhweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDE0cHg7XG4gICAgICB9XG4gICAgICAvKiNvcmdDb250ZW50IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgfSovXG4gICAgICAjcmVzaXplTGluZSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgIHdpZHRoOiAzcHg7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgY3Vyc29yOiBjb2wtcmVzaXplO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xuICAgICAgfVxuICAgICAgLyoucmVzdWx0LXRhYmxlIHRoZWFkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcbiAgICAgIH0qL1xuXG4gICAgICAuc2VjdGlvbi1oZWFkZXIgPiBzcGFuLmdseXBoaWNvbiB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogNSU7XG4gICAgICB9XG5cbiAgICAgIGRpdi5yZXN1bHQtaW5mby1jb250YWluZXIge1xuICAgICAgICBtYXJnaW4tdG9wOiAtMjBweDtcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuICAgIDxkaXYgY2xhc3M9XCJyb3cgIG1hcmdpbi1tZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zXCI+XG4gICAgICAgIDwhLS0gPHZlZGEtY29udHJvbCBpZD1cInNlYXJjaFRleHRcIiBwcm9wZXJ0eT1cIipcIiBkYXRhLXR5cGU9XCJzdHJpbmdcIj48L3ZlZGEtY29udHJvbD4gLS0+XG4gICAgICAgIDxkaXYgaWQ9XCJzZWFyY2hUZXh0XCIgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb24gYnRuIGJ0bi1kZWZhdWx0IGNsZWFyXCIgdGFiaW5kZXg9XCIwXCI+4pyVPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWFyZ2luLXNtXCI+XG4gICAgICAgICAgPGJ1dHRvbiBpZD1cInNlYXJjaEJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgdHlwZT1cImJ1dHRvblwiIGFib3V0PVwidi1mczpGaW5kXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBpZD1cInJlc2V0QnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiB0eXBlPVwiYnV0dG9uXCIgYWJvdXQ9XCJ2LXM6UmVzZXRcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNFwiPlxuICAgICAgICA8dmVkYS1jb250cm9sXG4gICAgICAgICAgZGF0YS10eXBlPVwibGlua1wiXG4gICAgICAgICAgcmVsPVwidi1zOm1hbmFnZWRPcmdhbml6YXRpb25cIlxuICAgICAgICAgIGRhdGEtdGVtcGxhdGU9XCJ7QC5yZGZzOmxhYmVsfSwge0Audi1zOnRheElkfVwiXG4gICAgICAgICAgY2xhc3M9XCJmdWxsdGV4dCBkcm9wZG93blwiXG4gICAgICAgICAgZGF0YS1xdWVyeS1wcmVmaXg9XCIoJ3JkZjp0eXBlJyA9PT0gJ3YtczpPcmdhbml6YXRpb24nIHx8ICdyZGY6dHlwZSc9PT0ndi1zOlN1YnNpZGlhcnknKSAmJiAndi1zOmFjdHVhbENvbnRhY3RzJz09J3RydWUnXCI+PC92ZWRhLWNvbnRyb2w+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZCBwYWRkaW5nLW1kXCIgYWJvdXQ9XCJ2LXM6RmFzdElucHV0QnVuZGxlXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPlxuICAgICAgICA8YnV0dG9uIGlkPVwic2VsZk9yZ1wiIGNsYXNzPVwiYnRuIGJ0bi14cyBidG4tcHJpbWFyeSBtYXJnaW4tc21cIj4rPHNwYW4+PC9zcGFuPjwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGlkPVwidGVuYW50XCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5IG1hcmdpbi1zbVwiPlxuICAgICAgICAgIDxzcGFuPis8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LXM6dmVkYUluZm9cIiByZWw9XCJ2LXM6dGVuYW50XCIgZGF0YS10ZW1wbGF0ZT1cInYtdWk6TGFiZWxUZW1wbGF0ZVwiPjwvc3Bhbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibm90LWZvdW5kIGFsZXJ0IGFsZXJ0LXdhcm5pbmcgaGlkZGVuXCI+XG4gICAgICA8c3Ryb25nIGFib3V0PVwidi1mczpFbXB0eVwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Ryb25nPlxuICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOk5vdGhpbmdGb3VuZFwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8c2VjdGlvbiBpZD1cInJlc3VsdE9yZ1wiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPlxuICAgICAgPGg1IGNsYXNzPVwic2VjdGlvbi1oZWFkZXJcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIj48L3NwYW4+XG4gICAgICAgIDxsYWJlbCBhYm91dD1cInYtczpPcmdhbml6YXRpb25zQnVuZGxlXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9sYWJlbD5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwibWFyZ2luLW1kLWhcIiBzdHlsZT1cImNvbG9yOmJsYWNrOyBmb250LXdlaWdodDogbm9ybWFsXCI+XG4gICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOmN1cnNvclwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImJhZGdlXCI+PC9zcGFuPiZuYnNwOyZuYnNwO1xuICAgICAgICAgIDxzcGFuIGFib3V0PVwidi1mczplc3RpbWF0ZWRcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPjwvc3Bhbj5cbiAgICAgICAgPC9zbWFsbD5cbiAgICAgIDwvaDU+XG4gICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1jb250ZW50XCI+XG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlIHJlc3VsdC10YWJsZVwiPlxuICAgICAgICAgIDx0Ym9keT48L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdWx0LWluZm8tY29udGFpbmVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBtb3JlLXJlc3VsdHNcIiBkYXRhLXNlYXJjaC10eXBlPVwib3JnXCIgYWJvdXQ9XCJ2LWZzOk1vcmVSZXN1bHRzXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4td2FybmluZyBhbGwtcmVzdWx0c1wiIGRhdGEtc2VhcmNoLXR5cGU9XCJvcmdcIiBhYm91dD1cInYtZnM6QWxsUmVzdWx0c1wiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvYnV0dG9uPlxuICAgICAgICAgIDxzbWFsbCBjbGFzcz1cIm1hcmdpbi1zbS1oXCIgc3R5bGU9XCJjb2xvcjpibGFja1wiPlxuICAgICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOmN1cnNvclwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj48L3NwYW4+Jm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICA8c3BhbiBhYm91dD1cInYtZnM6ZXN0aW1hdGVkXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPjwvc3Bhbj5cbiAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBpZD1cInJlc3VsdERlcFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPlxuICAgICAgPGg1IGNsYXNzPVwic2VjdGlvbi1oZWFkZXJcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIj48L3NwYW4+XG4gICAgICAgIDxsYWJlbCBhYm91dD1cInYtczpEZXBhcnRtZW50c0J1bmRsZVwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvbGFiZWw+XG4gICAgICAgIDxzbWFsbCBjbGFzcz1cIm1hcmdpbi1tZC1oXCIgc3R5bGU9XCJjb2xvcjpibGFjazsgZm9udC13ZWlnaHQ6IG5vcm1hbFwiPlxuICAgICAgICAgIDxzcGFuIGFib3V0PVwidi1mczpjdXJzb3JcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPjwvc3Bhbj4mbmJzcDsmbmJzcDtcbiAgICAgICAgICA8c3BhbiBhYm91dD1cInYtZnM6ZXN0aW1hdGVkXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj48L3NwYW4+XG4gICAgICAgIDwvc21hbGw+XG4gICAgICA8L2g1PlxuICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb24tY29udGVudFwiPlxuICAgICAgICA8dGFibGUgY2xhc3M9XCJ0YWJsZSByZXN1bHQtdGFibGVcIj5cbiAgICAgICAgICA8dGJvZHk+PC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VsdC1pbmZvLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgbW9yZS1yZXN1bHRzXCIgZGF0YS1zZWFyY2gtdHlwZT1cImRlcFwiIGFib3V0PVwidi1mczpNb3JlUmVzdWx0c1wiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXdhcm5pbmcgYWxsLXJlc3VsdHNcIiBkYXRhLXNlYXJjaC10eXBlPVwiZGVwXCIgYWJvdXQ9XCJ2LWZzOkFsbFJlc3VsdHNcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L2J1dHRvbj5cbiAgICAgICAgICA8c21hbGwgY2xhc3M9XCJtYXJnaW4tc20taFwiIHN0eWxlPVwiY29sb3I6YmxhY2tcIj5cbiAgICAgICAgICAgIDxzcGFuIGFib3V0PVwidi1mczpjdXJzb3JcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJhZGdlXCI+PC9zcGFuPiZuYnNwOyZuYnNwO1xuICAgICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOmVzdGltYXRlZFwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj48L3NwYW4+XG4gICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG4gICAgPHNlY3Rpb24gaWQ9XCJyZXN1bHRQb3NcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIj5cbiAgICAgIDxoNSBjbGFzcz1cInNlY3Rpb24taGVhZGVyXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0XCI+PC9zcGFuPlxuICAgICAgICA8bGFiZWwgYWJvdXQ9XCJ2LXM6UG9zaXRpb25zQnVuZGxlXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9sYWJlbD5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwibWFyZ2luLW1kLWhcIiBzdHlsZT1cImNvbG9yOmJsYWNrOyBmb250LXdlaWdodDogbm9ybWFsXCI+XG4gICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOmN1cnNvclwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImJhZGdlXCI+PC9zcGFuPiZuYnNwOyZuYnNwO1xuICAgICAgICAgIDxzcGFuIGFib3V0PVwidi1mczplc3RpbWF0ZWRcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPjwvc3Bhbj5cbiAgICAgICAgPC9zbWFsbD5cbiAgICAgIDwvaDU+XG4gICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1jb250ZW50XCI+XG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlIHJlc3VsdC10YWJsZVwiPlxuICAgICAgICAgIDx0Ym9keT48L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdWx0LWluZm8tY29udGFpbmVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBtb3JlLXJlc3VsdHNcIiBkYXRhLXNlYXJjaC10eXBlPVwicG9zXCIgYWJvdXQ9XCJ2LWZzOk1vcmVSZXN1bHRzXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4td2FybmluZyBhbGwtcmVzdWx0c1wiIGRhdGEtc2VhcmNoLXR5cGU9XCJwb3NcIiBhYm91dD1cInYtZnM6QWxsUmVzdWx0c1wiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvYnV0dG9uPlxuICAgICAgICAgIDxzbWFsbCBjbGFzcz1cIm1hcmdpbi1zbS1oXCIgc3R5bGU9XCJjb2xvcjpibGFja1wiPlxuICAgICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOmN1cnNvclwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj48L3NwYW4+Jm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICA8c3BhbiBhYm91dD1cInYtZnM6ZXN0aW1hdGVkXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPjwvc3Bhbj5cbiAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBpZD1cInJlc3VsdEFwcFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPlxuICAgICAgPGg1IGNsYXNzPVwic2VjdGlvbi1oZWFkZXJcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blwiPjwvc3Bhbj5cbiAgICAgICAgPGxhYmVsIGFib3V0PVwidi1zOkFwcG9pbnRtZW50c0J1bmRsZVwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvbGFiZWw+XG4gICAgICAgIDxzbWFsbCBjbGFzcz1cIm1hcmdpbi1tZC1oXCIgc3R5bGU9XCJjb2xvcjpibGFjazsgZm9udC13ZWlnaHQ6IG5vcm1hbFwiPlxuICAgICAgICAgIDxzcGFuIGFib3V0PVwidi1mczpjdXJzb3JcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPjwvc3Bhbj4mbmJzcDsmbmJzcDtcbiAgICAgICAgICA8c3BhbiBhYm91dD1cInYtZnM6ZXN0aW1hdGVkXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj48L3NwYW4+XG4gICAgICAgIDwvc21hbGw+XG4gICAgICA8L2g1PlxuICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb24tY29udGVudFwiPlxuICAgICAgICA8dGFibGUgY2xhc3M9XCJ0YWJsZSByZXN1bHQtdGFibGVcIj5cbiAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICA8dGg+PC90aD5cbiAgICAgICAgICAgIDx0aD48c3BhbiBhYm91dD1cInJkZnM6bGFiZWxcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+PC90aD5cbiAgICAgICAgICAgIDx0aD48L3RoPlxuICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBhYm91dD1cImQ6bzNxMmdhZ3l2ZndoNDMwaW84OHZ2Yjh2ZWxcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIiBjbGFzcz1cImNvbC1sZy0yIGNvbC1tZC0xMlwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgYWJvdXQ9XCJkOmExaXduaTBiNTRmdmN6NDF2dXRzMDhieHFzaFwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiIGNsYXNzPVwiY29sLWxnLTUgY29sLW1kLTEyXCIgc3R5bGU9XCJvdmVyZmxvdy14OiBoaWRkZW47XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBhYm91dD1cImQ6ZnB4eDBodzJneWVhOHoxZGNqYzZteHRsZzJcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIiBjbGFzcz1cIm90aGVyLXBob25lIGNvbC1sZy01IGNvbC1tZC0xMlwiPjwvZGl2PiAgXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8IS0tIDxzcGFuIGFib3V0PVwidi1zOkNvbnRhY3RzQnVuZGxlXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPiAtLT5cbiAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICA8dGg+PC90aD5cbiAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgIDx0Ym9keT48L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdWx0LWluZm8tY29udGFpbmVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBtb3JlLXJlc3VsdHNcIiBkYXRhLXNlYXJjaC10eXBlPVwiYXBwXCIgYWJvdXQ9XCJ2LWZzOk1vcmVSZXN1bHRzXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4td2FybmluZyBhbGwtcmVzdWx0c1wiIGRhdGEtc2VhcmNoLXR5cGU9XCJhcHBcIiBhYm91dD1cInYtZnM6QWxsUmVzdWx0c1wiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvYnV0dG9uPlxuICAgICAgICAgIDxzbWFsbCBjbGFzcz1cIm1hcmdpbi1zbS1oXCIgc3R5bGU9XCJjb2xvcjpibGFja1wiPlxuICAgICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOmN1cnNvclwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj48L3NwYW4+Jm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICA8c3BhbiBhYm91dD1cInYtZnM6ZXN0aW1hdGVkXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPjwvc3Bhbj5cbiAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgICA8c2VjdGlvbiBpZD1cIk9yZ1N0cnVjdHVyZVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cbiAgICAgIDxoNSBjbGFzcz1cInNlY3Rpb24taGVhZGVyXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd25cIj48L3NwYW4+XG4gICAgICAgIDxsYWJlbCBhYm91dD1cInYtczpDb250YWN0c1wiIHByb3BlcnR5PVwicmRmczpjb21tZW50XCI+PC9sYWJlbD5cbiAgICAgIDwvaDU+XG4gICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgaWQ9XCJvcmdUcmVlXCIgY2xhc3M9XCJjb2wtbWQtM1wiIHN0eWxlPVwicGFkZGluZy1yaWdodDowcHhcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIm9yZ0NvbnRlbnRcIiBjbGFzcz1cImNvbC1tZC05XCIgc3R5bGU9XCJwYWRkaW5nLWxlZnQ6NXB4XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInJlc2l6ZUxpbmVcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBpZD1cInBhcmVudENvbnRhaW5lclwiIGNsYXNzPVwid2FybmluZyBwYWRkaW5nLW1kXCI+XG4gICAgICAgICAgICAgIDxkaXYgYWJvdXQ9XCJAXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgYWJvdXQ9XCJAXCIgcmVsPVwidi1zOmhhc0NvbW11bmljYXRpb25NZWFuXCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxzdHJvbmcgYWJvdXQ9XCJAXCIgcmVsPVwidi1zOmhhc0NvbW11bmljYXRpb25NZWFuQ2hhbm5lbFwiIGRhdGEtdGVtcGxhdGU9XCJ2LXVpOkxhYmVsVGVtcGxhdGVcIj48L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGFib3V0PVwiQFwiIHByb3BlcnR5PVwidi1zOmRlc2NyaXB0aW9uXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtaG92ZXJcIj5cbiAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgIDx0aD48L3RoPlxuICAgICAgICAgICAgICAgIDx0aD48c3BhbiBhYm91dD1cInJkZnM6bGFiZWxcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+PC90aD5cbiAgICAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgYWJvdXQ9XCJkOm8zcTJnYWd5dmZ3aDQzMGlvODh2dmI4dmVsXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCIgY2xhc3M9XCJjb2wtbGctMiBjb2wtbWQtMTJcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBhYm91dD1cImQ6YTFpd25pMGI1NGZ2Y3o0MXZ1dHMwOGJ4cXNoXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCIgY2xhc3M9XCJjb2wtbGctNSBjb2wtbWQtMTJcIiBzdHlsZT1cIm92ZXJmbG93LXg6IGhpZGRlbjtcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBhYm91dD1cImQ6ZnB4eDBodzJneWVhOHoxZGNqYzZteHRsZzJcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIiBjbGFzcz1cIm90aGVyLXBob25lIGNvbC1sZy01IGNvbC1tZC0xMlwiPjwvZGl2PiAgXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gYWJvdXQ9XCJ2LXM6Q29udGFjdHNCdW5kbGVcIiBwcm9wZXJ0eT1cInJkZnM6bGFiZWxcIj48L3NwYW4+IC0tPlxuICAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPjwvdGg+XG4gICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgIDx0Ym9keT48L3Rib2R5PlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bHQtaW5mby1jb250YWluZXIgbWFyZ2luLW1kLWhcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cInNob3dNb3JlQ2FyZHNcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIGFib3V0PVwidi1mczpNb3JlUmVzdWx0c1wiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwic2hvd0FsbENhcmRzXCIgY2xhc3M9XCJidG4gYnRuLXdhcm5pbmdcIiBhYm91dD1cInYtZnM6QWxsUmVzdWx0c1wiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJtYXJnaW4tbWQtaFwiIHN0eWxlPVwiY29sb3I6YmxhY2tcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBhYm91dD1cInYtZnM6Y3Vyc29yXCIgcHJvcGVydHk9XCJyZGZzOmxhYmVsXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj48L3NwYW4+Jm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICAgICAgPHNwYW4gYWJvdXQ9XCJ2LWZzOmVzdGltYXRlZFwiIHByb3BlcnR5PVwicmRmczpsYWJlbFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJhZGdlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICA8L2Rpdj5cbmA7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztpREFDQSxxSkFBQUEsbUJBQUEsWUFBQUEsQ0FBQSxXQUFBQyxPQUFBLFNBQUFBLE9BQUEsT0FBQUMsRUFBQSxHQUFBQyxNQUFBLENBQUFDLFNBQUEsRUFBQUMsTUFBQSxHQUFBSCxFQUFBLENBQUFJLGNBQUEsRUFBQUMsY0FBQSxHQUFBSixNQUFBLENBQUFJLGNBQUEsY0FBQUMsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLElBQUEsSUFBQUYsR0FBQSxDQUFBQyxHQUFBLElBQUFDLElBQUEsQ0FBQUMsS0FBQSxLQUFBQyxPQUFBLHdCQUFBQyxNQUFBLEdBQUFBLE1BQUEsT0FBQUMsY0FBQSxHQUFBRixPQUFBLENBQUFHLFFBQUEsa0JBQUFDLG1CQUFBLEdBQUFKLE9BQUEsQ0FBQUssYUFBQSx1QkFBQUMsaUJBQUEsR0FBQU4sT0FBQSxDQUFBTyxXQUFBLDhCQUFBQyxPQUFBWixHQUFBLEVBQUFDLEdBQUEsRUFBQUUsS0FBQSxXQUFBUixNQUFBLENBQUFJLGNBQUEsQ0FBQUMsR0FBQSxFQUFBQyxHQUFBLElBQUFFLEtBQUEsRUFBQUEsS0FBQSxFQUFBVSxVQUFBLE1BQUFDLFlBQUEsTUFBQUMsUUFBQSxTQUFBZixHQUFBLENBQUFDLEdBQUEsV0FBQVcsTUFBQSxtQkFBQUksR0FBQSxJQUFBSixNQUFBLFlBQUFBLENBQUFaLEdBQUEsRUFBQUMsR0FBQSxFQUFBRSxLQUFBLFdBQUFILEdBQUEsQ0FBQUMsR0FBQSxJQUFBRSxLQUFBLGdCQUFBYyxLQUFBQyxPQUFBLEVBQUFDLE9BQUEsRUFBQUMsSUFBQSxFQUFBQyxXQUFBLFFBQUFDLGNBQUEsR0FBQUgsT0FBQSxJQUFBQSxPQUFBLENBQUF2QixTQUFBLFlBQUEyQixTQUFBLEdBQUFKLE9BQUEsR0FBQUksU0FBQSxF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