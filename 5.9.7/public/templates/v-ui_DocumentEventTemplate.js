"use strict";

System.register(["/js/common/util.js", "jquery", "/js/common/veda.js", "/js/common/individual_model.js"], function (_export, _context) {
  "use strict";

  var CommonUtil, $, veda, IndividualModel, pre, post, html;
  return {
    setters: [function (_jsCommonUtilJs) {
      CommonUtil = _jsCommonUtilJs.default;
    }, function (_jquery) {
      $ = _jquery.default;
    }, function (_jsCommonVedaJs) {
      veda = _jsCommonVedaJs.default;
    }, function (_jsCommonIndividual_modelJs) {
      IndividualModel = _jsCommonIndividual_modelJs.default;
    }],
    execute: function () {
      _export("pre", pre = function pre(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        if (individual.hasValue('v-s:actor', 'cfg:VedaSystem')) {
          template.empty();
        }
        $('#exp', template).click(function (e) {
          e.preventDefault();
          $("div[rel='v-s:processJournal']", template).toggle();
          $(this).children(':first').toggleClass('glyphicon-chevron-down glyphicon-chevron-right');
        });
        if (individual.hasValue('v-wf:onProcess')) {
          var process = individual.get('v-wf:onProcess')[0];
          return process.load().catch(function (error) {
            console.error('Process deleted:', process.id);
            $('.on-process', template).remove();
          });
        }
      });
      _export("post", post = function post(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        if (individual.hasValue('rdf:type', 'v-s:ProcessStarted')) {
          $('.start-process', template).show();
          $('.non-start-process', template).hide();
          var process = individual.get('v-wf:onProcess')[0];
          process.load().then(function (process) {
            if (process.hasValue('v-wf:isStopped', true)) {
              $('.process-id', template).addClass('text-danger');
              $('.process-stopped', template).show();
              $('.start-process > #exp', template).trigger('click');
            }
            if ((!process.hasValue('v-wf:isStopped') || process.hasValue('v-wf:isStopped', false)) && (!process.hasValue('v-wf:isCompleted') || process.hasValue('v-wf:isCompleted', false))) {
              var actor = individual['v-s:actor'][0];
              var doc = individual['v-s:onDocument'][0];
              var isMemberProcessBreak_Promise = veda.user.isMemberOf('v-s:FunctionProcessBreak_Group');
              var isMemberOccupation_Promise = veda.user.isMemberOf(actor['v-s:occupation'][0].id);
              return Promise.all([doc.canDelete(), isMemberProcessBreak_Promise, isMemberOccupation_Promise]).then(function (results) {
                var canDelete = results[0];
                var isProcessBreakMember = results[1];
                var isOccupationMember = results[2];
                if (!actor) {
                  console.error("Unexpected behavior: can't read v-s:actor from individual");
                  return false;
                }
                var employeeId = actor.hasValue('v-s:employee') ? actor['v-s:employee'][0].id : "empty";
                if (veda.appointment.id === actor.id || veda.user.id == employeeId || veda.appointment.id === 'cfg:AdministratorAppointment' || isOccupationMember || canDelete && isProcessBreakMember) {
                  $('.stop-process', template).show();
                  $('.stop-process', template).on('click', function (e) {
                    e.preventDefault();
                    var self = this;
                    var warn = new IndividualModel('v-s:AreYouSure');
                    warn.load().then(function (warn) {
                      warn = warn['rdfs:label'].map(CommonUtil.formatValue).join(' ');
                      if (confirm(warn)) {
                        process['v-wf:isStopped'] = [true];
                        $(self).remove();
                        process.save();
                      }
                    });
                  });
                }
              });
            }
          });
        }
      });
      _export("html", html = "\n  <div class=\"journal-record\">\n    <hr class=\"margin-sm\" />\n    <div class=\"row\">\n      <div class=\"col-md-2 col-sm-3 event-type\">\n        <span class=\"start-process\" href=\"#\" style=\"display:none\">\n          <a href=\"#\" id=\"exp\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a>\n          <strong about=\"@\" rel=\"rdf:type\" data-template=\"v-ui:LabelTemplate\"></strong>\n        </span>\n        <span class=\"non-start-process\" about=\"@\" rel=\"rdf:type\" data-template=\"v-ui:LabelTemplate\"></span>\n      </div>\n      <div class=\"col-md-8 col-sm-6 event-desc\">\n        <div about=\"@\" rel=\"v-s:documentVersion\" data-template=\"v-ui:LabelLinkTemplate\"></div>\n        <div about=\"@\" rel=\"v-wf:onProcess\" class=\"on-process\" data-template=\"v-ui:DocumentEventTemplate_inline\"></div>\n        <span about=\"@\" rel=\"v-s:actor\" data-template=\"v-ui:LabelTemplate\"></span>\n      </div>\n      <div class=\"col-md-2 col-sm-3 event-date text-right\">\n        <span about=\"@\" property=\"v-s:created\"></span>\n      </div>\n    </div>\n    <div about=\"@\" rel=\"v-s:processJournal\" data-template=\"v-ui:SubJournalTemplate\"></div>\n  </div>\n");
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,