"use strict";

System.register(["jquery", "/js/common/util.js"], function (_export, _context) {
  "use strict";

  var $, CommonUtil, pre, html;
  return {
    setters: [function (_jquery) {
      $ = _jquery.default;
    }, function (_jsCommonUtilJs) {
      CommonUtil = _jsCommonUtilJs.default;
    }],
    execute: function () {
      _export("pre", pre = function pre(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        var defaultProperties = 'v-s:backwardTarget v-s:parent';
        var allowedProperties = (container.data('properties') || defaultProperties).split(' ');
        var name = mkName(individual);
        var visited;
        var _loop = function _loop() {
          if (individual.hasValue(property)) {
            var temp = $('h5', template);
            individual[property].forEach(function (prop) {
              var text = "<span title='" + name.title + "'>" + name.label + '</span>';
              visited = [individual.id];
              var wrapper = temp.clone();
              travel(prop, text).then(function (rText) {
                $('small', wrapper).append(rText);
                template.append(wrapper);
              });
            });
            return "break";
          }
        };
        for (var i = 0, property; property = allowedProperties[i]; i++) {
          var _ret = _loop();
          if (_ret === "break") break;
        }
        function travel(individual, text) {
          if (visited.indexOf(individual.id) >= 0) {
            return Promise.resolve(text);
          } else {
            visited.push(individual.id);
          }
          return individual.load().then(function () {
            var name = mkName(individual);
            text = "<a href='#/" + individual.id + "' title='" + name.title + "'>" + name.label + '</a>' + ' / ' + text;
            for (var _i = 0, _property; _property = allowedProperties[_i]; _i++) {
              if (individual.hasValue(_property)) {
                return travel(individual[_property][0], text);
                // break;
              }
            }

            return text;
          }).catch(function (error) {
            var errorIndividual = new IndividualModel("v-s:Error_".concat(error.code));
            return errorIndividual.load().then(function (errorIndividual) {
              return "<span>".concat(errorIndividual['v-s:errorMessage'].map(CommonUtil.formatValue).join(' '), "</span> / ").concat(text);
            });
          });
        }
        function mkName(individual) {
          var label = individual['rdf:type'][0].toString() + ': ' + individual.toString();
          var title = label;
          var re = new RegExp('.*?:');
          if (label.length > 70) {
            label = label.replace(re, function (typeName) {
              return typeName.split(' ').reduce(function (abbr, word) {
                return abbr += word.charAt(0);
              }, '').toUpperCase() + ':';
            });
            label = label.substring(0, 70) + '...';
          }
          return {
            title: title,
            label: label
          };
        }
      });
      _export("html", html = "\n  <div>\n    <h5><small></small></h5>\n  </div>\n");
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,