"use strict";

System.register(["/js/browser/util.js", "jquery", "/js/common/veda.js", "/js/common/individual_model.js"], function (_export, _context) {
  "use strict";

  var BrowserUtil, $, veda, IndividualModel, pre, post, html;
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  return {
    setters: [function (_jsBrowserUtilJs) {
      BrowserUtil = _jsBrowserUtilJs.default;
    }, function (_jquery) {
      $ = _jquery.default;
    }, function (_jsCommonVedaJs) {
      veda = _jsCommonVedaJs.default;
    }, function (_jsCommonIndividual_modelJs) {
      IndividualModel = _jsCommonIndividual_modelJs.default;
    }],
    execute: function () {
      _export("pre", pre = function pre(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        if (individual.hasValue('rdf:type', 'v-s:Appointment')) {
          $('#orgLabel', template).remove();
          $('span.unit-icon', template).remove();
          $('div.logo-image', template).remove();
          return individual.getPropertyChain('v-s:employee', 'v-s:hasImage').then(function (image) {
            if (image.length == 0) {
              individual['v-s:employee'][0]['v-s:hasImage'] = [new IndividualModel('v-s:DefaultPhoto')];
            }
            return true;
          });
        } else {
          var icon = 'fa fa-lg';
          if (individual.hasValue('rdf:type', 'v-s:Organization')) {
            $('span.unit-icon', template).remove();
          } else if (individual.hasValue('rdf:type', 'v-s:Department') || individual.hasValue('rdf:type', 'v-s:OrgGroup')) {
            icon = icon + ' fa-folder-o';
            $('span.unit-icon', template).addClass(icon);
            $('div.logo-image', template).remove();
          }
          $('div.unit-image', template).remove();
          $('#appLabel', template).remove();
        }
      });
      _export("post", post = function post(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        function trunc(el) {
          var elTxt = el.text();
          if (elTxt.length > 35) {
            el.text(elTxt.substr(0, 35) + '...');
          }
        }
        $('#create-customer', template).addClass('alert-warning');
        var commMeansPromises;
        if (individual.hasValue('v-s:employee')) {
          if (individual['v-s:employee'][0].hasValue('mnd-s:hasEmployeeProfile')) {
            var profile = individual['v-s:employee'][0]['mnd-s:hasEmployeeProfile'][0];
            $('.profileIcon', template).removeClass('hidden');
            $('.profileIcon', template).click(function (e) {
              e.preventDefault();
              BrowserUtil.showModal(profile);
            });
          }
          var isAppHasComm = individual['v-s:employee'][0].hasValue('v-s:hasCommunicationMean');
          if (isAppHasComm) {
            commMeansPromises = individual['v-s:employee'][0]['v-s:hasCommunicationMean'].map(function (commMean) {
              return commMean.load();
            });
          }
          if (!individual['v-s:employee'][0].hasValue('v-s:dateAbsenceTo')) {
            $('.absenceBlock', template).remove();
          }
          if (!individual['v-s:employee'][0].hasValue('v-s:delegate')) {
            $('.delegateBlock', template).remove();
          }
          trunc($('.for-trunc .label-template', template));
        } else {
          if (individual.hasValue('v-s:hasCommunicationMean')) {
            commMeansPromises = individual['v-s:hasCommunicationMean'].map(function (commMean) {
              return commMean.load();
            });
          }
        }
        if (commMeansPromises == undefined) {
          $('.communication-container', template).remove();
        } else {
          var faviconIcon = $('span.faviconIcon', template);
          faviconIcon.removeClass('hidden');
          var contactHolder = faviconIcon.closest('tr').attr('resource');
          if (veda.user.aspect.hasValue('v-s:hasFavoriteContact', contactHolder)) {
            faviconIcon.toggleClass('fa-star-o fa-star');
          }
          faviconIcon.click(function () {
            if (faviconIcon.hasClass('fa-star-o')) {
              veda.user.aspect.addValue('v-s:hasFavoriteContact', new IndividualModel(contactHolder));
            } else if (faviconIcon.hasClass('fa-star')) {
              veda.user.aspect.removeValue('v-s:hasFavoriteContact', new IndividualModel(contactHolder));
            }
            veda.user.aspect.save();
            faviconIcon.toggleClass('fa-star-o fa-star');
          });
          return Promise.all(commMeansPromises).then(function (commMeans) {
            commMeans.forEach( /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(commMean) {
                var phones, aDiv, _phones, phoneRow, commMeanChannel;
                return _regeneratorRuntime().wrap(function _callee$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      if (!commMean.hasValue('v-s:hasCommunicationMeanChannel', 'd:o3q2gagyvfwh430io88vvb8vel')) {
                        _context2.next = 6;
                        break;
                      }
                      phones = commMean['v-s:description'][0];
                      if (phones.indexOf(',') > 0) {
                        phones = phones.split(', ');
                      } else {
                        phones = [phones];
                      }
                      phones.forEach(function (phone) {
                        $('.work-phone', template).append("<div><a href='tel:" + phone + "'>" + phone + '</a></div>');
                      });
                      _context2.next = 21;
                      break;
                    case 6:
                      if (!commMean.hasValue('v-s:hasCommunicationMeanChannel', 'd:a1iwni0b54fvcz41vuts08bxqsh')) {
                        _context2.next = 12;
                        break;
                      }
                      aDiv = $("<div><a class='email-link' style='cursor: pointer;'></a></div>");
                      $('a', aDiv).attr('href', 'mailto:' + commMean['v-s:description'][0]).text(commMean['v-s:description'][0]);
                      $('.email', template).append(aDiv);
                      _context2.next = 21;
                      break;
                    case 12:
                      _phones = commMean['v-s:description'][0];
                      if (_phones.indexOf(' ') > 0) {
                        _phones = _phones.split(' ');
                      } else {
                        _phones = [_phones];
                      }
                      phoneRow = $('<div></div>');
                      _context2.next = 17;
                      return commMean.getPropertyChain('v-s:hasCommunicationMeanChannel', 'v-s:shortLabel');
                    case 17:
                      commMeanChannel = _context2.sent;
                      if (commMeanChannel.length > 0) {
                        phoneRow.append(commMeanChannel[0]);
                      }
                      _phones.forEach(function (phone) {
                        phoneRow.append("<a class='margin-xs-h' href='tel:" + phone + "'>" + phone + '</a>');
                      });
                      $('.other-phone', template).append(phoneRow);
                    case 21:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee);
              }));
              return function (_x) {
                return _ref.apply(this, arguments);
              };
            }());
          });
        }
      });
      _export("html", html = "\n  <tr>\n    <td width=\"80px\">\n      <div class=\"unit-image\" about=\"@\" rel=\"v-s:employee\">\n        <div about=\"@\" rel=\"v-s:hasImage\" style=\"width:60px; height:80px\">\n          <div class=\"img-thumbnail pointer\" about=\"@\" data-template=\"v-ui:ImageTemplate\"></div>\n        </div>\n      </div>\n      <div class=\"logo-image\" about=\"@\" rel=\"v-s:hasImage\" style=\"width:50px; height:50px\">\n        <div class=\"img-thumbnail\" about=\"@\" data-template=\"v-ui:ImageTemplate\"></div>\n      </div>\n      <span class=\"unit-icon\"></span>\n    </td>\n    <td width=\"320px\">\n      <div id=\"orgLabel\" about=\"@\" property=\"rdfs:label\"></div>\n      <div id=\"appLabel\" style=\"white-space: nowrap;overflow-x: hidden;text-overflow: ellipsis;width:320px\">\n        <div about=\"@\" rel=\"v-s:employee\">\n          <div>\n            <span about=\"@\" property=\"v-s:lastName\"></span>\n            <span about=\"@\" property=\"v-s:firstName\"></span>\n            <span about=\"@\" property=\"v-s:middleName\"></span>\n          </div>\n        </div>\n        <div class=\"for-trunc\" about=\"@\" rel=\"v-s:occupation\" data-template=\"v-ui:LabelTemplate\"></div>\n        <div class=\"absenceBlock\" about=\"@\" rel=\"v-s:employee\">\n          <div>\n            <span about=\"v-s:AbsenceUntilBundle\" property=\"rdfs:label\"></span>\n            <span about=\"@\" property=\"v-s:dateAbsenceTo\"></span>\n          </div>\n        </div>\n        <div class=\"delegateBlock\" about=\"@\" rel=\"v-s:employee\">\n          <div about=\"@\" rel=\"v-s:delegate\">\n            <span>\n              <span about=\"v-s:delegate\" property=\"rdfs:label\"></span>\n              <span property=\"rdfs:label\"></span>\n            </span>\n          </div>\n        </div>\n      </div>\n    </td>\n    <td class=\"hideInStructure\">\n      <div>\n        <span class=\"fa fa-lg fa-sitemap open-structure pointer margin-sm-h\" role=\"button\" tabindex=\"0\"></span>\n        <span about=\"@\" rel=\"v-s:parentOrganization\" data-template=\"v-ui:LabelTemplate\"></span>\n      </div>\n    </td>\n    <td>\n      <div class=\"communication-container row\">\n        <div class=\"work-phone col-lg-2 col-md-12\"></div>\n        <div class=\"email col-lg-5 col-md-12\" style=\"overflow-x: hidden;\"></div>\n        <div class=\"other-phone col-lg-5 col-md-12\"></div>\n      </div>\n    </td>\n    <td width=\"20px\">\n      <div>\n        <span class=\"hidden faviconIcon pointer fa fa-lg fa-star-o\"></span>\n      </div>\n      <div>\n        <a href=\"#\" class=\"hidden margin-xs-h profileIcon pointer fa fa-lg fa-id-badge\"></a>\n      </div>\n      <div>\n        <span about=\"@\" class=\"zoom hidden\" style=\"float:right;\" data-template=\"v-ui:IconModalTemplate\"></span>\n      </div>\n    </td>\n  </tr>\n");
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,