"use strict";

System.register(["/js/common/util.js", "/js/browser/util.js", "jquery", "/js/common/veda.js", "/js/common/individual_model.js", "/js/common/backend.js", "riot", "/js/browser/notify.js"], function (_export, _context) {
  "use strict";

  var CommonUtil, BrowserUtil, $, veda, IndividualModel, Backend, riot, notify, pre, post, html;
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function (skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function () { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function (exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function (type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function (record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function (finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function (tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function (iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  return {
    setters: [function (_jsCommonUtilJs) {
      CommonUtil = _jsCommonUtilJs.default;
    }, function (_jsBrowserUtilJs) {
      BrowserUtil = _jsBrowserUtilJs.default;
    }, function (_jquery) {
      $ = _jquery.default;
    }, function (_jsCommonVedaJs) {
      veda = _jsCommonVedaJs.default;
    }, function (_jsCommonIndividual_modelJs) {
      IndividualModel = _jsCommonIndividual_modelJs.default;
    }, function (_jsCommonBackendJs) {
      Backend = _jsCommonBackendJs.default;
    }, function (_riot) {
      riot = _riot.default;
    }, function (_jsBrowserNotifyJs) {
      notify = _jsBrowserNotifyJs.default;
    }],
    execute: function () {
      _export("pre", pre = function pre(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        $('#refresh', template).on('click', refresh);
        function refresh() {
          template.parent().closest('[resource]').find('[resource]').addBack('[resource]').each(function () {
            var uri = $(this).attr('resource');
            var resource = new IndividualModel(uri);
            resource.is('v-s:UserThing').then(function (isUserThing) {
              if (isUserThing) {
                resource.reset();
              }
            });
          });
        }
        var toRefresh;
        function statusHandler(status) {
          if (status === 'online' || status === 'offline') {
            toRefresh = false;
            $('#refresh', template).addClass('hidden');
          } else if (status === 'limited') {
            toRefresh = true;
            $('#refresh', template).removeClass('hidden');
          }
        }
        veda.on('status', statusHandler);
        template.one('remove', function () {
          veda.off('status', statusHandler);
        });
        template.on('click', '#edit, #save, #cancel, #delete, #recover, #destroy', function (e) {
          e.preventDefault();
          var action = $(this).attr('data-action');
          if (action === 'destroy') {
            var warning = new IndividualModel('v-s:AreYouSure');
            warning.load().then(function (warning) {
              if (confirm(warning['rdfs:label'].map(CommonUtil.formatValue).join(' '))) {
                template.parent().closest('[resource]')[0].dispatchEvent(new Event(action));
              }
            });
          } else if (action === 'delete') {
            var queryString = "'rdf:type'==='v-wf:DecisionForm' && 'v-wf:onDocument'=='" + individual.id + "' && 'v-wf:isCompleted'==false";
            Backend.query(veda.ticket, queryString).then(function (queryResult) {
              var tmp = queryResult.result;
              if (tmp.length == 0) {
                var _warning = new IndividualModel('v-s:AreYouSure');
                _warning.load().then(function (warning) {
                  if (confirm(warning['rdfs:label'].map(CommonUtil.formatValue).join(' '))) {
                    template.parent().closest('[resource]')[0].dispatchEvent(new Event(action));
                  }
                });
              } else {
                alert('Документ не может быть удален, так как по нему есть незакрытые задачи. Закройте все задачи и попробуйте ещё раз');
              }
            });
          } else {
            template.parent().closest('[resource]')[0].dispatchEvent(new Event(action));
          }
        });
        $('#cancel', template).on('click', function () {
          template.closest('.modal').modal('hide').remove();
        });
        $('#journal', template).on('click', function (e) {
          e.preventDefault();
          var journal_uri = individual.id + 'j';
          var journal = new IndividualModel(journal_uri);
          journal.load().then(function (journal) {
            if (!journal.isNew()) {
              riot.route('#/' + journal_uri);
            } else {
              var journalEmpty = new IndividualModel('v-s:JournalEmpty');
              journalEmpty.load().then(function (journalEmpty) {
                alert(journalEmpty.toString());
              });
            }
          });
        });
        $('#send', template).on('click', function (e) {
          BrowserUtil.send(individual, template.parent().closest('[resource]'));
        });
        $('#edit', template).on('click', function (e) {
          if (toRefresh) {
            refresh();
          }
        });
        $('#rights', template).on('click', function () {
          BrowserUtil.showRights(individual);
        });
        $('#files', template).click( /*#__PURE__*/function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
            var docTemplate, fileLinks, filesObj, i, uri, fileIndivid, filesPromisesDefault, filePromisesSigned, allPromises;
            return _regeneratorRuntime().wrap(function _callee$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  e.preventDefault();
                  docTemplate = template.parent().closest('[resource]');
                  fileLinks = $("a:has(>span[property='v-s:fileName'])", docTemplate);
                  filesObj = {
                    default: [],
                    signed: []
                  };
                  i = 0;
                case 5:
                  if (!(i < fileLinks.length)) {
                    _context2.next = 14;
                    break;
                  }
                  uri = $(fileLinks.get(i)).closest('[resource]').attr('resource');
                  _context2.next = 9;
                  return new veda.IndividualModel(uri).load();
                case 9:
                  fileIndivid = _context2.sent;
                  if (fileIndivid.hasValue('v-s:digitalSignature')) {
                    filesObj.signed.push(fileIndivid);
                  } else if (!fileIndivid.hasValue('v-s:backwardProperty', 'v-s:digitalSignature')) {
                    filesObj.default.push(fileIndivid);
                  }
                case 11:
                  i++;
                  _context2.next = 5;
                  break;
                case 14:
                  filesPromisesDefault = filesObj.default.map(function (fileIndivid) {
                    var fileName = fileIndivid.hasValue('v-s:fileName') ? fileIndivid['v-s:fileName'][0] : 'unknown';
                    var fileUrl = "/files/".concat(fileIndivid.id);
                    return filePromise(fileUrl, fileName);
                  });
                  filePromisesSigned = filesObj.signed.map(function (fileIndivid) {
                    var signsPromises = fileIndivid['v-s:digitalSignature'].map(function (sign) {
                      return sign.load().then(function (loaded) {
                        var fileName = loaded.hasValue('v-s:fileName') ? loaded['v-s:fileName'][0] : 'unknown';
                        var fileUrl = "/files/".concat(loaded.id);
                        return filePromise(fileUrl, fileName);
                      });
                    });
                    var fileName = fileIndivid.hasValue('v-s:fileName') ? fileIndivid['v-s:fileName'][0] : 'unknown';
                    var fileUrl = "/files/".concat(fileIndivid.id);
                    return Promise.all([filePromise(fileUrl, fileName)].concat(signsPromises));
                  });
                  allPromises = [Promise.all(filesPromisesDefault)].concat(filePromisesSigned);
                  if (!(allPromises.length == 0)) {
                    _context2.next = 20;
                    break;
                  }
                  toggleSpin(btn);
                  return _context2.abrupt("return");
                case 20:
                  return _context2.abrupt("return", Promise.all(allPromises).then(function (allFiles) {
                    _context.import('jszip').then(function (module) {
                      var JSZip = module.default;
                      var zip = new JSZip();
                      //const folder = zip.folder('files');
                      var unique = {};
                      var folderForSigned;
                      allFiles.forEach(function (files, ind) {
                        if (ind > 0) {
                          folderForSigned = zip.folder(files[0].name);
                        }
                        files.forEach(function (file) {
                          var name = file.name;
                          var i = 1;
                          while (unique[name]) {
                            name = file.name.replace(/(.*?).([^.]*)$/, '$1 (' + i + ').$2');
                            if (name === file.name) {
                              name = file.name + ' (' + i + ')';
                            }
                            i++;
                          }
                          file.name = name;
                          unique[file.name] = true;
                          if (ind == 0) {
                            zip.file(file.name, file);
                          } else {
                            folderForSigned.file(file.name, file);
                          }
                        });
                      });
                      zip.generateAsync({
                        type: 'blob'
                      }).then(function (content) {
                        _context.import('filesaver').then(function (module) {
                          var saveAs = module.default;
                          saveAs(content, 'registry.zip');
                        });
                      });
                    });
                  }).catch(function (error) {
                    notify('danger', {
                      message: 'Ошибка выгрузки реестра. Обратитесь в поддержку.'
                    });
                  }));
                case 21:
                case "end":
                  return _context2.stop();
              }
            }, _callee);
          }));
          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }());
        function filePromise(url, name) {
          return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url + '?' + Date.now(), true);
            xhr.responseType = 'blob';
            xhr.onload = function (e) {
              if (this.status == 200) {
                var file = new Blob([this.response], {
                  type: 'application/octet-stream'
                });
                file.name = name;
                file.url = url;
                resolve(file);
              } else {
                reject(xhr.statusText);
              }
            };
            xhr.onerror = function () {
              reject(xhr.statusText);
            };
            xhr.send();
          });
        }
        // Standard task
        template.on('click', 'ul#standard-task a', function (e) {
          e.preventDefault();
          var startFormTransform = $(this).attr('about');
          BrowserUtil.send(individual, template, startFormTransform, true);
        });

        // Standard process
        template.on('click', 'ul#standard-process a', function (e) {
          e.preventDefault();
          var processDefinitionId = e.target.getAttribute('about');
          var processDefinition = new IndividualModel(processDefinitionId);
          BrowserUtil.startProcess(processDefinition, individual);
        });

        // var allButtons = "send edit save cancel delete destroy journal task rights";
        var defaultButtons = 'send edit save cancel delete recover journal task';
        return individual.rights.then(function (rights) {
          var canUpdate = rights.hasValue('v-s:canUpdate', true);
          var canDelete = rights.hasValue('v-s:canDelete', true);
          var enabledButtons = (container.data('buttons') || defaultButtons).trim().split(/\s+/);
          enabledButtons.forEach(function (id) {
            if (!canUpdate && (id === 'save' || id === 'edit' || id === 'cancel' || id === 'recover')) {
              return;
            }
            if (!canDelete && (id === 'delete' || id === 'destroy')) {
              return;
            }
            $('#' + id, template).removeClass('rm hidden');
          });
          $('.rm', template).remove();
        });
      });
      _export("post", post = function post(individual, template, container, mode, extra) {
        template = $(template);
        container = $(container);
        function hideButtonsForDeleted() {
          return _hideButtonsForDeleted.apply(this, arguments);
        }
        function _hideButtonsForDeleted() {
          _hideButtonsForDeleted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var canUpdate;
            return _regeneratorRuntime().wrap(function _callee2$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (!individual.hasValue('v-s:deleted', true)) {
                    _context3.next = 9;
                    break;
                  }
                  template.find(':not(#delete, #recover, #refresh, #toggle-actions)').addClass('hidden');
                  $('#delete', template).addClass('hidden');
                  // #recover not have .rm for autoremove on canUpdate==false
                  _context3.next = 5;
                  return individual.canUpdate();
                case 5:
                  canUpdate = _context3.sent;
                  if (canUpdate) {
                    $('#recover', template).removeClass('hidden');
                  }
                  _context3.next = 12;
                  break;
                case 9:
                  template.find(':not(#delete, #recover, #refresh, #toggle-actions)').removeClass('hidden');
                  $('#delete', template).removeClass('hidden');
                  $('#recover', template).addClass('hidden');
                case 12:
                case "end":
                  return _context3.stop();
              }
            }, _callee2);
          }));
          return _hideButtonsForDeleted.apply(this, arguments);
        }
        hideButtonsForDeleted();
        individual.on('v-s:deleted', hideButtonsForDeleted);
        template.one('remove', function () {
          individual.off('v-s:deleted', hideButtonsForDeleted);
        });
        $('#toggle-actions', template).click(function () {
          template.closest('.actions').children(':not(#toggle-actions)').toggleClass('hidden');
          $(this).toggleClass('glyphicon-chevron-left glyphicon-chevron-right btn-link btn-info');
        });

        // Make position fixed for buttons bar that doesn't fit the window
        function checkOffset(main, actions, placeholder) {
          var mainTop = main.offset().top;
          var mainHeight = main.height();
          var windowHeight = window.innerHeight;
          var windowTop = window.scrollY || window.pageYOffset;
          var actionsStaticTop = placeholder.offset().top;
          var actionsStaticHeight = actions.height();
          var actions_inside_viewport = windowTop <= actionsStaticTop && actionsStaticTop + actions.height() < windowTop + windowHeight;
          var main_inside_viewport = windowTop <= mainTop + mainHeight - actionsStaticHeight && mainTop + actionsStaticHeight < windowTop + windowHeight;
          if (!actions_inside_viewport && main_inside_viewport) {
            if (!actions.hasClass('actions-fixed')) {
              placeholder.css('height', actionsStaticHeight);
              actions.addClass('actions-fixed');
            }
          } else {
            if (actions.hasClass('actions-fixed')) {
              placeholder.css('height', 0);
              actions.removeClass('actions-fixed');
            }
          }
        }
        var main = template.parent().closest('[resource]');
        var actions = template.closest('.actions');
        var placeholder;
        if (actions.length) {
          placeholder = $('<div></div>').insertBefore(actions);
          $(window).on('scroll', scrollHandler);
          template.one('remove', function () {
            $(window).off('scroll', scrollHandler);
          });
          $('#toggle-actions', template).detach().appendTo(actions).removeClass('hidden');
          setTimeout(checkOffset, 0, main, actions, placeholder);
        }
        function scrollHandler() {
          checkOffset(main, actions, placeholder);
        }

        // Respect validation state of parent template
        var closest = template.parent().closest('[resource]');
        closest.on('internal-validated', function (e) {
          var validation = e.detail;
          if (validation.state) {
            $('.action#save', template).removeAttr('disabled');
            $('.action#send', template).removeAttr('disabled');
            $('.action#task-button', template).removeAttr('disabled');
          } else {
            $('.action#save', template).attr('disabled', 'disabled');
            $('.action#send', template).attr('disabled', 'disabled');
            $('.action#task-button', template).attr('disabled', 'disabled');
          }
          e.stopPropagation();
        });
      });
      _export("html", html = "\n  <span>\n    <button type=\"button\" class=\"btn btn-success view -edit -search hidden glyphicon glyphicon-refresh\" id=\"refresh\" data-action=\"refresh\"></button>\n    <button type=\"submit\" class=\"rm hidden action btn btn-warning view edit -search\" id=\"send\" data-action=\"send\" about=\"v-s:Send\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"rm hidden action btn btn-primary view -edit -search\" id=\"edit\" data-action=\"edit\" about=\"v-s:Edit\" property=\"rdfs:label\"></button>\n    <button type=\"submit\" class=\"rm hidden action btn btn-success -view edit -search\" id=\"save\" data-action=\"save\" about=\"v-s:Save\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"rm hidden action btn btn-default -view edit -search\" id=\"cancel\" data-action=\"kancel\" about=\"v-s:Cancel\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"rm hidden action btn btn-link view -edit -search\" id=\"delete\" data-action=\"delete\" about=\"v-s:Delete\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"hidden action btn btn-primary view -edit -search\" id=\"recover\" data-action=\"recover\" about=\"v-s:Recover\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"rm hidden action btn btn-danger view edit -search\" id=\"destroy\" data-action=\"destroy\" about=\"v-s:Destroy\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"rm hidden action btn btn-default view -edit -search\" id=\"journal\" data-action=\"journal\" about=\"v-s:ViewJournal\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"rm hidden action btn btn-default view -edit -search\" id=\"rights\" data-action=\"rights\" about=\"v-s:Rights\" property=\"rdfs:label\"></button>\n    <button type=\"button\" class=\"rm hidden action btn btn-default view -edit -search\" id=\"files\" data-action=\"files\" about=\"v-fs:FilesRegistry\" property=\"rdfs:label\"></button>\n    <div class=\"rm hidden action btn-group dropup view -edit -search\" id=\"task\">\n      <button class=\"action btn btn-warning btn-block dropdown-toggle\" id=\"task-button\" data-toggle=\"dropdown\">\n        <span about=\"v-s:SendTask\" property=\"rdfs:label\"> </span>\n        <span class=\"caret\"></span>\n      </button>\n      <ul class=\"dropdown-menu\" id=\"standard-task\">\n        <li><a href=\"#\" about=\"v-wf:questionRouteStartForm\" property=\"rdfs:label\"></a></li>\n        <li><a href=\"#\" about=\"v-wf:instructionRouteStartForm\" property=\"rdfs:label\"></a></li>\n        <li><a href=\"#\" about=\"v-wf:taskRouteStartForm\" property=\"rdfs:label\"></a></li>\n        <li><a href=\"#\" about=\"v-wf:coordinationRouteStartForm\" property=\"rdfs:label\"></a></li>\n        <li><a href=\"#\" about=\"v-wf:signRouteStartForm\" property=\"rdfs:label\"></a></li>\n        <li><a href=\"#\" about=\"v-wf:confirmationRouteStartForm\" property=\"rdfs:label\"></a></li>\n        <li class=\"divider\"></li>\n        <li><a href=\"#\" about=\"v-wf:distributionRouteStartForm\" property=\"rdfs:label\"></a></li>\n      </ul>\n    </div>\n    <div class=\"rm hidden action btn-group dropup view -edit -search\" id=\"process\">\n      <button class=\"action btn btn-warning btn-block dropdown-toggle\" id=\"process-button\" data-toggle=\"dropdown\">\n        <span about=\"v-ui:StartProcess\" property=\"rdfs:label\"></span>\n        <span class=\"caret\"></span>\n      </button>\n      <ul class=\"dropdown-menu\" id=\"standard-process\">\n        <li><a href=\"#\" about=\"bpmn:SimpleTaskProcessDefinition\" property=\"rdfs:label\"></a></li>\n      </ul>\n    </div>\n    <button type=\"button\" class=\"btn btn-link view edit -search action hidden glyphicon glyphicon-chevron-left\" id=\"toggle-actions\"></button>\n  </span>\n");
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,